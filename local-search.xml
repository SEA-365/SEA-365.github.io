<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git-GitHub仓库代码同步至Gitee【一直报权限错！！！】</title>
    <link href="/2023/10/10/Git-GitHub%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E5%90%8C%E6%AD%A5%E8%87%B3Gitee%E3%80%90%E4%B8%80%E7%9B%B4%E6%8A%A5%E6%9D%83%E9%99%90%E9%94%99%EF%BC%81%EF%BC%81%EF%BC%81%E3%80%91/"/>
    <url>/2023/10/10/Git-GitHub%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E5%90%8C%E6%AD%A5%E8%87%B3Gitee%E3%80%90%E4%B8%80%E7%9B%B4%E6%8A%A5%E6%9D%83%E9%99%90%E9%94%99%EF%BC%81%EF%BC%81%EF%BC%81%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-GitHub仓库代码同步至Gitee【一直报权限错！！！】"><a href="#Git-GitHub仓库代码同步至Gitee【一直报权限错！！！】" class="headerlink" title="Git-GitHub仓库代码同步至Gitee【一直报权限错！！！】"></a>Git-GitHub仓库代码同步至Gitee【一直报权限错！！！】</h1><ul><li>如题，最近想写一个个人博客项目，想着希望能在GitHub和Gitee上都能够同步更新我提交的代码，于是开始去捣鼓。。。</li><li>第一次接触这个，弄了我俩小时，尝试了20次左右还是不断地报各种各样的错误，真的很烦啊，现在弄完了，记录一下！！</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Git-GitHub%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E5%90%8C%E6%AD%A5%E8%87%B3Gitee_1.png" alt="Git-GitHub仓库代码同步至Gitee_1"></p><h2 id="一、生成Gitee账号的私人令牌"><a href="#一、生成Gitee账号的私人令牌" class="headerlink" title="一、生成Gitee账号的私人令牌"></a>一、生成Gitee账号的私人令牌</h2><ul><li><p>登录Gitee账号，进入设置，点击私人令牌&#x3D;&gt;生成新令牌：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Git-GitHub%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E5%90%8C%E6%AD%A5%E8%87%B3Gitee_2.png" alt="Git-GitHub仓库代码同步至Gitee_2"></p></li><li><p>注意，生成的令牌仅显示一次，记得保存好！</p></li></ul><h2 id="二、生成本地SSH私钥"><a href="#二、生成本地SSH私钥" class="headerlink" title="二、生成本地SSH私钥"></a>二、生成本地SSH私钥</h2><ul><li><p>1、通过命令 <code>ssh-keygen</code> 生成 SSH Key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;Gitee SSH Key&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>-t</code> key 类型</li><li><code>-C</code> 注释</li></ul><p>输出，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shellscript">Generating public/private ed25519 key pair.<br>Enter file in which to save the key (/home/git/.ssh/id_ed25519):<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /home/git/.ssh/id_ed25519<br>Your public key has been saved in /home/git/.ssh/id_ed25519.pub<br>The key fingerprint is:<br>SHA256:ohDd0OK5WG2dx4gST/j35HjvlJlGHvihyY+Msl6IC8I Gitee SSH Key<br>The key&#x27;s randomart image is:<br>+--[ED25519 256]--+<br>|    .o           |<br>|   .+oo          |<br>|  ...O.o +       |<br>|   .= * = +.     |<br>|  .o +..S*. +    |<br>|. ...o o..+* *   |<br>|.E. o . ..+.O    |<br>| . . ... o =.    |<br>|    ..oo. o.o    |<br>+----[SHA256]-----+<br></code></pre></td></tr></table></figure><ul><li>中间通过三次<strong>回车键</strong>确定;</li></ul></li><li><p>2.公钥和私钥一般在<code>~/.ssh/</code>文件夹下；</p></li></ul><h2 id="三、在Github的仓库设置中添加私人令牌和私钥"><a href="#三、在Github的仓库设置中添加私人令牌和私钥" class="headerlink" title="三、在Github的仓库设置中添加私人令牌和私钥"></a>三、在Github的仓库设置中添加私人令牌和私钥</h2><ul><li><p>进入Github仓库的设置页面进行添加：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Git-GitHub%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E5%90%8C%E6%AD%A5%E8%87%B3Gitee_3.png" alt="Git-GitHub仓库代码同步至Gitee_3"></p></li></ul><h2 id="四、项目工程目录新建工作流"><a href="#四、项目工程目录新建工作流" class="headerlink" title="四、项目工程目录新建工作流"></a>四、项目工程目录新建工作流</h2><ul><li><p>一般是在项目根目录下的<code>.github/workflows</code>下面，新建文件<code>sync-to-gitee.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">syncToGitee</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span> <span class="hljs-comment">#Github仓库分支名称</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">repo-sync:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">SSH</span> <span class="hljs-string">key</span> <span class="hljs-comment"># 1.设置SSH私钥</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          mkdir -p ~/.ssh</span><br><span class="hljs-string">          echo &quot;$SSH_PRIVATE_KEY&quot; &gt; ~/.ssh/id_rsa</span><br><span class="hljs-string">          chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string">          ssh-keyscan -H gitee.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string"></span>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">SSH_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_PRIVATE_KEY</span> <span class="hljs-string">&#125;&#125;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">loaded</span> <span class="hljs-string">SSH</span> <span class="hljs-string">key</span> <span class="hljs-comment"># 2.检查SSH私钥是否设置成功</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          cat ~/.ssh/id_rsa</span><br><span class="hljs-string"></span>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">SSH_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_PRIVATE_KEY</span> <span class="hljs-string">&#125;&#125;</span><br><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Test</span> <span class="hljs-string">SSH</span> <span class="hljs-string">connection</span> <span class="hljs-comment"># 3.测试通过该私钥是否能够访问Gitee</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">ssh</span> <span class="hljs-string">-vT</span> <span class="hljs-string">git@gitee.com</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">SSH_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_PRIVATE_KEY</span> <span class="hljs-string">&#125;&#125;</span><br><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Mirror</span> <span class="hljs-string">to</span> <span class="hljs-string">Gitee.</span> <span class="hljs-comment"># 4.将Github仓库镜像至Gitee</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">Yikun/hub-mirror-action@master</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">src:</span> <span class="hljs-string">&#x27;github/GitHub用户名&#x27;</span><br>          <span class="hljs-attr">dst:</span> <span class="hljs-string">&#x27;gitee/Gitee用户名&#x27;</span><br>          <span class="hljs-attr">dst_key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_PRIVATE_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">dst_token:</span>  <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITEE_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">static_list:</span> <span class="hljs-string">&quot;需要同步的GitHub仓库名&quot;</span><br><br></code></pre></td></tr></table></figure></li><li><p>以上，就是整个过程，在这个过程中，可能会出现各种各样的问题，出现问题不要着急，好好查看日志，查看工作流中的报错，去搜索引擎，去问问ChatGPT，肯定能够解决的。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SEA-Blog-项目需求</title>
    <link href="/2023/10/04/SEA-Blog-%E9%A1%B9%E7%9B%AE%E9%9C%80%E6%B1%82/"/>
    <url>/2023/10/04/SEA-Blog-%E9%A1%B9%E7%9B%AE%E9%9C%80%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="SEA-Blog-项目需求"><a href="#SEA-Blog-项目需求" class="headerlink" title="SEA-Blog-项目需求"></a>SEA-Blog-项目需求</h1><ul><li><p>2023年10月4日，着手开始准备个人博客网站的开发，mark一下；</p></li><li><p>整体参考github开源项目：<a href="https://github.com/linhaojun857/aurora/tree/master">linhaojun857&#x2F;aurora: 基于SpringBoot+Vue开发的个人博客系统 (github.com)</a></p></li><li><p>分为前台展示端和后台管理端；</p></li><li><p>当前版本实现：:white_check_mark: </p></li><li><p>下一版本实现：:bell:</p></li></ul><h2 id="前台展示端"><a href="#前台展示端" class="headerlink" title="前台展示端"></a>前台展示端</h2><ul><li><p>参考：<a href="https://www.linhaojun.top/">花未眠的个人博客 (linhaojun.top)</a></p></li><li><p>前端页面：</p><ul><li><p>首页:white_check_mark:：首页展示推荐文章、文章列表、个人简介信息、网站信息、最近评论、标签目录；</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Blog-%E9%A6%96%E9%A1%B5_1.png" alt="Blog-首页_1"></p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Blog-%E9%A6%96%E9%A1%B5_2.png" alt="Blog-首页_2"></p></li><li><p>归档:white_check_mark:：根据博客文章的发布时间顺序构造进度树；</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Blog-%E5%BD%92%E6%A1%A3_1.png" alt="Blog-归档_1"></p></li><li><p>分类:white_check_mark:：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Blog-%E5%88%86%E7%B1%BB_1.png" alt="Blog-分类_1"></p></li><li><p>标签:white_check_mark:：展示文章标签词云</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Blog-%E6%A0%87%E7%AD%BE_1.png" alt="Blog-标签_1"></p></li><li><p>关于:white_check_mark:：展示个人介绍和联系方式；</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Blog.png" alt="Blog-关于_1"></p></li><li><p>留言:white_check_mark:：增加</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Blog-%E5%85%B3%E4%BA%8E_1.png" alt="image-20231004153147579"></p></li><li><p>友链:bell:：后续增加；</p></li></ul></li><li><p>登录注册:white_check_mark:：用户登录、用户注册；</p></li><li><p>后端提供接口:white_check_mark:</p></li></ul><h2 id="后台管理端"><a href="#后台管理端" class="headerlink" title="后台管理端"></a>后台管理端</h2><ul><li><p>参考<a href="https://admin.linhaojun.top/">后台管理系统 (linhaojun.top)</a></p></li><li><p>包括：</p><ul><li>内容管理；</li><li>可视化展示；</li><li>在线编辑md文档；</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Blog-%E5%90%8E%E5%8F%B0_1.png" alt="Blog-后台_1"></p><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SEA-Blog-%E6%80%BB%E4%BD%93%E8%AE%BE%E8%AE%A1_1.png" alt="SEA-Blog-总体设计_1"></p>]]></content>
    
    
    <categories>
      
      <category>SEA-Blog</category>
      
      <category>项目需求</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SEA-Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MybatisPlus-入门案例</title>
    <link href="/2023/10/03/MybatisPlus-%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"/>
    <url>/2023/10/03/MybatisPlus-%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="MybatisPlus-入门案例"><a href="#MybatisPlus-入门案例" class="headerlink" title="MybatisPlus-入门案例"></a>MybatisPlus-入门案例</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul><li><p>一个基于<code>Mybatis</code>框架的基础上开发的增强型工具；</p></li><li><p>目的：简化开发，提高开发效率；</p></li><li><p>官方网站：<a href="https://mybatis.plus/">MyBatis-Plus</a>、<a href="https://baomidou.com/">MyBatis-Plus (baomidou.com)</a></p></li><li><p>特性【来自官网】：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/MybatisPlus-%E7%89%B9%E6%80%A7.png" alt="MyBatisPlus-特性"></p></li></ul><h2 id="二、入门案例"><a href="#二、入门案例" class="headerlink" title="二、入门案例"></a>二、入门案例</h2><ul><li><p><strong>新建SpringBoot工程</strong></p><ul><li><p>当前在<code>SpringBoot</code>环境下使用<code>MybatisPlus</code>;</p></li><li><p>新建工程时引入数据库连接驱动类；</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/MybatisPlus-%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B_1.png" alt="MybatisPlus-入门案例_1"></p></li></ul></li><li><p><strong>导入依赖项坐标</strong></p><ul><li><p>除了创建<code>SpringBoot</code>工程时默认导入的起步依赖外，还包括数据库连接池<code>Druid</code>、<code>MybatisPlus</code>在<code>SpringBoot</code>环境下的<strong>起步依赖</strong>【注意：不要导错了，是<code>mybatis-plus-boot-starter</code>】;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--MySQL数据库驱动类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--MybatisPlus在SpringBoot环境下的起步依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--数据库连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>数据库连接配置</strong></p><ul><li><p>在<code>application.yml</code>文件中进行如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatisdb?useSSL=false&amp;serverTimezone=Asia/Shanghai</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">12345678</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>创建实体类以及数据库表结构</strong></p><ul><li><p>类名与表名对应；</p></li><li><p>属性名与字段名对应；</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/MybatisPlus-%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B_2.png" alt="MybatisPlus-入门案例_2"></p><ul><li>此处字段<code>id</code>为Long类型，考虑：新增操作时，MybatisPlus会自动生成一个Long类型的id值；</li></ul></li></ul></li><li><p><strong>新建数据访问层（Dao）接口</strong></p><ul><li><p>数据访问层接口通过：</p><ul><li>使用SpringBoot框架提供的注解<code>@Mapper</code>；</li><li>继承MyBatisPlus框架提供的基础Mapper接口<code>BaseMapper</code>；</li></ul></li><li><p>达到简化开发的目的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/10/3 11:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>编写测试类进行测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/10/3 11:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    UserDao userDao;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAll</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; users = userDao.selectList(<span class="hljs-literal">null</span>);<br><br>        System.out.println(users.size());<br>        System.out.println(users);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>测试结果：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/MyBatisPlus-%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B_3.png" alt="MybatisPlus-入门案例_3"></p></li></ul></li></ul><h2 id="三、引入Lombok简化实体类"><a href="#三、引入Lombok简化实体类" class="headerlink" title="三、引入Lombok简化实体类"></a>三、引入Lombok简化实体类</h2><ul><li><p>通过注解的方式简化实体类的代码编写：</p><ul><li><p>例如，下面的代码与上面的实体类定义等价；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@EqualsAndHashCode</span><br><span class="hljs-meta">@ToString</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    Long id;<br>    String username;<br>    String password;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>使用方式：</p><ul><li><p>导入依赖项坐标；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--LomBok坐标--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在实体类上使用相应的注解；</p></li></ul></li><li><p>其中，注解<code>@Data</code>相当于<code>@Setter</code>、<code>@Getter</code>、<code>@EqualsAndHashCode</code>、<code>@ToString</code>四个注解的集合，因此，上述的实体类也等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    Long id;<br>    String username;<br>    String password;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>MybatisPlus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MybatisPlus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录-20230928</title>
    <link href="/2023/09/28/%E8%AE%B0%E5%BD%95-20230928/"/>
    <url>/2023/09/28/%E8%AE%B0%E5%BD%95-20230928/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6fa3c94b4b1dc826923fdd3eb67d21e96e081f6b22fcb565a113078440294749"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章已加密，请输入密码阅读！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>学习路上的一些记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot-整合第三方框架技术</title>
    <link href="/2023/09/26/SpringBoot-%E6%95%B4%E5%90%88%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/"/>
    <url>/2023/09/26/SpringBoot-%E6%95%B4%E5%90%88%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-整合第三方框架技术"><a href="#SpringBoot-整合第三方框架技术" class="headerlink" title="SpringBoot-整合第三方框架技术"></a>SpringBoot-整合第三方框架技术</h1><h2 id="一、整合Junit框架"><a href="#一、整合Junit框架" class="headerlink" title="一、整合Junit框架"></a>一、整合Junit框架</h2><h3 id="1-1-回顾Spring整合Junit过程"><a href="#1-1-回顾Spring整合Junit过程" class="headerlink" title="1.1 回顾Spring整合Junit过程"></a>1.1 回顾Spring整合Junit过程</h3><ul><li>之前学习Spring框架时，进行了Spring整合Junit框架的操作，回顾如下：<ul><li><p>1.手动导入依赖项坐标；</p></li><li><p>2.编写测试类；</p><ul><li>设定类运行器；</li><li>指定Spring配置类；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/11 15:50</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span>  <span class="hljs-comment">//设定类运行器</span><br><span class="hljs-meta">@ContextConfiguration(classes= SpringConfig.class)</span> <span class="hljs-comment">//指定Spring配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountServiceTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAccountService</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(accountService.findAll());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-2-SpringBoot整合Junit过程"><a href="#1-2-SpringBoot整合Junit过程" class="headerlink" title="1.2 SpringBoot整合Junit过程"></a>1.2 SpringBoot整合Junit过程</h3><ul><li><p>SpringBoot中整合Junit框架步骤如下：</p><ul><li><p>1.编写配置类</p><ul><li>使用注解<code>@SpringBootTest</code>;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/26 15:24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImplTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        bookService.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意的点：</p><ul><li>注解<code>@SpringBootTest</code>替代了：1.设定类运行器；2.指定Spring配置类；两个过。</li><li>可以理解为进行了更加上层的封装，实际原理还是没有改变；</li></ul></li></ul></li></ul><h2 id="二、SpringBoot整合SSM"><a href="#二、SpringBoot整合SSM" class="headerlink" title="二、SpringBoot整合SSM"></a>二、SpringBoot整合SSM</h2><ul><li>在新建<code>SpringBoot</code>项目时，使用<code>Spring initializr</code>创建时，选择引入了<code>Spring Web</code>，此时项目中已经有了<code>Spring</code>以及<code>SpringMVC</code>的环境，剩下需要整合的是<code>Mybatis</code>;</li></ul><h3 id="2-1-回顾Spring整合Mybatis过程"><a href="#2-1-回顾Spring整合Mybatis过程" class="headerlink" title="2.1 回顾Spring整合Mybatis过程"></a>2.1 回顾Spring整合Mybatis过程</h3><ul><li><p>同样的回顾Spring整合Mybatis的过程：</p><ul><li><p>0.导入相关依赖项的坐标</p></li><li><p>1.编写<code>SpringConfig.java</code>配置类</p></li><li><p>2.编写<code>JDBCConfig.java</code>配置类</p><ul><li>引入<code>properties</code>文件</li><li>配置数据源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/10 09:47</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span> <span class="hljs-comment">//配置引入的properties文件路径</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-comment">//通过注解给简单类型注入值</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">//1.定义一个方法获取要管理的bean对象</span><br>    <span class="hljs-comment">//2.给该方法的返回值添加@Bean，定义成Bean对象</span><br>    <span class="hljs-meta">@Bean(&quot;dataSource_druid&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setDriverClassName(driver);<br>        druidDataSource.setUrl(url);<br>        druidDataSource.setUsername(username);<br>        druidDataSource.setPassword(password);<br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>3.编写<code>MyBatisConfig.java</code>配置类</p><ul><li>设置用于管理数据库连接和执行SQL语句<code>SqlSessionFactoryBean</code>;</li><li>设置mapper映射器<code>MapperScannerConfigurer</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/10 10:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构建SqlSessionFactoryBean</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    @Autowired</span><br><span class="hljs-comment">//    private DataSource dataSource;</span><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactoryBean <span class="hljs-title function_">sqlSessionFactory</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">sqlSessionFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="hljs-string">&quot;com.sea.domain&quot;</span>);<br>        sqlSessionFactoryBean.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> sqlSessionFactoryBean;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构建mapper映射器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MapperScannerConfigurer <span class="hljs-title function_">mapperScannerConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MapperScannerConfigurer</span> <span class="hljs-variable">mapperScannerConfigurer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperScannerConfigurer</span>();<br>        mapperScannerConfigurer.setBasePackage(<span class="hljs-string">&quot;com.sea.dao&quot;</span>);<br>        <span class="hljs-keyword">return</span> mapperScannerConfigurer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>4.在<code>SpringConfig.java</code>配置类中引入<code>JDBCConfig.java</code>配置类和<code>MyBatisConfig.java</code>配置类;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/10 09:30</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//声明该类为配置类</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.sea&quot;&#125;)</span> <span class="hljs-comment">//配置bean扫描的包路径</span><br><span class="hljs-meta">@Import(&#123;JdbcConfig.class, MybatisConfig.class&#125;)</span> <span class="hljs-comment">//引入其他配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-2-SpringBoot整合Mybatis过程"><a href="#2-2-SpringBoot整合Mybatis过程" class="headerlink" title="2.2 SpringBoot整合Mybatis过程"></a>2.2 SpringBoot整合Mybatis过程</h3><ul><li><p>SpringBoot中整合Mybatis框架步骤如下：</p><ul><li><p>0.只需导入Druid数据源坐标即可</p></li><li><p>1.配置数据库连接</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/springdb?useSSL=false&amp;serverTimezone=Asia/Shanghai</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">12345678</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br></code></pre></td></tr></table></figure></li><li><p>2.给Dao接口上增加注解<code>@Mapper</code></p><ul><li>注解<code>@Mapper</code>用于代替原来的mapper映射器的功能：该注解修饰的类SpringBoot程序会自动为其创建bean对象；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/27 17:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountDao</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select * from account;&quot;)</span><br>    List&lt;Account&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>现在就可以进行测试了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/27 17:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestAccountDao</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    AccountDao accountDao;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Account&gt; all = accountDao.findAll();<br>        System.out.println(all);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SpringBoot-%E6%95%B4%E5%90%88Mybatis" alt="SpringBoot-整合Mybatis"></p>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot-基础配置</title>
    <link href="/2023/09/22/SpringBoot-%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/"/>
    <url>/2023/09/22/SpringBoot-%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-配置相关"><a href="#SpringBoot-配置相关" class="headerlink" title="SpringBoot-配置相关"></a>SpringBoot-配置相关</h1><h2 id="一、基础配置"><a href="#一、基础配置" class="headerlink" title="一、基础配置"></a>一、基础配置</h2><ul><li><p>SpringBoot提供了多种属性配置方式，主要有以下三种：</p><ul><li><p><code>application.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">80</span><br></code></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">81</span><br></code></pre></td></tr></table></figure></li><li><p><code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">82</span><br></code></pre></td></tr></table></figure><hr></li></ul></li><li><p>三种格式同时存在时，加载顺序为：<code>application.properties</code> &#x3D;&gt; <code>application.yml</code> &#x3D;&gt; <code>application.yaml</code>；</p></li></ul><h2 id="二、yaml文件格式"><a href="#二、yaml文件格式" class="headerlink" title="二、yaml文件格式"></a>二、yaml文件格式</h2><ul><li><p><code>yaml</code>格式简介：</p><ul><li><p>全称<code>YAML Ain&#39;t Markup Language</code>，一种数据序列化格式；</p></li><li><p>数组数据的描述方式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">enterprise:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">sea</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br>  <span class="hljs-attr">subject:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Java</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Front</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Back</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">BigData</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>优点</strong>：</p><ul><li>1.容易阅读；</li><li>2.方便与脚本语言交互【方便解析】；</li><li>3.以数据为核心，重数据轻格式；</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li>1.语法格式敏感；</li></ul></li><li><p><strong>数据读取方式</strong>：</p><ul><li><p>方式一：使用<code>@Value</code>注解可以读取yaml文件中的单个数据；</p></li><li><p>方式二：封装yaml文件的全部数据到<code>Environment</code>对象，使用<code>对象.数据名称</code>读取数据；</p></li><li><p>方式三：使用自定义对象封装指定数据；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#yaml文件</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">82</span><br><br><span class="hljs-attr">enterprise:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">sea</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br>  <span class="hljs-attr">subject:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Java</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Front</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Back</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">BigData</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/22 16:56</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/books&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br><span class="hljs-comment">//@Value注解读取单个数据</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;enterprise.age&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-comment">//将全部数据封装到Environment对象中</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Environment environment;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Enterprise enterprise;<br>    <span class="hljs-meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBookById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br><span class="hljs-comment">//方式一</span><br>        System.out.println(<span class="hljs-string">&quot;id === &quot;</span> + id + <span class="hljs-string">&quot;  age = &quot;</span> + age);<br><span class="hljs-comment">//方式二</span><br>        System.out.println(<span class="hljs-string">&quot;age = &quot;</span> + environment.getProperty(<span class="hljs-string">&quot;enterprise.age&quot;</span>));<br><span class="hljs-comment">//方式三：自定义对象封装指定数据</span><br>        System.out.println(enterprise);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;id  === &quot;</span>  + id + <span class="hljs-string">&quot;  age = &quot;</span> + age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方式三需要自定义的对象如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/22 18:24</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Component</span><span class="hljs-comment">//使Spring能够扫描到该对象，构建对应的bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;enterprise&quot;)</span><span class="hljs-comment">//指定封装的数据的层级前缀，该层下的数据都被封装到该对象中；</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Enterprise</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String[] subject;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Enterprise</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    ......<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>使用注解<code>@ConfigurationProperties(prefix = &quot;enterprise&quot;)</code>时会报警告，需要添加以下依赖项坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SpringBoot-yaml%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96.png" alt="SpringBoot-yaml格式数据读取"></p></li></ul></li></ul><h2 id="三、多环境开发配置"><a href="#三、多环境开发配置" class="headerlink" title="三、多环境开发配置"></a>三、多环境开发配置</h2><ul><li>即项目配置多套启动环境：开发环境、测试环境以及生产环境；</li></ul><h3 id="3-1-配置方式"><a href="#3-1-配置方式" class="headerlink" title="3.1 配置方式"></a>3.1 配置方式</h3><ul><li><p><strong>方式一</strong>：在<code>application.yml</code>文件中配置</p><ul><li>以<code>---</code>作为文档分隔符，将多个环境分成独立的文档；</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#设置启动环境</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">test</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment">#开发环境</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment">#测试环境</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">test</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">81</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment">#生产环境</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">pro</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">82</span><br></code></pre></td></tr></table></figure></li><li><p><strong>方式二</strong>：以<code>application.properties</code>文件作为主配置，控制当前项目启动环境；</p><ul><li>三个环境的配置文件命名为<code>application-环境名称.properties</code>，主配置文件通过<code>spring.profiles.active=环境名称</code>来设置当前启动环境；</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#application.properties文件</span><br><span class="hljs-comment">#设置启动环境【优先级高于.yml文件】</span><br><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">dev</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#application-dev.properties文件</span><br><span class="hljs-comment">#开发环境</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8080</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#application-test.properties文件</span><br><span class="hljs-comment">#测试环境</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8081</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#application-pro.properties文件</span><br><span class="hljs-comment">#生产环境</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8082</span><br></code></pre></td></tr></table></figure></li><li><p>打包之后产生的<code>jar</code>包，，可以通过命令行参数设置临时启动环境参数。例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar springboot_03_profile-<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>-SNAPSHOT.jar<br><br><span class="hljs-attribute">java</span> -jar springboot_03_profile-<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>-SNAPSHOT.jar --spring.profiles.active=test<br></code></pre></td></tr></table></figure><ul><li><code>jar</code>包中配置的默认启动环境为test环境，80端口；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SpringBoot-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8Cjar%E5%8C%85%E8%AE%BE%E7%BD%AE%E4%B8%B4%E6%97%B6%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0_1.png" alt="SpringBoot-命令行执行jar包设置临时启动参数_1"></p><ul><li>设置临时启动环境参数为<code>dev</code>，即以开发环境启动：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SpringBoot-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8Cjar%E5%8C%85%E8%AE%BE%E7%BD%AE%E4%B8%B4%E6%97%B6%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0_2.png" alt="SpringBoot-命令行执行jar包设置临时启动参数_2"></p></li></ul><h3 id="3-2-与Maven的pom-xml文件中配置的多环境之间的兼容问题"><a href="#3-2-与Maven的pom-xml文件中配置的多环境之间的兼容问题" class="headerlink" title="3.2 与Maven的pom.xml文件中配置的多环境之间的兼容问题"></a>3.2 与Maven的<code>pom.xml</code>文件中配置的多环境之间的兼容问题</h3><ul><li><p>由于SpringBoot项目打包的过程是通过Maven的<code>package</code>命令完成的，因此，需要将Maven中的环境配置参数传递给SpringBoot的配置文件进行修改；【否则SpringBoot项目并不知道Maven中指定的具体环境仍会以SpringBoot配置文件中的启动环境进行启动】</p></li><li><p>具体如何将【Maven中的环境配置参数】传递给【SpringBoot的配置文件】如下：</p><ul><li><p>Maven的<code>pom.xml</code>配置多环境以及解析资源文件的插件【没有该插件以及插件的相应配置则无法解析资源文件中的内容】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--这个插件用来解析项目中的资源文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--当设置为 true 时，插件会使用默认的分隔符（$&#123;&#125;）来查找和替换占位符。--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">useDefaultDelimiters</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">useDefaultDelimiters</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开发环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">profile.active</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">profile.active</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>          <span class="hljs-comment">&lt;!--Maven指定默认启动环境--&gt;</span><br>            <span class="hljs-comment">&lt;!--此时，在SpringBoot项目中获取到的参数profile.active的值为：dev--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--测试环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">profile.active</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">profile.active</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--生产环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>pro<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">profile.active</span>&gt;</span>pro<span class="hljs-tag">&lt;/<span class="hljs-name">profile.active</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>SpringBoot项目的配置文件</p><ul><li>通过<code>$&#123;参数名称&#125;</code>进行动态修改SpringBoot项目的启动环境配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#设置启动环境</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">$&#123;profile.active&#125;</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment">#开发环境</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment">#测试环境</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">test</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">81</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment">#生产环境</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">pro</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">82</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>这样就解决了兼容问题：</p><ul><li>Maven的配置文件<code>pom.xml</code>负责控制整个SpringBoot项目的启动环境；</li><li>SpringBoot的配置文件通过读取Maven中的参数值动态改变启动环境；</li></ul></li></ul><h2 id="四、配置文件优先级"><a href="#四、配置文件优先级" class="headerlink" title="四、配置文件优先级"></a>四、配置文件优先级</h2><ul><li><p>在运行打包后的jar时，配置文件的优先级分类如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SpringBoot-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB.png" alt="SpringBoot-配置文件分类"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot-SpringBoot入门案例</title>
    <link href="/2023/09/21/SpringBoot-SpringBoot%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"/>
    <url>/2023/09/21/SpringBoot-SpringBoot%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-SpringBoot入门案例"><a href="#SpringBoot-SpringBoot入门案例" class="headerlink" title="SpringBoot-SpringBoot入门案例"></a>SpringBoot-SpringBoot入门案例</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul><li>SpringBoot是由Spring项目的创建者之一、Pivotal团队的工程师Phil Webb领导开发全新框架；【2013&#x2F;2014年左右发布】</li><li>设计目的：用来<strong>简化Spring应用的初始搭建以及开发过程</strong>；</li></ul><h2 id="二、起步依赖"><a href="#二、起步依赖" class="headerlink" title="二、起步依赖"></a>二、起步依赖</h2><ul><li><p>新建SpringBoot工程，默认导入的一些起步依赖如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SpringBoot-%E8%B5%B7%E6%AD%A5%E4%BE%9D%E8%B5%96_1.png" alt="SpringBoot-起步依赖_1"></p></li><li><p>其中：</p><ul><li><code>spring-boot-starter-parent</code>：为 SpringBoot 应用程序提供了一组默认配置[插件、Java版本等常用属性]和依赖项，简化了构建过程；</li><li><code>spring-boot-starter-web</code>：封装了一组常见的依赖项和配置，内嵌了Servlet容器，用于快速启动和配置一个基本的 Web 应用程序；</li><li><code>spring-boot-starter-test</code>：封装了一组常见的测试相关依赖项和配置，以便你可以方便地编写单元测试和集成测试；</li></ul></li></ul><h2 id="三、入门案例"><a href="#三、入门案例" class="headerlink" title="三、入门案例"></a>三、入门案例</h2><ul><li><p>以SpringMVC程序的开发为例；</p><ul><li><p>原生的SpringMVC程序开发至少需要：</p><ul><li>1.导入spring-webmvc、servlet相关的坐标；</li><li>2.编写SpringMVC、Servlet容器初始化配置类；</li><li>3.编写表现层（controller）的控制类；</li></ul></li><li><p>使用SpringBoot框架进行开发：</p><ul><li><p>1.新建工程</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SpringBoot-%E6%96%B0%E5%BB%BA%E5%B7%A5%E7%A8%8B_1.png" alt="SpringBoot-新建工程_1"></p></li><li><p>2.点击next后，添加Spring web依赖；【此处若是JDK版本是8，建议使用低版本的SpringBoot，我一开始选择了高版本的，在build工程时报错了！】</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SpringBoot-%E6%96%B0%E5%BB%BA%E5%B7%A5%E7%A8%8B_2.png" alt="SpringBoot-新建工程_2"></p></li><li><p>3.编写表现层（controller）的控制类；</p><ul><li>注意：SpringBoot程序的启动类<code>Springboot01QuickstartApplication</code>需要与<code>controller</code>包在同一层；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SpringBoot-%E8%A1%A8%E7%8E%B0%E5%B1%82%E6%8E%A7%E5%88%B6%E7%B1%BB.png" alt="SpringBoot-表现层控制类"></p></li><li><p>4.运行启动类<code>Springboot01QuickstartApplication</code>即可；</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SpringBoot-%E5%90%AF%E5%8A%A8%E5%B9%B6%E6%B5%8B%E8%AF%95%E8%A1%A8%E7%8E%B0%E5%B1%82%E6%8E%A5%E5%8F%A3.png" alt="SpringBoot-启动并测试表现层接口"></p></li></ul></li></ul></li><li><p>注意点：</p><ul><li><p>1.由于SpringBoot中继承的依赖以及导入的相关坐标都需要从网络上下载，因此基于IDEA的SpringBoot程序都需要确保能够联网；</p></li><li><p>2.上述前三个步骤也可以在SpringBoot官网[[Spring Boot](<a href="https://start.spring.io/">Spring Initializr</a>)]完成：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SpringBoot-%E4%BB%8E%E5%AE%98%E7%BD%91%E6%96%B0%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE.png" alt="SpringBoot-从官网新建SpringBoot项目"></p></li></ul></li></ul><h2 id="三、SpringBoot程序快速启动"><a href="#三、SpringBoot程序快速启动" class="headerlink" title="三、SpringBoot程序快速启动"></a>三、SpringBoot程序快速启动</h2><ul><li><p>根据上述入门案例，我们可以知道：SpringBoot程序不需要额外配置Tomcat服务器就可以直接启动。</p></li><li><p>因此，我们只需要将SpringBoot程序打包成jar包，前端开发人员就可以快速的启动后端服务，从而进行接口的测试和联调；</p></li><li><p>快速启动步骤：</p><ul><li><p>步骤1：打包项目，执行maven生命周期中的<code>package</code>打包命令即可</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SpringBoot-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8package%E6%89%93%E5%8C%85.png" alt="SpringBoot-快速启动package打包"></p></li><li><p>步骤2：运行打包后生成的jar包即可启动服务</p><ul><li>此处打包出来的SpringBoot工程jar包之所以能够直接执行，是因为在工程的<code>pom.xml</code>文件中引入了插件<code>spring-boot-maven-plugin</code>，该插件将SpringBoot工程运行所需要的jar包也进行了打包，并且进行了一些SpringBoot工程运行相关的配置；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SpringBoot-%E6%89%A7%E8%A1%8C%E6%89%93%E5%8C%85%E5%90%8E%E7%9A%84jar.png" alt="SpringBoot-执行打包后的jar"></p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC-简介</title>
    <link href="/2023/09/16/SpringMVC-%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/09/16/SpringMVC-%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC-简介"><a href="#SpringMVC-简介" class="headerlink" title="SpringMVC-简介"></a>SpringMVC-简介</h1><h2 id="一、SpringMVC概述"><a href="#一、SpringMVC概述" class="headerlink" title="一、SpringMVC概述"></a>一、SpringMVC概述</h2><ul><li>一种基于Java实现的MVC模型的轻量级Web框架；</li><li>SpringMVC技术与Servlet技术功能等同，都属于web层开发技术；</li><li>接下来对比两种技术的实现差异；</li><li>两种方式实现同一个简单的案例：浏览器向服务器发送CRUD请求，后服务器根据请求进行响应；</li></ul><h3 id="1-1-Servlet技术实现"><a href="#1-1-Servlet技术实现" class="headerlink" title="1.1 Servlet技术实现"></a>1.1 Servlet技术实现</h3><ul><li><p>1.导入servlet所需坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2.分别编写CRUD四个servlet类，下面以delete为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/8/30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/user/delete&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDeleteServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.接收浏览器的请求参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;servlet delete name ===&gt; &quot;</span> + name);<br><br>        <span class="hljs-comment">//2.封装响应信息</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        writer.write(<span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;servlet delete&#x27;&#125;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>3.配置Tomcat服务器</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-1.png" alt="SpringMVC-1"></p></li><li><p>4.浏览器访问服务器，服务器返回数据</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/Spring-2.png" alt="SpringMVC-2"></p></li><li><p>总结，可以发现，servlet技术实现上述案例，每一个业务都需要新建一个servlet类，以及两个方法doGet,doPost来完成；</p></li><li><p>注意：新建项目时，选择普通的项目，新建完成后，<code>add framework support</code>选择<code>web application</code>；</p></li></ul><h3 id="1-2-SpringMVC技术实现"><a href="#1-2-SpringMVC技术实现" class="headerlink" title="1.2 SpringMVC技术实现"></a>1.2 SpringMVC技术实现</h3><ul><li><p>1.导入SpringMVC、servlet所需坐标以及maven运行tomcat插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Servlet--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--SpringMVC--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--maven运行tomcat插件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2.创建SpringMVC控制器类【等同于Servlet类的功能】</p><ul><li>CRUD四个业务均写在一个控制类中，每个业务通过一个方法进行实现；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/8/30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/save&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;springmvc save name ===&gt; &quot;</span> + name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc save&#x27;&#125;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/delete&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">delete</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;springmvc delete name ===&gt; &quot;</span> + name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc delete&#x27;&#125;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/select&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">select</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;springmvc select name ===&gt; &quot;</span> + name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc select&#x27;&#125;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/update&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;springmvc update name ===&gt; &quot;</span> + name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc update&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>3.上述控制类需要SpringMVC配置，因此配置SpringMVC，设定SpringMVC加载对应路径下的bean；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/8/30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.sea.springmvc&quot;)</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMVCConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>4.上述步骤仅仅配置好了SpringMVC环境，还需要初始化Servlet容器来加载SpringMVC环境，并设置SpringMVC技术处理的请求；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/8/31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletContaionerInitConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractDispatcherServletInitializer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createServletApplicationContext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//告诉Tomcat容器，加载SpringMVC配置</span><br>        <span class="hljs-type">AnnotationConfigWebApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigWebApplicationContext</span>();<br>        ctx.register(SpringMVCConfig.class);<br>        <span class="hljs-keyword">return</span> ctx;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-comment">//告诉Tomcat，哪些请求交给SpringMVC处理，下面配置的&quot;/&quot;是指所有请求</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createRootApplicationContext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//加载Spring环境配置</span><br>        <span class="hljs-type">AnnotationConfigWebApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigWebApplicationContext</span>();<br>        ctx.register(SpringConfig.class);<br>        <span class="hljs-keyword">return</span> ctx;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>5.配置maven服务器</p><ul><li><p>这里卡了两天，mark一下：</p><ul><li><p>尝试过程1：没有导入maven运行tomcat的插件，直接配置了一个本地tomcat服务器，跑起来后，显示的是index.jsp，后面地址栏输入<code>/save</code>访问控制类中的save方法，报错404；</p></li><li><p>尝试过程二：根据视频教程，导入了maven运行tomcat的插件，由于在配置maven运行环境时，需要填写Run命令<code>tomcat7:run</code>，没有找到该命令；【此时我的项目仍然只是一个maven项目，项目工程目录下是web而不是webapp！】</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-3.png" alt="SpringMVC-3"></p></li><li><p>尝试过程三：新建module，选择如下，需要选择<code>maven-archetype-webapp</code>；</p><ul><li>此处和Servlet项目不是一样的！！</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-4.png" alt="SpringMVC-4"></p></li></ul></li><li><p>新建maven服务器后，在maven标签栏里双击<code>tomcat7:run</code>运行即可；</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-5.png" alt="SpringMVC-5"></p></li></ul></li><li><p>6.浏览器发送请求，访问控制类中的save方法；</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-6.png" alt="SpringMVC-6"></p></li></ul><h2 id="二、SpringMVC工作流程"><a href="#二、SpringMVC工作流程" class="headerlink" title="二、SpringMVC工作流程"></a>二、SpringMVC工作流程</h2><h3 id="2-1-启动服务器初始化过程："><a href="#2-1-启动服务器初始化过程：" class="headerlink" title="2.1 启动服务器初始化过程："></a>2.1 启动服务器初始化过程：</h3><ul><li>1.服务器启动，执行<code>ServletContaionersInitConfig</code>类，<strong>初始化web容器</strong>；</li><li>2.执行<code>createServletApplicationContext</code>方法，<strong>创建了<code>WebApplicationContext</code>对象</strong>；</li><li>3.加载<code>SpringMVCConfig</code>配置类，可以<strong>扫描相应路径下的bean</strong>；</li><li>4.<strong>加载<code>UserController</code>控制类</strong>，每一个<code>RequestMapping</code>的名称对应一个具体的方法；</li><li>5.执行<code>getServletMappings</code>方法，定义那些web请求交给<code>SpringMVC</code>处理;</li></ul><p>​<img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-7.png" alt="SpringMVC-7"></p><h3 id="2-2-一次web请求过程"><a href="#2-2-一次web请求过程" class="headerlink" title="2.2 一次web请求过程"></a>2.2 一次web请求过程</h3><ul><li>1.浏览器发送请求<code>localhost/save?name=kkk;</code></li><li>2.web容器发现该请求应该交给<code>SpringMVC</code>处理;</li><li>3.解析请求路径，由<code>/save</code>匹配到执行对应的方法<code>save()</code>，<code>name=kkk</code>为<code>save()</code>方法的形参name；</li><li>4.执行<code>save()</code>方法；</li><li>5.检测到有<code>@ResponseBody</code>，因此直接将<code>save()</code>方法的返回值作为响应体返回给请求方（浏览器）；</li></ul><h2 id="三、bean的加载控制"><a href="#三、bean的加载控制" class="headerlink" title="三、bean的加载控制"></a>三、bean的加载控制</h2><h3 id="3-1-问题"><a href="#3-1-问题" class="headerlink" title="3.1 问题"></a>3.1 问题</h3><ul><li>上面提到，需要配置SpringMVC来加载控制类XxxController的bean【即表现层的bean】；</li><li>而Spring负责加载的是service层【业务层】和dao层【数据层】的bean；</li><li>产生的<strong>问题</strong>是：配置Spring扫描路径时【例如<code>com.sea</code>】，该路径下一般包含了表现层、业务层以及数据层的bean，需要排除SpringMVC以及加载的bean；</li></ul><h3 id="3-2-解决方法"><a href="#3-2-解决方法" class="headerlink" title="3.2 解决方法"></a>3.2 解决方法</h3><ul><li><p>方法一：【指定具体路径】</p><ul><li>在配置Spring扫描路径时，精准到每一层即可；</li></ul></li><li><p>方法二：【排除表现层的bean】</p><ul><li><p>方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(value = &quot;com.sea&quot;,</span><br><span class="hljs-meta">        excludeFilters = @ComponentScan.Filter(</span><br><span class="hljs-meta">                type = FilterType.ANNOTATION,</span><br><span class="hljs-meta">                classes = Controller.class</span><br><span class="hljs-meta">        ) </span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>方法三：【不区分Spring和SpringMVC环境】</p></li></ul><h2 id="四、PostMan工具介绍"><a href="#四、PostMan工具介绍" class="headerlink" title="四、PostMan工具介绍"></a>四、PostMan工具介绍</h2><ul><li><p>简介：PostMan是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件；</p></li><li><p>作用：常用于接口测试；</p></li><li><p>如下图：</p></li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/image-20230901182146209.png" alt="PostMan-1"></p>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC-请求和响应</title>
    <link href="/2023/09/16/SpringMVC-%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/"/>
    <url>/2023/09/16/SpringMVC-%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC-请求和响应"><a href="#SpringMVC-请求和响应" class="headerlink" title="SpringMVC-请求和响应"></a>SpringMVC-请求和响应</h1><h2 id="一、请求映射路径"><a href="#一、请求映射路径" class="headerlink" title="一、请求映射路径"></a>一、请求映射路径</h2><ul><li><p>一般使用注解来设置请求映射路径：</p><ul><li><p>注解名称：<code>@RequestMapping</code></p></li><li><p>类型：方法注解&#x2F;类注解</p></li><li><p>位置：SpringMVC控制器类&#x2F;方法定义的上方</p></li><li><p>作用：设置当前控制器方法请求访问路径，如果设置在类上，表示统一设置当前控制器方法请求访问路径前缀；</p></li><li><p>属性：<code>value</code>，请求访问路径（或前缀）</p></li><li><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/save&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;springmvc book save name ===&gt; &quot;</span> + name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc book save&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>关于注解<code>@ResponseBody</code>：</p><ul><li>作用：将方法的返回值，以特定的格式写入到response的body区域，进而将数据返回给客户端。<ul><li>当方法上面没有写<code>@ResponseBody</code>,底层会将方法的返回值封装为<code>ModelAndView</code>对象。</li><li>如果返回值是字符串，那么直接将字符串写到客户端；</li><li>如果是一个对象，会将对象转化为<code>json</code>串，然后写到客户端。</li></ul></li></ul></li></ul></li></ul><h2 id="二、请求参数"><a href="#二、请求参数" class="headerlink" title="二、请求参数"></a>二、请求参数</h2><h3 id="2-1-请求方式"><a href="#2-1-请求方式" class="headerlink" title="2.1 请求方式"></a>2.1 请求方式</h3><ul><li><p>一般分为两种：<code>GET</code>请求 和 <code>POST</code>请求；以下面的控制类为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/commonParam&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">commonParam</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;common param: name=&quot;</span> + name + <span class="hljs-string">&quot; age=&quot;</span> + age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;common param&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>GET</code>请求：</p><ul><li><p>直接在浏览器地址栏中使用<code>?</code>和<code>&amp;</code>传递参数，如下：</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-request-param-get.png" alt="SpringMVC-request-param-get"></p></li></ul></li><li><p><code>POST</code>请求：</p><ul><li><p>使用<code>PostMan</code>工具，以表单形式提交<code>POST</code>请求：</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-request-param-post.png" alt="SpringMVC-request-param-post"></p></li><li><p>此处中文乱码，需要在Servlet容器的初始化配置类中进行处理：【仅处理POST请求中文乱码】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletContainersInitConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractDispatcherServletInitializer</span> &#123;<br>    ......<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 中文乱码处理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>        <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">characterEncodingFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>();<br>        characterEncodingFilter.setEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;characterEncodingFilter&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-2-请求参数"><a href="#2-2-请求参数" class="headerlink" title="2.2 请求参数"></a>2.2 请求参数</h3><ul><li><p>一般分为以下五种：</p><ul><li>普通参数</li><li>POJO类型参数</li><li>嵌套POJO类型参数</li><li>数组类型参数</li><li>集合类型参数</li></ul></li><li><p><strong>普通参数</strong>：url地址传参，<strong>地址参数名与形参变量名相同【不同的话无法传递】</strong>，定义形参即可接收参数；</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-request-get-2.png" alt="SpringMVC-request-get-2"></p><ul><li><p>地址参数名与形参变量名不相同时，可以使用注解<code>@RequestParam</code>来绑定参数，该注解有两个参数：</p><ul><li><code>required</code>:设定该参数是否为必传参数；</li><li><code>defaultValue</code>:设定参数默认值；</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/image-20230905103738021.png" alt="SpringMVC-request-get-3"></p></li></ul></li><li><p><strong>POJO类型参数</strong>:即控制类中的方法形参是对象引用类型而不是普通类型，要求url传递的变量名与对象属性名一致：</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-request-pojo-1.png" alt="SpringMVC-request-pojo-1"></p></li><li><p><strong>嵌套POJO类型参数</strong>：形参对象中引用了其他对象：</p><ul><li>例如：</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-request-pojo-3.png" alt="SpringMVC-request-pojo-3"></p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-request-pojo-2.png" alt="SpringMVC-request-pojo-2"></p></li><li><p><strong>数组类型参数</strong>：使用形参数组名称传递：</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-request-array-1.png" alt="SpringMVC-request-array-1"></p></li><li><p><strong>集合类型参数</strong>：使用形参集合名称传递，此处需要将url传递的值作为集合的元素，添加注解<code>@RequestMapping</code>实现：</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-request-list-1.png" alt="SpringMVC-request-list-1"></p></li></ul><h2 id="三、日期类型参数传递"><a href="#三、日期类型参数传递" class="headerlink" title="三、日期类型参数传递"></a>三、日期类型参数传递</h2><ul><li><p>需要解决的问题：传递的日期类型数据在不同系统中的格式不一致，例如：</p><ul><li>2023-09-05</li><li>2023&#x2F;09&#x2F;05</li><li>09&#x2F;05&#x2F;2023</li><li>2023-09-05 17:44:30</li></ul></li><li><p>接收形参时，根据不同的日期格式使用注解<code>@DataTimeFormat</code>设置不同的接收方式；</p><ul><li>此处<code>MM</code>和<code>HH</code>大写的原因为：<code>mm</code>表示分钟，<code>MM</code>表示月份，<code>hh</code>表示12小时制的小时，<code>HH</code>表示24小时制的小时；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//日期参数</span><br><span class="hljs-meta">@RequestMapping(&quot;/dateParam&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">dateParamForJson</span><span class="hljs-params">(Date date1,</span><br><span class="hljs-params">                               <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> Date date2,</span><br><span class="hljs-params">                               <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy/MM/dd HH:mm:ss&quot;)</span> Date date3)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;date param: &quot;</span> + date1);<br>    System.out.println(<span class="hljs-string">&quot;date param: &quot;</span> + date2);<br>    System.out.println(<span class="hljs-string">&quot;date param: &quot;</span> + date3);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;list paramForJson&#x27;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-request-date-1.png" alt="SpringMVC-request-date-1"></p></li></ul><h2 id="四、JSON数据传递"><a href="#四、JSON数据传递" class="headerlink" title="四、JSON数据传递"></a>四、JSON数据传递</h2><ul><li><p>前置工作：</p><ul><li>导入用于json数据进行类型转换的坐标：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 用于json数据进行类型转换 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.13.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>开启json数据转换为对象的功能 &#x3D;&#x3D;&gt; 配置类<code>SpringMVCConfig.java</code>中增加注解<code>@EnableWebMvc</code></li></ul></li><li><p>三种类型的json数据：</p><ul><li>json数组[普通类型]</li><li>json对象[POJO类型]</li><li>json数组[POJO类型]</li></ul></li><li><p>**json数组[普通类型]**：使用注解<code>@RequestBody</code>绑定请求体中的数据</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-request-arrayForJson.png" alt="SpringMVC-request-arrayForJson"></p></li><li><p>**json对象[POJO类型]**：使用注解<code>@RequestBody</code>绑定请求体中的数据</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-request-pojoForJson.png" alt="SpringMVC-request-pojoForJson"></p></li><li><p>**json数组[POJO类型]**：</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-request-listPojoForJson.png" alt="SpringMVC-request-listPojoForJson"></p></li></ul><h2 id="五、响应"><a href="#五、响应" class="headerlink" title="五、响应"></a>五、响应</h2><ul><li><p>分为两类：</p><ul><li>响应页面</li><li>响应数据</li></ul></li><li><p>案例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//响应页面/跳转页面</span><br><span class="hljs-meta">@RequestMapping(&quot;/toJumpPage&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toJumpPage</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;页面跳转&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/page.jsp&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//响应文本数据</span><br><span class="hljs-meta">@RequestMapping(&quot;/toText&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toText</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;返回纯文本数据&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;response text&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//响应POJO对象</span><br><span class="hljs-meta">@RequestMapping(&quot;/toJsonPOJO&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">toJsonPOJO</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;返回Json对象数据&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setName(<span class="hljs-string">&quot;aaa&quot;</span>);<br>    user.setAge(<span class="hljs-number">18</span>);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>默认返回的是<code>ModelAndView</code>类型[即页面]，通过<code>@ResponseBody</code>注解将返回值作为响应体，响应体自动转换为其他类型，如JSON，文本等数据；</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC-拦截器</title>
    <link href="/2023/09/16/SpringMVC-%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <url>/2023/09/16/SpringMVC-%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC-拦截器"><a href="#SpringMVC-拦截器" class="headerlink" title="SpringMVC-拦截器"></a>SpringMVC-拦截器</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><ul><li><p>拦截器（<code>Interceptor</code>）简介：</p><ul><li>一种动态拦截方法调用的机制；</li><li>在<code>SpringMVC</code>中动态拦截控制器方法的执行；</li></ul></li><li><p>拦截器的作用：</p><ul><li>在指定的方法调用前后执行预先设定的代码；【这一点和Spring AOP中的通知很相似，至少思想是一致的】</li><li>阻止原始方法的执行</li></ul></li><li><p>与<strong>过滤器（<code>Filter</code>）</strong>进行区别：</p><ul><li>归属不同：过滤器<code>Fliter</code>属于Servlet技术，拦截器<code>Interceptor</code>属于SpringMVC技术；</li><li>拦截内容不同：过滤器<code>Fliter</code>对所有访问进行拦截并增强，拦截器<code>Interceptor</code>仅对SpringMVC的访问进行拦截并增强；</li><li>执行顺序不同：过滤器<code>Fliter</code>在访问请求<strong>到达Servlet之前</strong>进行拦截，拦截器<code>Interceptor</code>在访问<strong>表现层的控制类之前或之后</strong>进行拦截；</li></ul></li></ul><h2 id="二、拦截器用法"><a href="#二、拦截器用法" class="headerlink" title="二、拦截器用法"></a>二、拦截器用法</h2><ul><li><p>第一步：声明拦截器类的<code>bean</code>【在第三步可以进行自动装配该<code>bean</code>】,并实现<code>HandlerInterceptor</code>接口；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;preHandle...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//返回false的话，后面两个方法以及原始方法均不会执行；</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;postHandle...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterCompletion...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>第二步：定义配置类，继承<code>WebMvcConfigurationSupport</code>接口，实现其中的<code>addInterceptors</code>方法；</p></li><li><p>第三步：添加第一步定义的拦截器类并设定拦截的请求访问路径。路径可以通过可变参数设置多个；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMVCSupport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    ProjectInterceptor projectInterceptor;<span class="hljs-comment">//进行自动装配</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<span class="hljs-comment">//这个函数是为了访问/pages/目录下的静态资源而重写父类的方法</span><br>        registry.addResourceHandler(<span class="hljs-string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/pages/&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="hljs-string">&quot;/users&quot;</span>, <span class="hljs-string">&quot;/books/**&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>此处的两个重写父类的方法也可以写在SpringMVC的配置类中，但会造成拦截器依赖SpringMVC框架；</li></ul></li><li><p>拦截器执行流程：</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-%E6%8B%A6%E6%88%AA%E5%99%A8_1.png" alt="SpringMVC-拦截器_1"></p></li></ul><h2 id="三、拦截器参数"><a href="#三、拦截器参数" class="headerlink" title="三、拦截器参数"></a>三、拦截器参数</h2><ul><li><p>在上述拦截器<code>bean</code>的定义中可以看到，拦截器参数主要有以下几种：</p><ul><li><p><strong>（1）http请求对象</strong>：<code>HttpServletRequest request</code>;</p><ul><li>通过该对象可以访问http请求对象中的信息，例如请求的方法、头部信息、URI、查询参数、请求体等等；</li></ul></li><li><p><strong>（2）http响应对象</strong>：<code>HttpServletResponse response</code>;</p><ul><li>通过该对象可以设置和修改响应对象的信息，例如状态码、头部信息、内容等等；</li></ul></li><li><p><strong>（3）SpringMVC执行的原始方法的封装对象</strong>：<code>Object handler</code>；</p><ul><li>当前请求匹配到的控制器对象，负责处理请求并生成响应；</li></ul></li><li><p><strong>（4）要被渲染的视图对象和模型数据</strong>：<code>ModeAndView modelAndView</code>；</p><ul><li>通过<code>modelAndView.getView()</code>方法可以获取当前的视图对象，您可以对其进行操作，例如修改视图的名称或属性。</li><li>通过<code>modelAndView.getModel()</code>方法可以获取模型数据的Map对象。您可以添加、修改或删除模型数据，这些数据将在视图渲染时传递给视图。</li></ul></li><li><p><strong>（5）异常对象</strong>：<code>Exception ex</code>;</p><ul><li>在请求处理过程中产生的异常对象（如果有）。如果没有异常发生，该参数的值将为<code>null</code>。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-comment">//在请求处理之前进行一些预处理</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;preHandle...&quot;</span>);<br><br>        <span class="hljs-comment">//通过request获取请求参数：例如请求头里面的Content-Typ字段值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Content-Type: &quot;</span> + contentType);<br><br>        <span class="hljs-comment">//通过handler获取执行的方法对象HandlerMethod，该对象对原始调用的方法进行了封装</span><br>        System.out.println(handler);<br>        System.out.println(handler.getClass());<br>        <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">hm</span> <span class="hljs-operator">=</span> (HandlerMethod) handler;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> hm.getMethod();<br><br>        <span class="hljs-comment">//反射机制执行该方法【这里以BookController.save()方法为例】</span><br>        Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;com.sea.springmvc.BookController&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aClass.newInstance();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (String) method.invoke(o, <span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;-------------------------- &quot;</span> + s);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//返回false的话，后面两个方法以及原始方法均不会执行；</span><br>    &#125;<br><br>    <span class="hljs-comment">//用于请求处理完成之后，但在视图渲染之前进行一些后处理操作</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//获取视图和模型数据</span><br>        <span class="hljs-keyword">if</span>(modelAndView != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">View</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> modelAndView.getView();<br>            System.out.println(view);<br>            System.out.println(view!=<span class="hljs-literal">null</span> ? view.getClass() : <span class="hljs-string">&quot;null&quot;</span>);<br><br>            Map&lt;String, Object&gt; model = modelAndView.getModel();<br>            Set&lt;Map.Entry&lt;String, Object&gt;&gt; entries = model.entrySet();<br>            <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; stringObjectEntry : entries) &#123;<br>                System.out.println(stringObjectEntry.getKey() + <span class="hljs-string">&quot; === &quot;</span> + stringObjectEntry.getValue());<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;postHandle...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//在请求处理结束后被调用，进行一些清理和处理操作，无需返回任何结果</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterCompletion...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="四、拦截器工作流程分析"><a href="#四、拦截器工作流程分析" class="headerlink" title="四、拦截器工作流程分析"></a>四、拦截器工作流程分析</h2><ul><li><p>有多个拦截器时，遵循以下规则：</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-%E6%8B%A6%E6%88%AA%E5%99%A8_2.png" alt="SpringMVC-拦截器_2"></p></li><li><p>一般开发中，使用一个拦截器较多；</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Spring Framework系统架构分析</title>
    <link href="/2023/09/16/Spring-%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    <url>/2023/09/16/Spring-%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Spring-Framework系统架构分析"><a href="#Spring-Spring-Framework系统架构分析" class="headerlink" title="Spring-Spring Framework系统架构分析"></a>Spring-Spring Framework系统架构分析</h1><h2 id="一、Spring-Framework系统架构"><a href="#一、Spring-Framework系统架构" class="headerlink" title="一、Spring Framework系统架构"></a>一、Spring Framework系统架构</h2><ul><li><p>Spring Framework是Spring生态圈中最基础的项目，是其他项目的根基。</p></li><li><p>Spring的架构版本目前稳定在Spring 4.X；</p></li><li><p>如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring-%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90.png" alt="Spring-系统架构分析"></p><ul><li>学习顺序：Core Container &#x3D;&gt; DA &#x3D;&gt; Aspect  &#x3D;&gt; AOP &#x3D;&gt; Transactions</li></ul></li></ul><h2 id="二、Spring-Framework学习路线"><a href="#二、Spring-Framework学习路线" class="headerlink" title="二、Spring Framework学习路线"></a>二、Spring Framework学习路线</h2><h3 id="2-1-第一部分：核心容器"><a href="#2-1-第一部分：核心容器" class="headerlink" title="2.1 第一部分：核心容器"></a>2.1 第一部分：核心容器</h3><ul><li>核心概念<ul><li>IoC&#x2F;DI</li></ul></li><li>容器基本操作</li></ul><h3 id="2-2-第二部分：整合"><a href="#2-2-第二部分：整合" class="headerlink" title="2.2 第二部分：整合"></a>2.2 第二部分：整合</h3><ul><li>整合数据层技术MyBatis</li></ul><h3 id="2-3-第三部分：AOP"><a href="#2-3-第三部分：AOP" class="headerlink" title="2.3 第三部分：AOP"></a>2.3 第三部分：AOP</h3><ul><li>核心概念</li><li>AOP基础操作</li><li>AOP实用开发</li></ul><h3 id="2-4-第四部分：事务"><a href="#2-4-第四部分：事务" class="headerlink" title="2.4 第四部分：事务"></a>2.4 第四部分：事务</h3><ul><li>事务实用开发</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-注解开发</title>
    <link href="/2023/09/16/Spring-%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
    <url>/2023/09/16/Spring-%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-注解开发"><a href="#Spring-注解开发" class="headerlink" title="Spring-注解开发"></a>Spring-注解开发</h1><h2 id="一、注解开发"><a href="#一、注解开发" class="headerlink" title="一、注解开发"></a>一、注解开发</h2><h3 id="1-1-注解开发定义bean"><a href="#1-1-注解开发定义bean" class="headerlink" title="1.1 注解开发定义bean"></a>1.1 注解开发定义bean</h3><ul><li><p>1.使用<code>@Component</code>定义bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/03 14:20</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//使用@Component定义bean</span><br><span class="hljs-meta">@Component(&quot;bookDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;bookDao saving ... &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>2.在配置文件中配置组件扫描加载bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">            &quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  2.配置组件扫描加载bean  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.sea.*&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>补充：Spring提供<code>@Component</code>注解的三个衍生注解：</p><ul><li><code>@Service</code>：用于业务层bean定义；</li><li><code>@Controller</code>：用于表现层bean定义；</li><li><code>@Repository</code>：用于数据层bean定义；</li></ul></li><li><p>【三个衍生注解功能与@Component相同，仅方便区分！！】</p></li></ul><h3 id="1-2-纯注解开发"><a href="#1-2-纯注解开发" class="headerlink" title="1.2 纯注解开发"></a>1.2 纯注解开发</h3><ul><li><p>Spring3.0升级了纯注解开发模式，使用Java类代替配置文件。</p></li><li><p>实现：</p><ul><li><p>1.新建配置类代替配置文件：添加<code>@Configuration</code>注解修饰；<code>@ComponentScan</code>配置组件扫描路径；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/4 14:49</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.sea.dao&quot;, &quot;com.sea.service&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>2.使用新的接口实现类获取Spring容器；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//AnnotationConfigApplicationContext接口实现类获取Spring容器，传入的参数为 配置类.class</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br><span class="hljs-type">BookService</span> <span class="hljs-variable">bookService</span> <span class="hljs-operator">=</span> (BookService) ctx.getBean(<span class="hljs-string">&quot;bookService&quot;</span>);<br>bookService.save();<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="二、依赖注入-自动装配"><a href="#二、依赖注入-自动装配" class="headerlink" title="二、依赖注入-自动装配"></a>二、依赖注入-自动装配</h2><h3 id="2-1-自动装配-引用类型"><a href="#2-1-自动装配-引用类型" class="headerlink" title="2.1 自动装配-引用类型"></a>2.1 自动装配-引用类型</h3><ul><li><p>即使用<code>@Autowired</code>注解进行自动装配；【一般是按bean的类型装配，也可以按bean名称装配】</p></li><li><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/4 15:58</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service(&quot;bookService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;bookDao2&quot;)</span><span class="hljs-comment">//相同类型的bean有多个，可以指定注入bean的名称</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookService saving ... &quot;</span>);<br>        bookDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>1.自动装配基于<strong>反射机制</strong>，能够创建对象并访问私有属性，因此可以不写set方法；</li><li>2.需要提供默认无参构造函数，否则无法创建bean对象；</li><li>3.相同类型的bean有多个时，可以使用<code>@Qualifier</code>指定注入bean的名称；【此处必须配合<code>@Autowired</code>注解使用！】</li></ul></li></ul><h3 id="2-2-自动装配-简单类型"><a href="#2-2-自动装配-简单类型" class="headerlink" title="2.2 自动装配-简单类型"></a>2.2 自动装配-简单类型</h3><ul><li><p>可以通过<code>@Value</code>注解直接给简单类型装配值:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;abcdefg&quot;)</span><br>String name;<br></code></pre></td></tr></table></figure></li><li><p>也可以通过加载properties文件来装配：</p><ul><li><code>jdbc.properties</code>文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">name</span>=<span class="hljs-string">sea</span><br><span class="hljs-attr">age</span>=<span class="hljs-string">18</span><br></code></pre></td></tr></table></figure><ul><li>SpringConfig类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.sea.*&quot;&#125;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><br><span class="hljs-comment">//此处若有多个properties文件，使用数组形式，不能使用通配符 *</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>BookDaompl类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span><br>    String name;<br>    <span class="hljs-meta">@Value(&quot;$&#123;age&#125;&quot;)</span><br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDao saving ... [&quot;</span> + name + <span class="hljs-string">&quot;, &quot;</span>+ age + <span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3-第三方bean管理"><a href="#2-3-第三方bean管理" class="headerlink" title="2.3 第三方bean管理"></a>2.3 第三方bean管理</h3><ul><li><p>例如，需要配置Druid数据库连接池。【前置工作：导入Druid坐标，刷新Maven】</p></li><li><p><strong>方式一：</strong>直接在Spring配置类中增加一个方法，用于配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/4 16:45</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.sea.*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><span class="hljs-comment">//1.定义一个方法获取要管理的bean对象</span><br>    <span class="hljs-comment">//2.给该方法的返回值添加@Bean，定义成Bean对象</span><br>    <span class="hljs-meta">@Bean(&quot;dataSource_druid&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        druidDataSource.setUrl(<span class="hljs-string">&quot;dbc:mysql://localhost:3306/springdb&quot;</span>);<br>        druidDataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        druidDataSource.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>方式二：</strong>增加一个配置类<code>JdbcConfig</code>进行数据库连接池配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/4 16:57</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-comment">//1.定义一个方法获取要管理的bean对象</span><br>    <span class="hljs-comment">//2.给该方法的返回值添加@Bean，定义成Bean对象</span><br>    <span class="hljs-meta">@Bean(&quot;dataSource_druid&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        druidDataSource.setUrl(<span class="hljs-string">&quot;dbc:mysql://localhost:3306/springdb&quot;</span>);<br>        druidDataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        druidDataSource.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/4 16:45</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.sea.*&quot;)</span><br><span class="hljs-meta">@Import(&#123;JdbcConfig.class&#125;)</span><span class="hljs-comment">//使用@Import注解将配置类引入即可</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>向第三方bean注入简单类型和引用类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/4 16:57</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@PropertySource(&quot;classpath:mysql.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Value(&quot;$&#123;url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">//1.定义一个方法获取要管理的bean对象</span><br>    <span class="hljs-comment">//2.给该方法的返回值添加@Bean，定义成Bean对象</span><br>    <span class="hljs-comment">//3.注入引用类型【通过方法参数形式自动装配（按类型装配）】</span><br>    <span class="hljs-meta">@Bean(&quot;dataSource_druid&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">(BookDao bookDao)</span>&#123;<br>        System.out.println(bookDao); <br><br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setDriverClassName(driver);<br>        druidDataSource.setUrl(url);<br>        druidDataSource.setUsername(username);<br>        druidDataSource.setPassword(password);<br><br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/4 16:45</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.sea.*&quot;)</span><span class="hljs-comment">//配置了组件扫描后，Spring容器初始化时就会创建扫描到的bean</span><br><span class="hljs-meta">@Import(&#123;JdbcConfig.class&#125;)</span><span class="hljs-comment">//使用@Import注解将配置类引入即可</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="三、注解开发和xml配置对比"><a href="#三、注解开发和xml配置对比" class="headerlink" title="三、注解开发和xml配置对比"></a>三、注解开发和xml配置对比</h2><ul><li><p>看图：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring-%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91%E5%92%8Cxml%E9%85%8D%E7%BD%AE%E5%AF%B9%E6%AF%94_1png" alt="Spring-注解开发和xml配置对比_1"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>注解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC-REST风格</title>
    <link href="/2023/09/16/SpringMVC-REST%E9%A3%8E%E6%A0%BC/"/>
    <url>/2023/09/16/SpringMVC-REST%E9%A3%8E%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC-REST风格"><a href="#SpringMVC-REST风格" class="headerlink" title="SpringMVC-REST风格"></a>SpringMVC-REST风格</h1><h2 id="一、REST简介"><a href="#一、REST简介" class="headerlink" title="一、REST简介"></a>一、REST简介</h2><ul><li><p>全称：<code>Representational State Transfer</code>，表现形式状态转换；</p></li><li><p>以下对比两种风格的写法：</p><ul><li><p>传统风格资源描述形式</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost<span class="hljs-regexp">/user/g</span>etByiId?id=<span class="hljs-number">1</span><br><br>http:<span class="hljs-regexp">//</span>localhost<span class="hljs-regexp">/user/</span>saveUser<br></code></pre></td></tr></table></figure></li><li><p>REST风格描述形式</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost<span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br><br>http:<span class="hljs-regexp">//</span>localhost<span class="hljs-regexp">/user/u</span>ser<br></code></pre></td></tr></table></figure></li></ul></li><li><p>REST风格的优点：</p><ul><li>隐藏资源的访问行为，无法通过地址得知对资源的操作行为；</li><li>简化书写；</li></ul></li><li><p>REST风格简介:</p><ul><li><p>访问资源时使用<strong>行为动作</strong>区分对资源进行了何种操作；</p><ul><li><p>SpringMVC常用几种的行为动作包括：查询<code>GET</code>,新增<code>POST</code>,修改<code>PUT</code>,删除<code>DELETE</code>；</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/REST%E9%A3%8E%E6%A0%BC-1.png" alt="REST风格-1"></p></li><li><p>描述模块的名称通常使用复数，例如<code>users</code>，<code>accounts</code>等；</p></li></ul></li></ul></li><li><p>根据REST风格对资源进行访问称为<strong>RESTful</strong>；</p></li></ul><h2 id="二、RESTful入门案例"><a href="#二、RESTful入门案例" class="headerlink" title="二、RESTful入门案例"></a>二、RESTful入门案例</h2><ul><li><p>以<code>UserController</code>为例：</p><ul><li><p>步骤一：设定http请求行为动作</p><ul><li>例如：<code>POST</code>，<code>GET</code>，<code>DELETE</code>，<code>PUT</code>等等；</li></ul></li><li><p>步骤二：设定请求参数【请求路径变量】</p><ul><li>1.请求路径一般以<strong>当前模块名称复数</strong>为前缀，若需要传递参数，则增加与形参同名的<strong>占位符</strong>；</li><li>2.形参添加注解<code>@PathVariable</code>;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/users&quot;, method = RequestMethod.POST)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">(User user)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;springmvc user save ===&gt; &quot;</span> + user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc user save&#x27;&#125;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;springmvc user delete id ===&gt; &quot;</span> + id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc user delete&#x27;&#125;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">select</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;springmvc user select id ===&gt; &quot;</span> + id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc user select&#x27;&#125;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/users&quot;, method = RequestMethod.PUT)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(User user)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;springmvc user update ===&gt; &quot;</span> + user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc user update&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>上述存在问题：</p><ul><li>每个方法仅请求行为动作不同，需要简化注解<code>@RequestMapping</code>的参数；</li><li>每个方法都放了注解<code>@ResponseBody</code>，需要简化；</li></ul></li></ul><h2 id="三、REST快速开发"><a href="#三、REST快速开发" class="headerlink" title="三、REST快速开发"></a>三、REST快速开发</h2><ul><li><p>1.将方法上的注解<code>@ResponseBody</code>放在控制类上，合并注解<code>@ResponseBody</code>和注解<code>@Controller</code>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Controller</span><br><span class="hljs-comment">//@ResponseBody</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/books&quot;)</span>  <span class="hljs-comment">//设置请求访问路径前缀 -- 模块名称复数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>2.简化方法上的注解<code>@RequestMapping</code>，不同请求动作使用不同的注解：</p><ul><li>常用的几种方法注解：<code>@PostMapping</code>，<code>@DeleteMapping</code>，<code>@PutMapping</code>，<code>@GetMapping</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/books&quot;)</span>  <span class="hljs-comment">//设置请求访问路径前缀 -- 模块名称复数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-comment">//@RequestMapping(value = &quot;/&#123;name&#125;&quot;, method = RequestMethod.POST)</span><br>    <span class="hljs-comment">//@ResponseBody</span><br>    <span class="hljs-meta">@PostMapping(&quot;/&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;springmvc book save name ===&gt; &quot;</span> + name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc book save&#x27;&#125;&quot;</span>;<br>    &#125;<br><br><span class="hljs-comment">//    @RequestMapping(value = &quot;/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span><br><span class="hljs-comment">//    @ResponseBody</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;springmvc book delete id ===&gt; &quot;</span> + id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc book delete&#x27;&#125;&quot;</span>;<br>    &#125;<br><br><span class="hljs-comment">//    @RequestMapping(value = &quot;/&#123;id&#125;&quot;, method = RequestMethod.PUT)</span><br><span class="hljs-comment">//    @ResponseBody</span><br>    <span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;springmvc book update id ===&gt; &quot;</span> + id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc book update&#x27;&#125;&quot;</span>;<br>    &#125;<br><br><span class="hljs-comment">//    @RequestMapping(value = &quot;/&#123;id&#125;&quot;, method = RequestMethod.GET)</span><br><span class="hljs-comment">//    @ResponseBody</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">select</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;springmvc book select id ===&gt; &quot;</span> + id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc book select&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
      <tag>RESTful</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC-SSM框架整合</title>
    <link href="/2023/09/16/SpringMVC-SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/"/>
    <url>/2023/09/16/SpringMVC-SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC-SSM框架整合"><a href="#SpringMVC-SSM框架整合" class="headerlink" title="SpringMVC-SSM框架整合"></a>SpringMVC-SSM框架整合</h1><h2 id="一、SSM整合流程梳理"><a href="#一、SSM整合流程梳理" class="headerlink" title="一、SSM整合流程梳理"></a>一、SSM整合流程梳理</h2><ul><li>创建工程</li><li>SSM整合【配置整合】<ul><li>Spring<ul><li>涉及配置类<code>SpringConfig.java</code>;</li></ul></li><li>SpringMVC<ul><li>涉及配置类<code>SpringMVCConfig.java</code>、<code>ServletContainersInitConfig.java</code>;</li></ul></li><li>Mybatis<ul><li>涉及配置类<code>JdbcConfig.java</code>、<code>MybatisConfig.java</code>、 以及资源文件<code>jdbc.properties</code>;</li></ul></li></ul></li><li>功能模块开发【分层开发】<ul><li>建库建表：表 与 实体类对应；</li><li>数据访问层（dao）：接口和自动代理</li><li>业务层（service）：接口和接口实现类<ul><li>业务层接口测试 &#x3D;&#x3D;&gt; Junit单元测试框架</li></ul></li><li>表现层（controller）：控制类和方法<ul><li>表现层接口测试 &#x3D;&#x3D;&gt; PostMan测试工具</li></ul></li></ul></li></ul><h2 id="二、SSM整合【配置整合】"><a href="#二、SSM整合【配置整合】" class="headerlink" title="二、SSM整合【配置整合】"></a>二、SSM整合【配置整合】</h2><h3 id="2-1-导入相关坐标"><a href="#2-1-导入相关坐标" class="headerlink" title="2.1 导入相关坐标"></a>2.1 导入相关坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--SpringMVC--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--Mybatis--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--Spring整合Mybatis--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- Spring操作数据库需要的坐标 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--Junit单元测试--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--Spring整合Junit--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 用于json数据进行类型转换 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.13.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-maven运行tomcat插件"><a href="#2-2-maven运行tomcat插件" class="headerlink" title="2.2 maven运行tomcat插件"></a>2.2 maven运行tomcat插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-编写Spring配置类"><a href="#2-3-编写Spring配置类" class="headerlink" title="2.3 编写Spring配置类"></a>2.3 编写Spring配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/10 15:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">@ComponentScan(value = &quot;com.sea&quot;, excludeFilters = @ComponentScan.Filter(</span><br><span class="hljs-comment">        type = FilterType.ANNOTATION,</span><br><span class="hljs-comment">        classes = Controller.class</span><br><span class="hljs-comment">))</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@ComponentScan(value = &#123;&quot;com.sea.service&quot;, &quot;com.sea.dao&quot;&#125;)</span><br><span class="hljs-meta">@Import(&#123;JDBCCofig.class, MybatisConfig.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>bean的扫描路径应具体指定，使用过滤方式指定会报以下错误：</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-SSM%E6%95%B4%E5%90%88_2.png" alt="SpringMVC-SSM整合_2"></p></li><li><p><strong>此处注解<code>@Improt</code>引入了两个mybatis的配置类，相当于Spring框架整合了Mybatis框架！</strong></p></li></ul><h3 id="2-4-编写jdbc配置"><a href="#2-4-编写jdbc配置" class="headerlink" title="2.4 编写jdbc配置"></a>2.4 编写jdbc配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># mysql.properties资源文件</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/springdb?useSSL=false&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/10 15:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:mysql.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@Bean(&quot;dataSource_druid&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setDriverClassName(driver);<br>        druidDataSource.setUrl(url);<br>        druidDataSource.setUsername(username);<br>        druidDataSource.setPassword(password);<br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-编写mybatis配置类"><a href="#2-5-编写mybatis配置类" class="headerlink" title="2.5 编写mybatis配置类"></a>2.5 编写mybatis配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/10 15:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisConfig</span> &#123;<br>    <span class="hljs-comment">//构建SqlSessionFactoryBean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactoryBean <span class="hljs-title function_">getSqlSessionFactoryBean</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">sqlSessionFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>        sqlSessionFactoryBean.setDataSource(dataSource);<br>        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="hljs-string">&quot;com.sea.domain&quot;</span>);<br>        <span class="hljs-keyword">return</span> sqlSessionFactoryBean;<br>    &#125;<br><br>    <span class="hljs-comment">//构建mapper映射器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MapperScannerConfigurer <span class="hljs-title function_">getMapperScannerConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MapperScannerConfigurer</span> <span class="hljs-variable">mapperScannerConfigurer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperScannerConfigurer</span>();<br>        mapperScannerConfigurer.setBasePackage(<span class="hljs-string">&quot;com.sea.dao&quot;</span>);<br>        <span class="hljs-keyword">return</span> mapperScannerConfigurer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-编写SpringMVC配置类"><a href="#2-6-编写SpringMVC配置类" class="headerlink" title="2.6 编写SpringMVC配置类"></a>2.6 编写SpringMVC配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/10 15:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.sea.controller&quot;&#125;)</span><br><span class="hljs-meta">@EnableWebMvc</span> <span class="hljs-comment">//开启json数据转换为POJO对象的功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMVCConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7-编写Servlet容器初始化配置类"><a href="#2-7-编写Servlet容器初始化配置类" class="headerlink" title="2.7 编写Servlet容器初始化配置类"></a>2.7 编写Servlet容器初始化配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/10 15:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletContainersInitConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringMVCConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>将Spring容器作为父容器，相当于整合了SpringMVC框架!</strong></p></li><li><p>至此，Spring框架整合了Mybatis框架、SpringMVC框架，以及Junit单元测试框架！</p></li></ul><h2 id="三、功能模块开发【分层开发】"><a href="#三、功能模块开发【分层开发】" class="headerlink" title="三、功能模块开发【分层开发】"></a>三、功能模块开发【分层开发】</h2><h3 id="3-1-建库建表"><a href="#3-1-建库建表" class="headerlink" title="3.1 建库建表"></a>3.1 建库建表</h3><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SpringMVC-SSM%E6%95%B4%E5%90%88_1.png" alt="SpringMVC-SSM整合_1"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Book实体类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/10 17:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    String type;<br>    String name;<br>    String description;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String type, String name, String description)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.type = type;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.description = description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setType</span><span class="hljs-params">(String type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDescription</span><span class="hljs-params">(String description)</span> &#123;<br>        <span class="hljs-built_in">this</span>.description = description;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, type=&#x27;&quot;</span> + type + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, description=&#x27;&quot;</span> + description + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-数据访问层（dao）"><a href="#3-2-数据访问层（dao）" class="headerlink" title="3.2 数据访问层（dao）"></a>3.2 数据访问层（dao）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据访问层接口及自动代理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/10 15:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-meta">@Insert(&quot;insert into book values(null, #&#123;type&#125;, #&#123;name&#125;, #&#123;description&#125;)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span>;<br><br>    <span class="hljs-meta">@Delete(&quot;delete from book where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBook</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-meta">@Update(&quot;update book set type = #&#123;type&#125;, name = #&#123;name&#125;, description  = #&#123;description&#125; where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Book book)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from book where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getBookById</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from book&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">getAllBook</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-业务层（service）"><a href="#3-3-业务层（service）" class="headerlink" title="3.3 业务层（service）"></a>3.3 业务层（service）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 业务层接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/10 17:42</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteBook</span><span class="hljs-params">(Integer bookId)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Book book)</span>;<br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getBookById</span><span class="hljs-params">(Integer bookId)</span>;<br>    <span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">getAllBook</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 业务层接口实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/10 17:42</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span> &#123;<br>        bookDao.addBook(book);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteBook</span><span class="hljs-params">(Integer bookId)</span> &#123;<br>        bookDao.deleteBook(bookId);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Book book)</span> &#123;<br>        bookDao.updateBook(book);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getBookById</span><span class="hljs-params">(Integer bookId)</span> &#123;<br>        <span class="hljs-keyword">return</span> bookDao.getBookById(bookId);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">getAllBook</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bookDao.getAllBook();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-表现层（controller）"><a href="#3-4-表现层（controller）" class="headerlink" title="3.4 表现层（controller）"></a>3.4 表现层（controller）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 表现层控制类及方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/10 16:26</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/books&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">saveBook</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span>&#123;<br>        <span class="hljs-keyword">return</span> bookService.addBook(book);<br>    &#125;<br><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;bookId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteBook</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer bookId)</span>&#123;<br>        <span class="hljs-keyword">return</span> bookService.deleteBook(bookId);<br>    &#125;<br><br>    <span class="hljs-meta">@PutMapping</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span>&#123;<br>        <span class="hljs-keyword">return</span> bookService.updateBook(book);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;bookId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getBookById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer bookId)</span>&#123;<br>        <span class="hljs-keyword">return</span> bookService.getBookById(bookId);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">getAllBook</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> bookService.getAllBook();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、接口测试【业务层-表现层接口】"><a href="#四、接口测试【业务层-表现层接口】" class="headerlink" title="四、接口测试【业务层+表现层接口】"></a>四、接口测试【业务层+表现层接口】</h2><h3 id="4-1-业务层接口测试"><a href="#4-1-业务层接口测试" class="headerlink" title="4.1 业务层接口测试"></a>4.1 业务层接口测试</h3><ul><li><p>Junit框架进行<strong>业务层接口</strong>测试，编写<strong>测试类</strong>进行业务层接口测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/10 19:17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(classes = SpringConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    BookService bookService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetBookById</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//测试getBookById接口</span><br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> bookService.getBookById(<span class="hljs-number">1</span>);<br>        System.out.println(book);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAllBook</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//测试getAllBook接口</span><br>        List&lt;Book&gt; books = bookService.getAllBook();<br>        System.out.println(books);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>测试结果：</strong></p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-SSM%E6%95%B4%E5%90%88_3.png" alt="SpringMVC-SSM整合_3"></p></li></ul><h3 id="4-2-表现层接口测试"><a href="#4-2-表现层接口测试" class="headerlink" title="4.2 表现层接口测试"></a>4.2 表现层接口测试</h3><ul><li>PostMan工具进行<strong>表现层接口</strong>测试，测试结果如下：</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/SpringMVC-SSM%E6%95%B4%E5%90%88_4.png" alt="SpringMVC-SSM整合_4"></p><h2 id="五、Spring事务管理"><a href="#五、Spring事务管理" class="headerlink" title="五、Spring事务管理"></a>五、Spring事务管理</h2><ul><li>按照Spring事务管理三个步骤开启Spring事务管理：<ul><li><p>1.业务层（service）接口上添加Spring事务管理：使用注解<code>@Transactional</code>方式</p></li><li><p>2.在jdbc配置类中设置事务管理器，也可以在Spring中设置；</p></li><li><p>3.开启注解式事务驱动；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/10 17:42</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Transactional</span> <span class="hljs-comment">//使用注解式事务管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteBook</span><span class="hljs-params">(Integer bookId)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Book book)</span>;<br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getBookById</span><span class="hljs-params">(Integer bookId)</span>;<br>    <span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">getAllBook</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/10 15:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:mysql.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCConfig</span> &#123;<br>    ...<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PlatformTransactionManager <span class="hljs-title function_">getPlatformTransactionManager</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">dataSourceTransactionManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br>        dataSourceTransactionManager.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> dataSourceTransactionManager;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/9/10 15:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">/*@ComponentScan(value = &quot;com.sea&quot;, excludeFilters = @ComponentScan.Filter(</span><br><span class="hljs-comment">        type = FilterType.ANNOTATION,</span><br><span class="hljs-comment">        classes = Controller.class</span><br><span class="hljs-comment">))*/</span><br><span class="hljs-meta">@ComponentScan(value = &#123;&quot;com.sea.service&quot;, &quot;com.sea.dao&quot;&#125;)</span><br><span class="hljs-meta">@Import(&#123;JDBCConfig.class, MybatisConfig.class&#125;)</span><br><span class="hljs-meta">@EnableTransactionManagement</span> <span class="hljs-comment">//开启注解式事务管理驱动</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Mybatis</tag>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-核心概念</title>
    <link href="/2023/09/16/Spring-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <url>/2023/09/16/Spring-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-核心概念"><a href="#Spring-核心概念" class="headerlink" title="Spring-核心概念"></a>Spring-核心概念</h1><ul><li>IoC&#x2F;DI</li><li>IoC容器</li><li>Bean</li></ul><h3 id="1-1-现存问题"><a href="#1-1-现存问题" class="headerlink" title="1.1 现存问题"></a>1.1 现存问题</h3><ul><li><p>代码书写现状：代码耦合度高；</p><ul><li><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// BookServiceImpl.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookDaoImpl</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        bookDao.save();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//BookDaoImpl.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;impl ====  1&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//BookDaoImpl2.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;impl ====  2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>若<code>BookDao</code>接口的save方法的具体实现发生变化，则需要修改<code>BookServiceImpl.java</code>中的代码，导致项目需要重新编译，测试，部署等等；</p></li></ul></li><li><p>解决方案：</p><ul><li>在使用对象时，程序中不主动使用new产生对象，而是由外部提供该对象实例；</li><li><strong>引入IoC和DI的概念</strong></li></ul></li></ul><h3 id="1-2-IoC：控制反转"><a href="#1-2-IoC：控制反转" class="headerlink" title="1.2 IoC：控制反转"></a>1.2 IoC：控制反转</h3><ul><li>IoC：全拼<code>Inversion of Control</code>，即控制反转；</li><li>概念：使用对象时，由<strong>主动new产生对象</strong>转换为<strong>由外部提供对象</strong>，此过程中对象创建的控制权由<strong>程序</strong>转移到<strong>外部</strong>，这种思想成为控制反转。</li><li>Spring技术对IoC思想进行了实现：<ul><li>Spring提供了一个容器，称为IoC容器，用于充当上述Ioc思想中的<strong>“外部”</strong>。</li><li>Ioc容器负责对象的创建、初始化等一系列工作，被创建或被管理的对象（service、dao等）在IoC容器中统称为<strong>Bean</strong>；</li></ul></li><li>实现了IoC后，我们可以获得对象实例，但是，如果当前对象实例依赖于另一个对象实例，则仍然会报错；<ul><li>解决方案：<strong>“引入DI的概念”</strong></li></ul></li></ul><h3 id="1-3-DI：依赖注入"><a href="#1-3-DI：依赖注入" class="headerlink" title="1.3 DI：依赖注入"></a>1.3 DI：依赖注入</h3><ul><li>DI：全拼<code>Dependency Injection</code>，即依赖注入；</li><li>概念：在容器中建立bean与bean之间的依赖关系的整个过程，称为<strong>依赖注入</strong>。</li></ul><h3 id="1-4-结果"><a href="#1-4-结果" class="headerlink" title="1.4 结果"></a>1.4 结果</h3><ul><li>实现了IoC和DI的思想之后：<ul><li>使用对象时，不仅可以直接从IoC容器中获取，并且获取到的bean已经绑定了其所有的依赖关系。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-核心容器</title>
    <link href="/2023/09/16/Spring-%E6%A0%B8%E5%BF%83%E5%AE%B9%E5%99%A8/"/>
    <url>/2023/09/16/Spring-%E6%A0%B8%E5%BF%83%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-核心容器"><a href="#Spring-核心容器" class="headerlink" title="Spring-核心容器"></a>Spring-核心容器</h1><h2 id="一、创建容器"><a href="#一、创建容器" class="headerlink" title="一、创建容器"></a>一、创建容器</h2><ul><li>创建Spring容器，目前先使用加载Spring配置文件的方式进行创建。</li></ul><h3 id="方式一：加载类路径下的配置文件【常用】"><a href="#方式一：加载类路径下的配置文件【常用】" class="headerlink" title="方式一：加载类路径下的配置文件【常用】"></a>方式一：加载类路径下的配置文件【常用】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.加载类路径下的配置文件</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="方式二：加载文件系统中的配置文件"><a href="#方式二：加载文件系统中的配置文件" class="headerlink" title="方式二：加载文件系统中的配置文件"></a>方式二：加载文件系统中的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//2.加载文件系统中的配置文件（即使用文件路径加载）</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemXmlApplicationContext</span>(<span class="hljs-string">&quot;/Spring_08_container/src/main/resources/applicationContext.xml&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="加载多个配置文件"><a href="#加载多个配置文件" class="headerlink" title="加载多个配置文件"></a>加载多个配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//加载多个配置文件</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext1.xml, applicationContext2.xml&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="二、容器类的层次结构"><a href="#二、容器类的层次结构" class="headerlink" title="二、容器类的层次结构"></a>二、容器类的层次结构</h2><ul><li><p>容器接口的继承和实现类结构：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring_%E5%AE%B9%E5%99%A8_1.png" alt="Spring_容器_1"></p></li><li><p>从图中可以看出，使用<code>BeanFactory</code>接口也可以创建容器，与<code>ApplicationContext</code>的区别是：</p><ul><li><code>BeanFactory</code>接口创建的容器是<strong>懒加载</strong>；</li><li><code>ApplicationContext</code>接口创建的容器是<strong>立即加载</strong>；</li></ul></li><li><p>在Spring发展过程中，需要增加新的功能时，通过子接口形式进行增加，符合**”开闭原则”**。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-入门案例</title>
    <link href="/2023/09/16/Spring-%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"/>
    <url>/2023/09/16/Spring-%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-入门案例"><a href="#Spring-入门案例" class="headerlink" title="Spring-入门案例"></a>Spring-入门案例</h1><ul><li>包括：<ul><li>IoC入门案例</li><li>DI入门案例</li></ul></li></ul><h2 id="一、IoC入门案例"><a href="#一、IoC入门案例" class="headerlink" title="一、IoC入门案例"></a>一、IoC入门案例</h2><h3 id="1-1-分析"><a href="#1-1-分析" class="headerlink" title="1.1 分析"></a>1.1 分析</h3><ul><li><p>IoC容器管理什么？</p><ul><li>Service和Dao对象，即Bean；</li></ul></li><li><p>如何将被管理的对象告知IoC容器？（哪些类的对象需要IoC容器管理）</p><ul><li>通过配置文件实现（如xml）；</li></ul></li><li><p>如何获取IoC容器？</p><ul><li>通过接口</li></ul></li><li><p>得到IoC容器后，如何获取容器中的被管理对象（Bean）?</p><ul><li>通过接口方法；</li></ul></li><li><p>使用Spring导入哪些坐标？（即导入哪些外部依赖）</p><ul><li>在pom.xml中给出</li></ul></li></ul><h3 id="1-2-案例"><a href="#1-2-案例" class="headerlink" title="1.2 案例"></a>1.2 案例</h3><ul><li><p>根据上述分析，编写第一个Spring中运用IoC思想的案例：</p></li><li><p>工程目录结构：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring-IoC%E6%A1%88%E4%BE%8B_1.png" alt="Spring-IoC案例_1"></p></li><li><p><strong>步骤1：</strong>导入Spring坐标</p><ul><li><p>在pom.xml中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.21.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>步骤2：</strong>定义Spring管理的类（需要IoC容器管理的类和接口）</p><ul><li>BookDao接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/24 16:28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>BookDaoImpl类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/24 16:30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDaoImpl____1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>BookService接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/24 16:29</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>BookServiceImpl类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/24 16:30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookDaoImpl</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        bookDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>步骤3：</strong>创建Spring配置文件，配置对应的类作为Spring管理的bean</p><ul><li>在<code>resource</code>目录下创建 Spring Config配置文件<code>applicationContext.xml</code>文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  1.在pom.xml中导入spring和junit的坐标  --&gt;</span><br>    <span class="hljs-comment">&lt;!--  2.配置bean（id需唯一）  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao_&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.dao.impl.BookDaoImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookService_&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.service.impl.BookServiceImpl&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>步骤4：</strong>初始化IoC容器，通过容器获取bean</p><ul><li>在App_1.java中进行容器初始化并通过容器来获取bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/24 16:41</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App_1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//获取IoC容器</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<span class="hljs-comment">//通过接口的实现类获取IoC容器</span><br>        <span class="hljs-comment">//获取Bean</span><br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao)ctx.getBean(<span class="hljs-string">&quot;bookDao_&quot;</span>);<span class="hljs-comment">//通过接口的方法获取bean</span><br>        bookDao.save();<br><span class="hljs-comment">//        BookService bookService = (BookService)ctx.getBean(&quot;bookService&quot;);</span><br><span class="hljs-comment">//        bookService.save();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>注意：</strong>此时，BookServiceImpl仍然是通过<code>private BookDao bookDao = new BookDaoImpl();</code>来手动创建BookDao的，这个依赖关系目前在容器中还没有进行绑定。</p></li></ul><h2 id="二、DI入门案例"><a href="#二、DI入门案例" class="headerlink" title="二、DI入门案例"></a>二、DI入门案例</h2><ul><li>在上述案例的基础上：<ul><li>不能再通过<code>new BookDaoImpl();</code>来获得<code>BookDao</code>的对象，需要解耦；</li></ul></li></ul><h3 id="2-1-分析"><a href="#2-1-分析" class="headerlink" title="2.1 分析"></a>2.1 分析</h3><ul><li>Service中需要的Dao对象如何进入Service呢？<ul><li>提供方法来实现</li></ul></li><li>不同的Service与Dao之间的关系Spring容器如何知道？<ul><li>配置文件</li></ul></li></ul><h3 id="2-2-案例"><a href="#2-2-案例" class="headerlink" title="2.2 案例"></a>2.2 案例</h3><ul><li><p>在上述IoC案例的基础上：</p></li><li><p><strong>步骤1：</strong>在Service中提供相应的方法获取Dao对象</p><ul><li>IoC容器会调用setBookDao()方法将需要的bean给Service；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/24 16:30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        bookDao.save();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBookDao</span><span class="hljs-params">(BookDao bookDao)</span>&#123;<br>        <span class="hljs-built_in">this</span>.bookDao = bookDao;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>步骤2：</strong>Spring配置文件中[<code>applicationContext.xml</code>]配置service与dao的关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  1.在pom.xml中导入spring和junit的坐标  --&gt;</span><br>    <span class="hljs-comment">&lt;!--  2.配置bean（id需唯一）  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao_&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.dao.impl.BookDaoImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookService_&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.service.impl.BookServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--  3.配置service与dao之间的关系  --&gt;</span><br>            <span class="hljs-comment">&lt;!--  name: 表示配置当前Service中哪一个具体的属性  --&gt;</span><br>            <span class="hljs-comment">&lt;!--  ref: 表示参照哪一个bean  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookDao_&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-bean相关</title>
    <link href="/2023/09/16/Spring-bean%E7%9B%B8%E5%85%B3/"/>
    <url>/2023/09/16/Spring-bean%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-bean相关"><a href="#Spring-bean相关" class="headerlink" title="Spring-bean相关"></a>Spring-bean相关</h1><h2 id="一、bean配置"><a href="#一、bean配置" class="headerlink" title="一、bean配置"></a>一、bean配置</h2><h3 id="1-1-bean的别名配置"><a href="#1-1-bean的别名配置" class="headerlink" title="1.1 bean的别名配置"></a>1.1 bean的别名配置</h3><ul><li><p>除了<code>id</code>属性外，可以通过<code>name</code>属性给bean设置别名；</p></li><li><p>可以通过<code>id</code>属性或<code>name</code>属性设置的别名来获取bean，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  1.在pom.xml中导入spring和junit的坐标  --&gt;</span><br>    <span class="hljs-comment">&lt;!--  2.配置bean（id需唯一）  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao_&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bD, bookD&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.dao.impl.BookDaoImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookService_&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bService bookS BSer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.service.impl.BookServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--  bean标签的name属性用于给该bean起别名，多个别名之间使用逗号、分号或者空格分隔  --&gt;</span><br>        <span class="hljs-comment">&lt;!--  3.配置service与dao之间的关系  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bD&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--  name: 表示配置当前Service中哪一个具体的属性  --&gt;</span><br>        <span class="hljs-comment">&lt;!--  ref: 表示参照哪一个bean  --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>多个别名之间使用逗号、分号或者空格分隔！</strong></p></li></ul><h3 id="1-2-bean的作用范围配置"><a href="#1-2-bean的作用范围配置" class="headerlink" title="1.2 bean的作用范围配置"></a>1.2 bean的作用范围配置</h3><ul><li><p>通过<code>ctx.getBean()</code>获取的bean是否是单例对象呢？</p><ul><li>直接打印看看：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此处，通过getBean()获取的bean是单例对象，即多次调用返回的是同一个对象</span><br><span class="hljs-type">BookService</span> <span class="hljs-variable">bookService1</span> <span class="hljs-operator">=</span> (BookService)ctx.getBean(<span class="hljs-string">&quot;bookService_&quot;</span>);<br><span class="hljs-type">BookService</span> <span class="hljs-variable">bookService2</span> <span class="hljs-operator">=</span> (BookService)ctx.getBean(<span class="hljs-string">&quot;bookService_&quot;</span>);<br>System.out.println(bookService1);<br>System.out.println(bookService2);<br></code></pre></td></tr></table></figure><ul><li>结果：<strong>两次获取的bean实例对象的地址一致，说明是同一个对象。</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring_bean%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4_1.png" alt="Spring_bean的作用范围_1"></p></li><li><p>如何创建非单例的bean对象呢？</p><ul><li><p>在xml配置文件中，bean的默认scope属性为<code>singleton</code>，即单例模式；</p></li><li><p>将该属性的值修改为<code>prototype</code>即可创建非单例的bean对象；</p><ul><li>如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookService_&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bService bookS BSer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.service.impl.BookServiceImpl&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span> <br>  ... <br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>运行代码后：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring_bean%E7%9A%84%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4_2.png" alt="Spring_bean的作用范围_2"></p></li></ul></li><li><p>为什么默认创建bean对象的方式为单例模式呢？</p><ul><li>Spring容器中管理的bean对象实例，都是属于可复用的对象；</li></ul></li></ul><h4 id="哪些bean对象适合交给容器进行管理呢？（单例模式）"><a href="#哪些bean对象适合交给容器进行管理呢？（单例模式）" class="headerlink" title="哪些bean对象适合交给容器进行管理呢？（单例模式）"></a>哪些bean对象适合交给容器进行管理呢？（单例模式）</h4><ul><li>表现层对象（controller）</li><li>业务层对象（service）</li><li>数据层对象（mapper）</li><li>工具对象（utils）</li></ul><h4 id="哪些bean对象不适合交给容器进行管理呢？"><a href="#哪些bean对象不适合交给容器进行管理呢？" class="headerlink" title="哪些bean对象不适合交给容器进行管理呢？"></a>哪些bean对象不适合交给容器进行管理呢？</h4><ul><li>封装实体的域对象（如domain中的实体类对象）</li></ul><h2 id="二、bean实例化过程"><a href="#二、bean实例化过程" class="headerlink" title="二、bean实例化过程"></a>二、bean实例化过程</h2><h3 id="2-1-bean的创建"><a href="#2-1-bean的创建" class="headerlink" title="2.1 bean的创建"></a>2.1 bean的创建</h3><ul><li>bean本质上是对象，在Java中对象通常<strong>使用构造方法进行创建</strong>。</li></ul><h3 id="2-2-bean的三种创建方式"><a href="#2-2-bean的三种创建方式" class="headerlink" title="2.2 bean的三种创建方式"></a>2.2 bean的三种创建方式</h3><h4 id="方式一：构造方法创建对象"><a href="#方式一：构造方法创建对象" class="headerlink" title="方式一：构造方法创建对象"></a>方式一：构造方法创建对象</h4><ul><li>BookDao接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/25 15:24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>BookDaoImpl类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/25 15:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">BookDaoImpl</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//此处私有的构造方法也可以找到【反射机制】</span><br>        System.out.println(<span class="hljs-string">&quot;BookDao 构造方法 被调用了！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Bookdao saving ... &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.dao.impl.BookDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>通过获取Spring容器创建的bean对象，并调用save方法，运行程序后控制台输出如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring_bean%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F_1.png" alt="Spring_bean的创建方式_1"></p><ul><li>我们发现：<ul><li>无论该无参构造方法是<code>public</code>还是<code>private</code>，Spring创建实例化对象时都能够访问到！【用到了<strong>反射机制</strong>，在xml配置文件中的bean标签的class属性给出了该类的完整路径】</li><li>若是无参构造方法不存在，则将抛出<code>BeanCreationException</code>异常;</li></ul></li></ul><h4 id="方式二：静态工厂"><a href="#方式二：静态工厂" class="headerlink" title="方式二：静态工厂"></a>方式二：静态工厂</h4><ul><li><p>编写静态工厂类OrderDaoFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/27 14:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderDaoFactory</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 静态工厂方法：getOrderDao</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> OrderDao</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> OrderDao <span class="hljs-title function_">getOrderDao</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;OrderDao setup ... &quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderDaoImpl</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在配置文件中配置该工厂类以及静态工厂方法</p><ul><li>1.配置bean标签的class属性值为静态工厂方法所在类的全路径；<ul><li>【此时，Spring容器可以创建工厂类的bean对象，但是我们需要的是静态工厂方法创建的Dao对象】</li></ul></li><li>2.给bean标签添加属性 <code>factory-method</code>，属性值为静态方法的名称</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  方式一：通过构造方法创建对象  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.dao.impl.BookDaoImpl&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  方式二：通过静态工厂方法创建对象  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orderDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.factory.OrderDaoFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getOrderDao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>通过获取Spring容器创建的工厂类对象，调用静态工厂方法返回的相应的bean对象</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring_bean%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F_2.png" alt="Spring_bean的创建方式_2"></p><ul><li>此处可以发现：<ul><li>在配置文件中配置的bean都通过Spring容器创建了一个单例对象；</li></ul></li></ul></li></ul><h4 id="方式三：实例工厂"><a href="#方式三：实例工厂" class="headerlink" title="方式三：实例工厂"></a>方式三：实例工厂</h4><ul><li><p>编写实例工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/27 14:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> UserDao <span class="hljs-title function_">getUserDao</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置文件中进行配置：</p><ul><li><p>1.配置实例工厂类bean对象</p></li><li><p>2.配置相应的Dao类型的bean对象</p><ul><li>此处，通过bean标签的<code>factory-bean</code>属性进行配置工厂类的实例bean对象；</li><li>有了工厂类的实例bean对象后，调用该对象的工厂方法创建Dao类型的bean对象；</li><li><strong>而在静态工厂中，只需要配置工厂类的bean即可；</strong></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  方式一：通过构造方法创建对象  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.dao.impl.BookDaoImpl&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  方式二：通过静态工厂方法创建对象  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orderDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.factory.OrderDaoFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getOrderDao&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  方式三：通过实例工厂方法创建对象  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.factory.UserDaoFactory&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;userDaoFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getUserDao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>获取配置好的bean对象并调用对象的方法</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring_bean%E7%9A%84%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F_3.png" alt="Spring_bean的创建方式_3"></p></li><li><p>存在的问题：</p><ul><li>1.配置工厂类的bean仅仅是为了配合Dao类型的bean使用，没有其他意义；</li><li>2.方法名称不固定，每次都需要进行配置；</li></ul></li><li><p>解决：</p></li></ul><h4 id="方式三（改进）"><a href="#方式三（改进）" class="headerlink" title="方式三（改进）"></a><strong>方式三（改进）</strong></h4><ul><li><p>编写一个工厂类实现<code>FactoryBean&lt;T&gt;</code>接口，并实现接口中定义的方法；</p><ul><li>Spring 容器会通过调用 getObject() 方法来获取实际的 bean 实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/27 14:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;UserDao&gt; &#123;<br>    <span class="hljs-comment">//实现了 FactoryBean&lt;T&gt; 接口并实现了接口中定义的方法后，</span><br>    <span class="hljs-comment">// Spring 容器会通过调用 getObject() 方法来获取实际的 bean 实例。</span><br>    <br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代替原始实例工厂中创建对象的方法（例如getUserDao）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDao <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  <br>  <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//是否单例模式</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在配置文件中只需要配置一个bean即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>  ......<br><br>    <span class="hljs-comment">&lt;!--  方式三：通过实例工厂方法创建对象  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.factory.UserDaoFactory&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;userDaoFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getUserDao&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  方式三（改进）：通过FactoryBean【这是一个接口】来实例化bean对象  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao_fb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.factory.UserDaoFactoryBean&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="三、bean的生命周期"><a href="#三、bean的生命周期" class="headerlink" title="三、bean的生命周期"></a>三、bean的生命周期</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><ul><li>生命周期：从创建到消亡的整个过程；</li><li>bean的生命周期：bean从创建到销毁的整体过程；</li><li>bean的生命周期控制：在bean创建后到销毁前的做的事情；</li></ul><h3 id="3-2-bean生命周期整体过程"><a href="#3-2-bean生命周期整体过程" class="headerlink" title="3.2 bean生命周期整体过程"></a>3.2 bean生命周期整体过程</h3><ul><li>初始化容器<ul><li>1.创建对象（内存分配）</li><li>2.执行构造方法</li><li>3.执行属性注入</li><li>4.执行<strong>bean初始化</strong>方法</li></ul></li><li>使用bean<ul><li>1.执行业务操作</li></ul></li><li>关闭&#x2F;销毁容器<ul><li>1.执行<strong>bean销毁</strong>方法</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring_bean%E7%9A%84%E9%94%80%E6%AF%81.png" alt="Spring_bean的销毁"></p>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>bean</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-依赖注入(DI)相关</title>
    <link href="/2023/09/16/Spring-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5(DI)%E7%9B%B8%E5%85%B3/"/>
    <url>/2023/09/16/Spring-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5(DI)%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-依赖注入-DI-相关"><a href="#Spring-依赖注入-DI-相关" class="headerlink" title="Spring-依赖注入(DI)相关"></a>Spring-依赖注入(DI)相关</h1><ul><li><p>思考：</p><ul><li><p>1.向一个类中传递数据的方式有几种？</p><ul><li>set方法</li><li>构造方法</li></ul></li><li><p>2.依赖注入(DI)描述了在容器中建立bean与bean之间依赖关系的过程，如果bean运行需要的是数字或者字符串呢？</p><ul><li>引用类型</li><li>简单类型：基本数据类型和String</li></ul></li></ul></li></ul><h2 id="一、依赖注入的方式"><a href="#一、依赖注入的方式" class="headerlink" title="一、依赖注入的方式"></a>一、依赖注入的方式</h2><table><thead><tr><th>setter注入</th><th>构造器注入</th></tr></thead><tbody><tr><td>简单类型</td><td>简单类型</td></tr><tr><td>引用类型</td><td>引用类型</td></tr></tbody></table><h3 id="1-1-setter注入-–-引用类型"><a href="#1-1-setter注入-–-引用类型" class="headerlink" title="1.1 setter注入 – 引用类型"></a>1.1 setter注入 – 引用类型</h3><ul><li><p>（1）OrderDaoImpl类中，依赖UserDao和BookDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/25 15:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderDao</span> &#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Order saving ... &quot;</span>);<br>        userDao.save();<br>        bookDao.save();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBookDao</span><span class="hljs-params">(BookDao bookDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookDao = bookDao;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>（2）配置文件中配置bean和各个bean之间的依赖关系注入<strong>【property标签的ref属性注入】</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.dao.impl.UserDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.dao.impl.BookDaoImpl&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orderDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.dao.impl.OrderDaoImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookDao&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>（3）获取Spring容器中管理的bean，并调用相关方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/30 15:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppForDISetter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">OrderDao</span> <span class="hljs-variable">orderDao</span> <span class="hljs-operator">=</span> (OrderDao) context.getBean(<span class="hljs-string">&quot;orderDao&quot;</span>);<br><br>        orderDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-2-setter注入-–-简单类型"><a href="#1-2-setter注入-–-简单类型" class="headerlink" title="1.2 setter注入 – 简单类型"></a>1.2 setter注入 – 简单类型</h3><ul><li><p>（1）UserDaoImpl类中，依赖两个简单类型：int和String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/25 15:26</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserDao saving ... &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;==== &quot;</span> + <span class="hljs-built_in">this</span>.id + <span class="hljs-string">&quot; ==== &quot;</span> + <span class="hljs-built_in">this</span>.name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>（2）配置文件中配置bean和简单类型注入<strong>【property标签的value属性注入】</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.dao.impl.UserDaoImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sea&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>（3）获取Spring容器中管理的bean，并调用相关方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/30 15:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppForDISetter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> (userDao) context.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br><br>        userDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-3-构造器注入"><a href="#1-3-构造器注入" class="headerlink" title="1.3 构造器注入"></a>1.3 构造器注入</h3><ul><li><p>（1）BookDaoImpl类和UserDaoImpl类，其中UserDaoImpl依赖两个简单类型：int和String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/25 15:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">BookDaoImpl</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//此处私有的构造方法也可以找到【反射机制】</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Bookdao saving ... &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/25 15:26</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDaoImpl</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserDao saving ... &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;==== &quot;</span> + <span class="hljs-built_in">this</span>.id + <span class="hljs-string">&quot; ==== &quot;</span> + <span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>（2）BookServiceImpl类，该类依赖BookDao和UserDao两个Dao类，并<strong>【通过构造器进行注入】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/30 16:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    BookDao bookDao;<br>    UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookServiceImpl</span><span class="hljs-params">(BookDao bookDao, UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookDao = bookDao;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;bookService saving ...&quot;</span>);<br>        bookDao.save();<br>        userDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>（3）配置文件中配置bean，以及相关的依赖注入<strong>【通过<code>constructor-arg</code>标签进行注入】</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.dao.impl.BookDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.dao.impl.UserDaoImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sea&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.service.impl.BookServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>（4）获取Spring容器中管理的bean，并调用相关方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/30 15:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppForConstructor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService</span> <span class="hljs-operator">=</span> (BookService) context.getBean(<span class="hljs-string">&quot;bookService&quot;</span>);<br>        bookService.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-4-两种注入方式选择"><a href="#1-4-两种注入方式选择" class="headerlink" title="1.4 两种注入方式选择"></a>1.4 两种注入方式选择</h3><ul><li>使用构造器方式注入：<ul><li>1.强制依赖</li><li>2.Spring框架建议使用构造器，比较严谨</li></ul></li><li>使用setter方式注入：<ul><li>1.可选依赖</li><li>2.<strong>自己开发的模块</strong>推荐setter注入</li></ul></li><li>【可能管理的类没有提供构造器，因此，根据实际开发情况选择！】</li><li>目前存在的弊端：还是得自己手动配置！！因此，引入自动装配的概念！</li></ul><h2 id="二、依赖自动装配"><a href="#二、依赖自动装配" class="headerlink" title="二、依赖自动装配"></a>二、依赖自动装配</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><ul><li>**IoC容器 **根据bean所依赖的资源在容器中 **自动查找并注入 **到bean中的过程称为 <strong>自动装配</strong>。</li></ul><h3 id="2-2-自动装配的方式"><a href="#2-2-自动装配的方式" class="headerlink" title="2.2 自动装配的方式"></a>2.2 自动装配的方式</h3><ul><li>按类型（常用）</li><li>按名称</li><li>按构造方法</li><li>不启用自动装配</li></ul><h3 id="2-3-实现"><a href="#2-3-实现" class="headerlink" title="2.3 实现"></a>2.3 实现</h3><ul><li><p>在配置文件中，使用bean标签的<code>autowire</code>设置自动装配的方式；</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring_%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E7%9A%84%E7%B1%BB%E5%9E%8B_1.png" alt="Spring_自动装配的类型_1"></p></li><li><p>其中：</p><ul><li>自动装配仅适用于引用类型装配；</li><li>按类型装配：需要保证相同类型的bean只能有一个；</li><li>按名称装配：需要保证bean的<code>id</code>属性与变量名一致，即变量名称与配置产生耦合，<strong>不推荐使用</strong>；</li><li><strong>自动装配优先级低于</strong>setter注入与构造器注入，同时使用时，自动装配配置失效。</li></ul></li></ul><h2 id="三、集合注入"><a href="#三、集合注入" class="headerlink" title="三、集合注入"></a>三、集合注入</h2><ul><li><p>集合：</p><ul><li>数组</li><li>List</li><li>Set</li><li>Map</li><li>Properties</li></ul></li><li><p><strong>注入方式：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.dao.impl.BookDaoImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;arr&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>d<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>e<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;b&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;d&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;e&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;set&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>d<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>e<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;driver&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sea.service.impl.BookServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>注入的值可以是基本数据类型，也可以是引用类型。</li></ul></li></ul><h2 id="四、案例-数据源对象管理"><a href="#四、案例-数据源对象管理" class="headerlink" title="四、案例:数据源对象管理"></a>四、案例:数据源对象管理</h2><ul><li><p>以配置数据库连接池为例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  druid连接池  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource_druid&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/springdb&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  c3p0连接池  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource_c3p0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/springdb&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1000&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>如果需要从配置文件中读取配置：</p><ul><li>1.开启一个新的命名空间</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       </span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       </span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           </span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span></span><br><span class="hljs-tag">       </span><br><span class="hljs-tag">        &gt;</span><br>  <br>  ......<br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring_%E6%95%B0%E6%8D%AE%E6%BA%90%E5%AF%B9%E8%B1%A1%E7%AE%A1%E7%90%86_1.png" alt="Spring_数据源对象管理_1"></p><ul><li>2.使用context空间加载properties文件</li><li>3.使用属性占位符 ${} 读取properties文件中的值</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  1.开启contex命名空间  --&gt;</span><br>    <br><span class="hljs-comment">&lt;!--  2.使用context空间加载properties文件  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;mysql.properties&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--  3.使用属性占位符 $&#123;&#125; 读取properties文件中的值  --&gt;</span><br><span class="hljs-comment">&lt;!--  druid连接池  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource_druid&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><code>mysql.properties</code>配置文件如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/springdb</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><ul><li><p>此处<code>username</code>可能会与系统的环境变量冲突，系统的环境变量优先级高，因此可能输出的username不是配置文件中的值。解决：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  增加属性 system-properties-mode=&quot;NEVER&quot; 即可 --&gt;</span><br><br><span class="hljs-comment">&lt;!--  2.使用context空间加载properties文件  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;mysql.properties&quot;</span> <span class="hljs-attr">system-properties-mode</span>=<span class="hljs-string">&quot;NEVER&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>要读取多个配置文件：</p><ul><li>读取当前工程目录下所有的properties文件。【<strong>标准格式</strong>】</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:*.properties&quot;</span> <span class="hljs-attr">system-properties-mode</span>=<span class="hljs-string">&quot;NEVER&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li>读取当前工程目录下所有的properties文件以及依赖的外部jar包中的properties文件。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath*:*.properties&quot;</span> <span class="hljs-attr">system-properties-mode</span>=<span class="hljs-string">&quot;NEVER&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>DI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Spring整合Mybatis</title>
    <link href="/2023/09/16/Spring-Spring%E6%95%B4%E5%90%88Mybatis/"/>
    <url>/2023/09/16/Spring-Spring%E6%95%B4%E5%90%88Mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Spring整合Mybatis"><a href="#Spring-Spring整合Mybatis" class="headerlink" title="Spring-Spring整合Mybatis"></a>Spring-Spring整合Mybatis</h1><h3 id="1-1-导入坐标"><a href="#1-1-导入坐标" class="headerlink" title="1.1 导入坐标"></a>1.1 导入坐标</h3><ul><li><p>除了Spring，mybatis，mysql，druid(数据源)外，还需要导入两个坐标：</p><ul><li><p>spring-jdbc</p></li><li><p>mybatis-spring</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring操作数据库需要的坐标 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 整合Mybatis需要的坐标 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-2-编写配置类"><a href="#1-2-编写配置类" class="headerlink" title="1.2 编写配置类"></a>1.2 编写配置类</h3><ul><li><p>整合Mybatis框架一共需要编写三个配置类，分别是：</p><ul><li>Spring配置类：<code>SpringConfig.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/10 09:30</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//声明该类为配置类</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.sea&quot;&#125;)</span> <span class="hljs-comment">//配置bean扫描的包路径</span><br><span class="hljs-meta">@Import(&#123;JdbcConfig.class, MybatisConfig.class&#125;)</span> <span class="hljs-comment">//引入其他配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>数据源配置类：<code>JdbcConfig.java</code></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/springdb?useSSL=false</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">12345678</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/10 09:47</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span> <span class="hljs-comment">//配置引入的properties文件路径</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-comment">//通过注解给简单类型注入值</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">//1.定义一个方法获取要管理的bean对象</span><br>    <span class="hljs-comment">//2.给该方法的返回值添加@Bean，定义成Bean对象</span><br>    <span class="hljs-meta">@Bean(&quot;dataSource_druid&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setDriverClassName(driver);<br>        druidDataSource.setUrl(url);<br>        druidDataSource.setUsername(username);<br>        druidDataSource.setPassword(password);<br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Mybatis配置类：<code>MybatisConfig.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/10 10:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构建SqlSessionFactoryBean</span><br><span class="hljs-comment">     */</span><br>  <br>  <span class="hljs-comment">//引用类型通过方法形参注入</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactoryBean <span class="hljs-title function_">sqlSessionFactory</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">sqlSessionFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="hljs-string">&quot;com.sea.domain&quot;</span>);<br>        sqlSessionFactoryBean.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> sqlSessionFactoryBean;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构建mapper映射器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MapperScannerConfigurer <span class="hljs-title function_">mapperScannerConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MapperScannerConfigurer</span> <span class="hljs-variable">mapperScannerConfigurer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperScannerConfigurer</span>();<br>        mapperScannerConfigurer.setBasePackage(<span class="hljs-string">&quot;com.sea.dao&quot;</span>);<br>        <span class="hljs-keyword">return</span> mapperScannerConfigurer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>【未解决！！】此处有疑问：通过形参注入DataSource，本质上也是将相应的bean注入该参数，那么我通过在MybatisConfig类中定义一个DataSource类型的变量，然后进行自动装配正常来说也可以，但是实际运行发现：DataSource并没有自动装配成功！！</strong><ul><li>1.既然可以通过形参方式注入DataSource类型的bean，说明Spring容器能够扫描到并管理该类型的bean对象；</li><li>2.那么为什么无法自动装配呢？？？</li></ul></li></ul></li></ul><h3 id="1-3-dao层和service层"><a href="#1-3-dao层和service层" class="headerlink" title="1.3 dao层和service层"></a>1.3 dao层和service层</h3><ul><li><p>dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/5 14:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountDao</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>    <span class="hljs-meta">@Select(&quot;select * from account;&quot;)</span><br>    List&lt;Account&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br>    Account <span class="hljs-title function_">findById</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/10 09:34</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccountService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountDao accountDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        accountDao.save();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        accountDao.update();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        accountDao.delete();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Account <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-keyword">return</span> accountDao.findById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Account&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> accountDao.findAll();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-4-测试"><a href="#1-4-测试" class="headerlink" title="1.4 测试"></a>1.4 测试</h3><ul><li><p>编写App类测试是否能够访问数据库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/10 10:20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br><br>        <span class="hljs-type">AccountService</span> <span class="hljs-variable">accountService</span> <span class="hljs-operator">=</span> context.getBean(AccountService.class);<br>        List&lt;Account&gt; serviceAll = accountService.findAll();<br>        System.out.println(serviceAll);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring-Spring%E6%95%B4%E5%90%88Mybatis_1.png" alt="Spring-Spring整合Mybatis_1"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Spring整合Junit</title>
    <link href="/2023/09/16/Spring-Spring%E6%95%B4%E5%90%88Junit/"/>
    <url>/2023/09/16/Spring-Spring%E6%95%B4%E5%90%88Junit/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Spring整合Junit"><a href="#Spring-Spring整合Junit" class="headerlink" title="Spring-Spring整合Junit"></a>Spring-Spring整合Junit</h1><h3 id="1-1-导入坐标"><a href="#1-1-导入坐标" class="headerlink" title="1.1 导入坐标"></a>1.1 导入坐标</h3><ul><li><p>除了druid、mysql、spring以及整合Mybatis用到的mybatis、mybatis-spring、spring-jdbc外，还需要引入两个坐标：</p><ul><li>spring-test</li><li>junit</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-2-编写测试类"><a href="#1-2-编写测试类" class="headerlink" title="1.2 编写测试类"></a>1.2 编写测试类</h3><ul><li><p>在src&#x2F;test目录下新建与待测试的类同路径的测试类，以<code>com.sea.service.AccountService</code>类为例，在src&#x2F;test目录下新建<code>com.sea.service.AccountServiceTest</code>类进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/11 15:50</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span>  <span class="hljs-comment">//设定类运行器</span><br><span class="hljs-meta">@ContextConfiguration(classes= SpringConfig.class)</span> <span class="hljs-comment">//指定Spring配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountServiceTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAccountService</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(accountService.findAll());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>需要配置两个注解：</p><ul><li><p>指定测试类的运行器为 <code>SpringJUnit4ClassRunner</code>，它是 JUnit 的一个扩展类，用于在测试过程中启动 Spring 容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span>  <span class="hljs-comment">//设定测试类的运行器</span><br></code></pre></td></tr></table></figure></li><li><p>指定 Spring 的配置类为 <code>SpringConfig</code>，它告诉测试类在运行之前需要加载指定的 Spring 配置，以便创建和管理相应的 bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ContextConfiguration(classes= SpringConfig.class)</span> <span class="hljs-comment">//指定Spring配置类</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring-Spring%E6%95%B4%E5%90%88Junit_1.png" alt="Spring-Spring整合Junit_1"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Junit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-AOP相关</title>
    <link href="/2023/09/16/Spring-AOP%E7%9B%B8%E5%85%B3/"/>
    <url>/2023/09/16/Spring-AOP%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-AOP相关"><a href="#Spring-AOP相关" class="headerlink" title="Spring-AOP相关"></a>Spring-AOP相关</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><h3 id="1-1-AOP简介"><a href="#1-1-AOP简介" class="headerlink" title="1.1 AOP简介"></a>1.1 AOP简介</h3><ul><li>全称：面向切面编程 Aspect Oriented Programming(AOP)</li><li>简介：一种编程范式，直到开发者如何去组织程序结构；&lt;&#x3D;&#x3D;&gt; <strong>类比面向对象编程（OOP）</strong></li><li><strong>作用：在不修改原代码的基础上为其增强功能。</strong></li><li>Spring理念：无侵入式</li></ul><h3 id="1-2-核心概念"><a href="#1-2-核心概念" class="headerlink" title="1.2 核心概念"></a>1.2 核心概念</h3><ul><li><p>根据下图：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring-AOP%E7%9B%B8%E5%85%B3_1.png" alt="Spring-AOP相关_1"></p><ul><li><strong>连接点（JoinPoint）</strong>：在程序执行过程中可以应用<strong>通知</strong>的特定点，粒度为<strong>执行方法</strong>、<strong>抛出异常</strong>、<strong>设置变量</strong>等；<ul><li>在SpringAOP中，理解为变量执行；</li></ul></li><li><strong>切入点（Pointcut）</strong>：定义了在哪些方法或类上应用通知。<ul><li>通过使用切点表达式，可以根据方法的名称、参数、返回类型等来定义切点，如：<ul><li>一个具体的方法：<code>com.sea.dao</code>包下的<code>BookDao</code>接口中的无形参无返回值的<code>save</code>方法；</li><li>匹配多个方法：所有的<code>save</code>方法、所有的get开头的方法、所有以Dao结尾的接口中的任意方法等等；</li></ul></li></ul></li><li><strong>通知（Advice）：</strong>在切入点处执行的操作，也就是共性功能，Spring AOP 中最终以方法的形式呈现。<ul><li>通知定义了在切入点何处执行什么操作；</li><li>Spring AOP支持一下几种类型的通知：<ul><li><strong>前置通知（Before）</strong>：在方法调用之前执行。</li><li><strong>后置通知（After）：</strong>在方法调用之后执行（不考虑方法的结果）。</li><li><strong>返回通知（AfterReturning）：</strong>在方法调用之后执行，并获取方法的返回值。</li><li><strong>异常通知（AfterThrowing）：</strong>在方法抛出异常时执行。</li><li><strong>环绕通知（Around）：</strong>在方法调用之前和之后执行自定义操作。</li></ul></li></ul></li><li><strong>通知类：</strong>定义通知【通知呈现形式是方法，方法需要放在某个类中】的类。</li><li><strong>切面（Aspect）：</strong>描述<strong>通知</strong>与<strong>切入点</strong>的对应关系。</li></ul></li></ul><h2 id="二、AOP入门案例"><a href="#二、AOP入门案例" class="headerlink" title="二、AOP入门案例"></a>二、AOP入门案例</h2><ul><li>案例：测试接口的执行效率【统计接口运行耗时】</li></ul><h3 id="2-1-导入AOP相关坐标"><a href="#2-1-导入AOP相关坐标" class="headerlink" title="2.1 导入AOP相关坐标"></a>2.1 导入AOP相关坐标</h3><ul><li><p>如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- spring-context导入后，spring-aop也会被导入，存在依赖关系 --&gt;</span><br><br><span class="hljs-comment">&lt;!--  还需要导入Aspect用到的坐标 aspectjweaver  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>spring-aop</code>与<code>spring-context</code>存在依赖关系如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring-AOP_1.png" alt="Spring-AOP_1"></p></li></ul><h3 id="2-2-定义Dao接口和实现类"><a href="#2-2-定义Dao接口和实现类" class="headerlink" title="2.2 定义Dao接口和实现类"></a>2.2 定义Dao接口和实现类</h3><ul><li><p>BookDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/12 10:17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/12 10:18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(start + <span class="hljs-string">&quot;  ==&gt; save() is starting...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;updating...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3-定义通知类"><a href="#2-3-定义通知类" class="headerlink" title="2.3 定义通知类"></a>2.3 定义通知类</h3><ul><li><p>包括通知、切入点以及两者之间的关系绑定；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通知类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/12 10:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//定义该类为切面面，并定义该通知类受Spring容器管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvice</span> &#123;<br>    <span class="hljs-meta">@Pointcut(&quot;execution(void com.sea.dao.BookDao.update())&quot;)</span> <span class="hljs-comment">//指定切入点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span> <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123; <br>        System.out.print(System.currentTimeMillis() + <span class="hljs-string">&quot; ==&gt; starting...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>注意：<ul><li>（1）切入点的定义依托一个不具有实际意义的方法进行，即<strong>无参数</strong>、<strong>无返回值</strong>、<strong>方法体中无实际逻辑</strong>的方法；</li><li>（2）<code>@Before(&quot;pt()&quot;)</code>：指定了通知添加到原连接点的位置【此处为前置通知，表示添加到原连接点的前面】；通过方法名<code>pt()</code>绑定了切入点与通知的关系；</li></ul></li></ul></li></ul><h3 id="2-4-Spring配置"><a href="#2-4-Spring配置" class="headerlink" title="2.4 Spring配置"></a>2.4 Spring配置</h3><ul><li><p>需要开启Spring容器对AOP注解驱动支持，例如<code>@Aspect</code>、<code>@Before</code>等注解；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/12 10:16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.sea&quot;)</span><br><span class="hljs-meta">@EnableAspectJAutoProxy</span><br><span class="hljs-comment">// 启用AspectJ自动代理，</span><br><span class="hljs-comment">// 允许Spring框架自动为带有@Aspect注解的类创建代理对象，并将切面逻辑织入到目标对象中。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-5-结果"><a href="#2-5-结果" class="headerlink" title="2.5 结果"></a>2.5 结果</h3><ul><li><p>通过上述案例，我们可以在不修改原代码的前提下，给接口实现类<code>BookDaoImpl</code>增加功能；</p><ul><li>如下图：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Spring-AOP_2.png" alt="Spring-AOP_2"></p></li></ul><h2 id="三、AOP工作流程"><a href="#三、AOP工作流程" class="headerlink" title="三、AOP工作流程"></a>三、AOP工作流程</h2><ul><li><p>1.Spring容器启动</p></li><li><p>2.读取所有切面<code>@Aspect</code>配置中的切入点【<code>@Before</code>、<code>@After</code>…】</p></li><li><p>3.初始化bean，判定bean对应的类【例如BookDaoImpl】中的方法【update()】是否匹配到任意切入点：</p><ul><li>匹配失败，创建对象【BookDaoImpl】</li><li>匹配成功，创建原始对象【BookDao】的<strong>代理对象</strong></li></ul></li><li><p>4.获取bean，执行对应方法：</p><ul><li>匹配失败，获取bean，执行方法；</li><li>匹配成功，获取代理对象bean，根据代理对象的运行模式 运行 原始方法与增强的内容，完成操作；</li></ul></li></ul><h2 id="四、AOP切入点表达式"><a href="#四、AOP切入点表达式" class="headerlink" title="四、AOP切入点表达式"></a>四、AOP切入点表达式</h2><h3 id="4-1-切入点和切入点表达式"><a href="#4-1-切入点和切入点表达式" class="headerlink" title="4.1 切入点和切入点表达式"></a>4.1 切入点和切入点表达式</h3><ul><li>切入点：要增强的方法</li><li>切入点表达式：<strong>要进行增强的方法</strong>【切入点】的描述方式</li></ul><h3 id="4-2-描述方式"><a href="#4-2-描述方式" class="headerlink" title="4.2 描述方式"></a>4.2 描述方式</h3><ul><li><p>描述切入点既可以描述接口方法也可以描述该接口实现类中的方法，例如：</p><ul><li><code>execution(void com.sea.dao.BookDao.update())</code></li><li><code>execution(void com.sea.dao.impl.BookDaoImpl.update())</code></li></ul></li><li><p>切入点表达式标准格式：</p><ul><li>动作关键字( 访问修饰符 返回值 包名.类&#x2F;接口.方法名( 参数 ) 异常名 )</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Pointcut(&quot;execution(public User com.sea.service.UserService.findById(int))&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>（1）动作关键字：描述切入点的行为动作，如execution表示执行到指定切入点；</li><li>（2）访问修饰符：public、private等，<strong>可以省略</strong>；</li><li>（3）返回值类型：指定要匹配的方法的返回类型，可以使用通配符 * 表示任意类型；</li><li>（4）包名.类&#x2F;接口.方法名</li><li>（5）参数：指定方法的参数列表，可以使用通配符 * 表示任意参数；</li><li>（6）异常名：指定方法可能抛出的异常，可以使用通配符 * 表示任意异常，<strong>可以省略</strong>；</li></ul></li><li><p>使用通配符快速描述切入点：</p><ul><li><p><code>*</code>：单个独立的任意符号，可以独立出现，也可以左右前缀或者后缀的匹配符出现；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//匹配【返回类型为任意类型】、【com.sea包下的任意子包中的UserService类/接口中以find为前缀】、【有一个任意类型参数】的方法</span><br>execution(<span class="hljs-keyword">public</span> * com.sea.*.UserService.find*(*))<br></code></pre></td></tr></table></figure></li><li><p><code>..</code>：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//匹配【返回类型为User类型】、【com包下的任意子包中的UserService类/接口中】、【所有名为findById】的方法</span><br>execution(<span class="hljs-keyword">public</span> User com..UserService.findById(..))<br></code></pre></td></tr></table></figure></li><li><p><code>+</code>：专用于匹配子类类型；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//匹配【任意返回值】、【任意包下的以Service为后缀的类或接口的子类中】、【所有方法】</span><br>excution(* *..*Service+.*(..))<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="五、AOP通知类型"><a href="#五、AOP通知类型" class="headerlink" title="五、AOP通知类型"></a>五、AOP通知类型</h2><ul><li><p>一共分为五种：</p><ul><li>前置通知</li><li>后置通知</li><li>环绕通知【重点】</li><li>返回后通知</li><li>抛出异常后通知</li></ul></li><li><p>举例说明各种类型的通知的用法：首先需要定义原始的dao接口及其实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * DAO接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/24 15:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * DAO接口实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/24 15:34</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDapImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;bookDao select running... &quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;bookDao update running... &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-1-前置通知"><a href="#5-1-前置通知" class="headerlink" title="5.1 前置通知"></a>5.1 前置通知</h3><ul><li><p>在目标方法<strong>执行之前</strong>被触发的，用于执行一些准备性工作或者参数校验等操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(public * com.sea.dao.BookDao.*())&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt_before</span><span class="hljs-params">()</span>&#123;&#125;<br><br><span class="hljs-meta">@Before(&quot;pt_before()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;pt_before()......aaaaaaaaaaaaaaaa&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-2-后置通知"><a href="#5-2-后置通知" class="headerlink" title="5.2 后置通知"></a>5.2 后置通知</h3><ul><li><p>在目标方法<strong>执行之后</strong>被触发的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(public * com.sea.dao.BookDao.*())&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt_after</span><span class="hljs-params">()</span>&#123;&#125;<br><br><span class="hljs-meta">@After(&quot;pt_after()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;pt_after()......aaaaaaaaaaaaaaaa&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-3-环绕通知"><a href="#5-3-环绕通知" class="headerlink" title="5.3 环绕通知"></a>5.3 环绕通知</h3><ul><li><p>在目标方法<strong>执行前后</strong>都能够进行处理，并且能够<strong>完全控制</strong>目标方法的执行。</p></li><li><p>环绕通知可以决定<strong>是否调用目标方法</strong>，也可以在目标方法执行前后做一些额外的处理。</p></li><li><p>环绕通知方法被调用时，Spring AOP框架自动将ProceedingJoinPoint类型的参数传递给通知方法。</p><ul><li>该参数提供了对目标方法的访问权限，包括方法调用、参数、返回值等信息。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(public * com.sea.dao.BookDao.*())&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt_around</span><span class="hljs-params">()</span>&#123;&#125;<br><br><span class="hljs-meta">@Around(&quot;pt_around()&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    System.out.println(<span class="hljs-string">&quot;pt_aroudBefore============&quot;</span>);<br>    <span class="hljs-comment">//1.调用原始方法</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> (Integer) proceedingJoinPoint.proceed();<br>    System.out.println(<span class="hljs-string">&quot;pt_after==================&quot;</span>);<br>    <span class="hljs-comment">//2.运行原始方法后，若有返回值，则需要返回该值</span><br>    <span class="hljs-keyword">return</span> res != <span class="hljs-literal">null</span> ? Integer.valueOf(res + <span class="hljs-number">256</span>) : res;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意：环绕通知是<strong>最高优先级</strong>的通知类型！</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>AOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-事务相关</title>
    <link href="/2023/09/16/Spring-Spring%E4%BA%8B%E5%8A%A1%E7%9B%B8%E5%85%B3/"/>
    <url>/2023/09/16/Spring-Spring%E4%BA%8B%E5%8A%A1%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-事务相关"><a href="#Spring-事务相关" class="headerlink" title="Spring-事务相关"></a>Spring-事务相关</h1><h2 id="一、事务简介"><a href="#一、事务简介" class="headerlink" title="一、事务简介"></a>一、事务简介</h2><ul><li>事务作用：在数据层保障<strong>一系列的数据库操作</strong>同时成功&#x2F;失败；</li><li>Spring事务作用：在数据层或<strong>业务层</strong>保障一系列的数据库操作同时成功&#x2F;失败；</li></ul><h2 id="二、Spring事务的实现"><a href="#二、Spring事务的实现" class="headerlink" title="二、Spring事务的实现"></a>二、Spring事务的实现</h2><ul><li>Spring实现事务的步骤：<ul><li><p>1.业务层（service）接口上添加Spring事务管理：使用注解<code>@Transactional</code>方式</p><ul><li>注解式事务添加在业务层接口上而不会添加到业务层实现类中，降低耦合；</li><li>注解式事务添加在业务层接口上：表示该接口的所有实现方法均开始事务管理；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountService</span> &#123;<br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(String out, String in, Double money)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>2.设置事务管理器 </p><ul><li>在jdbc配置类中设置事务管理器；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span> <span class="hljs-comment">//配置引入的properties文件路径</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>......<br>    <span class="hljs-comment">//设置事务管理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PlatformTransactionManager <span class="hljs-title function_">getTransactionManager</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">ptm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br>        ptm.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> ptm;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>3.开启注解式事务驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//声明该类为配置类</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.sea&quot;&#125;)</span> <span class="hljs-comment">//配置bean扫描的包路径</span><br><span class="hljs-meta">@Import(&#123;JdbcConfig.class, MybatisConfig.class&#125;)</span> <span class="hljs-comment">//引入其他配置类</span><br><span class="hljs-meta">@EnableTransactionManagement</span> <span class="hljs-comment">//开启注解式事务驱动</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="三、Spring事务角色"><a href="#三、Spring事务角色" class="headerlink" title="三、Spring事务角色"></a>三、Spring事务角色</h2><ul><li><p>事务角色包括：</p><ul><li><p><strong>事务管理员</strong>：发起事务方，在Spring中通常指代业务层开启事务的方法；</p><ul><li><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(String out, String in, Double money)</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>事务协调员</strong>：加入事务方，在Spring中通常指代数据层的方法，也可以是业务层方法；</p><ul><li><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountDao</span> &#123;<br>    <span class="hljs-meta">@Update(&quot;update tb_account set money = money + #&#123;money&#125; where name = #&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">inMoney</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name, <span class="hljs-meta">@Param(&quot;money&quot;)</span> Double money)</span>;<br>    <span class="hljs-meta">@Update(&quot;update tb_account set money = money - #&#123;money&#125; where name = #&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">outMoney</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name, <span class="hljs-meta">@Param(&quot;money&quot;)</span> Double money)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="四、Spring事务属性"><a href="#四、Spring事务属性" class="headerlink" title="四、Spring事务属性"></a>四、Spring事务属性</h2><h3 id="4-1-事务属性介绍"><a href="#4-1-事务属性介绍" class="headerlink" title="4.1 事务属性介绍"></a>4.1 事务属性介绍</h3><ul><li><p>按住<code>Ctrl</code>+鼠标左键点击注解<code>@Transactional</code>进入Spring事务注解的属性信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Transactional &#123;<br>    <span class="hljs-meta">@AliasFor(&quot;transactionManager&quot;)</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-meta">@AliasFor(&quot;value&quot;)</span><br>    String <span class="hljs-title function_">transactionManager</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    Propagation <span class="hljs-title function_">propagation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Propagation.REQUIRED;<br><br>    Isolation <span class="hljs-title function_">isolation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Isolation.DEFAULT;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">timeout</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">readOnly</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Throwable</span>&gt;[] rollbackFor() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    String[] rollbackForClassName() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Throwable</span>&gt;[] noRollbackFor() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    String[] noRollbackForClassName() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td></td></tr><tr><td>propagation</td><td>设置事务的传播行为，默认为Propagation.REQUIRED</td></tr><tr><td>isolation</td><td>设置事务的隔离程度，默认为Isolation.DEFAULT</td></tr><tr><td>timeout</td><td>设置事务超时时间，默认为-1</td></tr><tr><td>readOnly</td><td>设置是否为只读事务，默认为false</td></tr><tr><td>rollbackFor</td><td>设置事务回滚异常【参数为xxx.class】</td></tr><tr><td>rollbackForClassName</td><td>设置事务回滚异常【参数为”xxx.class”】</td></tr><tr><td>noRollbackFor</td><td>设置事务不回滚异常【参数为xxx.class】</td></tr><tr><td>noRollbackForClassName</td><td>设置事务不回滚异常【参数为”xxx.class”】</td></tr></tbody></table></li><li><p>注意：Spring事务异常回滚仅在捕获运行时异常以及error时回滚！也可以通过rollbackFor属性指定某种异常也会回滚；</p></li></ul><h3 id="4-2-事务属性的使用场景"><a href="#4-2-事务属性的使用场景" class="headerlink" title="4.2 事务属性的使用场景"></a>4.2 事务属性的使用场景</h3><ul><li><p><strong>前提：<code>@Transactional</code>注解只有应用到public方法，才能进行事务管理！</strong></p></li><li><p>设置只读事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(readOnly = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(String out, String in, Double money)</span>;<br></code></pre></td></tr></table></figure></li><li><p>设置事务超时时间（单位：秒）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(readOnly = true， timeout = 5)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(String out, String in, Double money)</span>;<br></code></pre></td></tr></table></figure></li><li><p>设置捕捉到某种指定异常也进行事务回滚</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(readOnly = true, timeout = 10, rollbackFor = IOException.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(String out, String in, Double money)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(readOnly = true, timeout = 10, rollbackForClassName = &quot;IOException.class&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(String out, String in, Double money)</span>;<br></code></pre></td></tr></table></figure></li><li><p>设置事务传播行为：</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/Spring-%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA%E5%B1%9E%E6%80%A7propagation%E4%BB%8B%E7%BB%8D.png" alt="Spring-事务传播行为属性propagation介绍"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>事务</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis-快速开始</title>
    <link href="/2023/09/16/Mybatis-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    <url>/2023/09/16/Mybatis-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-快速开始"><a href="#Mybatis-快速开始" class="headerlink" title="Mybatis-快速开始"></a>Mybatis-快速开始</h1><ul><li>案例：查询数据库中user表的数据，并打印；</li></ul><h3 id="1-1-建库建表"><a href="#1-1-建库建表" class="headerlink" title="1.1 建库建表"></a>1.1 建库建表</h3><ul><li><p>新建数据库mybatisdb，并创建user表;</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Mybatis_quickstart_1.png" alt="Mybatis-quickstart_1"></p></li></ul><h3 id="1-2-创建项目-x2F-module，导入坐标"><a href="#1-2-创建项目-x2F-module，导入坐标" class="headerlink" title="1.2 创建项目&#x2F;module，导入坐标"></a>1.2 创建项目&#x2F;module，导入坐标</h3><ul><li><p>新建module，导入Mybatis框架、mysql、Junit坐标；</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Mybatis-quickstart_2.png" alt="Mybatis-quickstart_2"></p></li></ul><h3 id="1-3-编写Mybatis核心配置文件"><a href="#1-3-编写Mybatis核心配置文件" class="headerlink" title="1.3 编写Mybatis核心配置文件"></a>1.3 编写Mybatis核心配置文件</h3><ul><li><p>为了解决硬编码问题，将数据库配置信息放在<code>jdbc.properties</code>文件中，并在Mybatis配置文件<code>mybatisConfig.xml</code>中引入；</p><ul><li><code>jdbc.properties</code>文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">mysql.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">mysql.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatisdb</span><br><span class="hljs-attr">mysql.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">mysql.password</span>=<span class="hljs-string">12345678</span><br></code></pre></td></tr></table></figure><ul><li><code>mybatisConfig.xml</code>文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  1.引入jdbc.properties文件  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--  2.配置数据库环境【这里仅配置了mysql数据库环境，还可以配置其他数据库环境】  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--  2.1 配置事务管理器  --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--  2.2 配置数据源  --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;mysql.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;mysql.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;mysql.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;mysql.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  3.配置映射器  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;UserMapper.xml&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span> <br></code></pre></td></tr></table></figure></li></ul><h3 id="1-4-编写SQL映射文件"><a href="#1-4-编写SQL映射文件" class="headerlink" title="1.4 编写SQL映射文件"></a>1.4 编写SQL映射文件</h3><ul><li>在resource目录下新建<code>UserMapper.xml</code>文件；</li></ul>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 1.设置命名空间，用于区分不同的映射器文件，防止方法名冲突 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 2.SQL映射语句 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sea.domain.User&quot;</span>&gt;</span><br>        select * from User;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>还可以：1.参数映射：设置占位符，传入参数；2.结果映射：通过标签属性设置返回结果映射的类型；</li></ul>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.example.User&quot;</span>&gt;</span><br>    SELECT * FROM users WHERE id = #&#123;userId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-5-编码：加载和执行SQL语句"><a href="#1-5-编码：加载和执行SQL语句" class="headerlink" title="1.5 编码：加载和执行SQL语句"></a>1.5 编码：加载和执行SQL语句</h3><ul><li><p>定义实体类：User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/5 16:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    String username;<br>    String password;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>加载Mybatis配置文件，创建SqlSession对象执行SQL语句；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/7/5 16:09</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//1.加载Mybatis配置文件【Mybatis提供了Resource工具类，用于加载类路径下的资源文件】</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatisConfig.xml&quot;</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br><br>        <span class="hljs-comment">//2.创建SqlSessionFactory对象【SqlSessionFactory是MyBatis的核心接口之一，用于创建和管理数据库会话对象】</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br><br>        <span class="hljs-comment">//3.使用SqlSessionFactory对象的openSession()方法创建一个 SqlSession 对象</span><br>            <span class="hljs-comment">//SqlSession表示与数据库的一次会话，可以用于执行 SQL 语句和管理事务。</span><br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession())&#123;<span class="hljs-comment">//SqlSession使用完毕后自动释放资源</span><br>            <span class="hljs-comment">//4.执行查询操作并打印结果</span><br>            List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;test.selectAllUser&quot;</span>);<br>            <span class="hljs-keyword">for</span> (User user1 : userList) &#123;<br>                System.out.println(user1);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Mybatis-quickstart_3.png" alt="Mybatis-quickstart_3"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven-Maven多模块多环境开发</title>
    <link href="/2023/09/16/Maven-Maven%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/"/>
    <url>/2023/09/16/Maven-Maven%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven-Maven多模块多环境开发"><a href="#Maven-Maven多模块多环境开发" class="headerlink" title="Maven-Maven多模块多环境开发"></a>Maven-Maven多模块多环境开发</h1><h2 id="一、分模块开发与设计"><a href="#一、分模块开发与设计" class="headerlink" title="一、分模块开发与设计"></a>一、分模块开发与设计</h2><h3 id="1-1-分模块开发的意义"><a href="#1-1-分模块开发的意义" class="headerlink" title="1.1 分模块开发的意义"></a>1.1 分模块开发的意义</h3><ul><li><p>分模块开发前，项目的目录结构如下：</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/Maven-%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91-1.png" alt="Maven-分模块开发-1"></p></li><li><p>分模块开发：将原始模块按照功能拆分为若干个子模块，<strong>方便模块间的相互调用以及接口共享；</strong></p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/Maven-%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91-2.png" alt="Maven-分模块开发-2"></p></li></ul><h3 id="1-2-分模块开发"><a href="#1-2-分模块开发" class="headerlink" title="1.2 分模块开发"></a>1.2 分模块开发</h3><ul><li><p>分模块开发的一般步骤：</p><ul><li><p>（1）创建Maven模块：</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/Maven-%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91-3.png" alt="Maven-分模块开发-3"></p></li><li><p>（2）编写各个模块的代码：</p><ul><li><p>分模块开发需要针对模块功能进行设计，再进行编码。</p></li><li><p>例如，将<code>domain</code>包以及<code>dao</code>包作为单独的模块进行编写：</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/Maven-%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91-4.png" alt="Maven-分模块开发-4"></p></li></ul></li><li><p>（3）将各个模块通过Maven生命周期指令<code>install</code>安装到本地仓库：</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/Maven-%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91-5.png" alt="Maven-分模块开发-5"></p></li></ul></li></ul><h2 id="二、依赖管理"><a href="#二、依赖管理" class="headerlink" title="二、依赖管理"></a>二、依赖管理</h2><ul><li>依赖：指当前项目运行所需要的<code>jar</code>包，一个项目可以设置多个依赖；</li></ul><h3 id="2-1-依赖传递"><a href="#2-1-依赖传递" class="headerlink" title="2.1 依赖传递"></a>2.1 依赖传递</h3><ul><li><p>依赖具有传递性：即项目A设置了依赖<code>demo1</code>，而依赖<code>demo1</code>同时需要依赖<code>demo2</code>，则项目A中可以直接使用依赖<code>demo2</code>，不用重新在<code>pom.xml</code>文件中设置依赖<code>demo2</code>；</p><ul><li>其中，依赖<code>demo1</code>称为项目A的<strong>直接依赖</strong>；</li><li>依赖<code>demo2</code>称为项目A的<strong>间接依赖</strong>；</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/Maven-%E4%BE%9D%E8%B5%96_1.png" alt="Maven-依赖_1"></p></li></ul><h3 id="2-2-可选依赖与排除依赖"><a href="#2-2-可选依赖与排除依赖" class="headerlink" title="2.2 可选依赖与排除依赖"></a>2.2 可选依赖与排除依赖</h3><ul><li><p>可选依赖：对外隐藏当前锁依赖的资源【<strong>隐藏自己设置的某些依赖</strong>】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分模块开发--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sea<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven_02_pojo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--可选依赖，该资源不在具有传递性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>排除依赖：主动断开依赖的资源，被排除的资源无需指定版本【<strong>去掉间接依赖中不需要的依赖</strong>】</p><ul><li><p>例如：需要排除工程<code>maven_02_pojo</code>中的<code>log4j</code>依赖：</p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/Maven-%E4%BE%9D%E8%B5%96_2.png" alt="Maven-依赖_2"></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分模块开发--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sea<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven_02_pojo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--排除依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="三、聚合与继承"><a href="#三、聚合与继承" class="headerlink" title="三、聚合与继承"></a>三、聚合与继承</h2><h3 id="3-1-聚合【快速构建】"><a href="#3-1-聚合【快速构建】" class="headerlink" title="3.1 聚合【快速构建】"></a>3.1 聚合【快速构建】</h3><ul><li><p>聚合：将<strong>多个模块[module]<strong>组织成</strong>一个整体</strong>，<strong>同时进行项目构建</strong>的过程称为聚合；</p></li><li><p>聚合工程：通常是一个不具有业务功能的”空“工程，有且仅有一个<code>pom.xml</code>文件；</p></li><li><p>聚合的作用：使用聚合工程可以将多个业务工程编组，通过聚合工程进行构建，实现多个模块同步构建；</p><ul><li>当工程中某个模块更新时，必须保障工程中与该更新模块关联的模块同步更新，此时使用聚合工程可以完成同步更新构建的操作；</li></ul></li><li><p>聚合工程开发步骤：</p><ul><li><p>步骤1：创建<code>Maven</code>模块，设置打包类型为<code>pom</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sea<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven_00_parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><span class="hljs-comment">&lt;!--聚合工程打包类型为pom，web工程打包类型为war，默认打包类型为jar--&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>步骤2：设置当前聚合工程所包含的子模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../maven_01_ssm<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../maven_02_pojo<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../maven_03_dao<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>此处书写顺序不代表模块的构建顺序，聚合工程在进行构建时，会<strong>根据模块之间的依赖关系进行依次构建</strong>；</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Maven-%E8%81%9A%E5%90%88%E5%B7%A5%E7%A8%8B%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4.png" alt="Maven-聚合工程开发步骤"></p></li></ul><h3 id="3-2-继承【配置管理】"><a href="#3-2-继承【配置管理】" class="headerlink" title="3.2 继承【配置管理】"></a>3.2 继承【配置管理】</h3><ul><li>继承：描述的是两个工程之间的关系【类似<code>Java</code>中的父类和子类】，子工程可以继承父类工程中的配置信息，一般是依赖关系的继承；</li><li>继承的作用：<ul><li>（1）简化工程的配置：父工程配置的依赖，子工程可以继承；</li><li>（2）减少版本冲突：子工程继承父工程的依赖，版本修改时只需要修改父工程的版本号，子工程自动同步修改；</li></ul></li></ul><h2 id="四、属性管理"><a href="#四、属性管理" class="headerlink" title="四、属性管理"></a>四、属性管理</h2><h3 id="4-1-属性"><a href="#4-1-属性" class="headerlink" title="4.1 属性"></a>4.1 属性</h3><ul><li><p>属性：相当于定义变量，集中统一设置和修改依赖版本；</p></li><li><p>一般使用步骤：</p><ul><li><p>步骤1：定义属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>步骤2：引用属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>分类：</p><ul><li>自定义属性：如上<code>$&#123;spring.version&#125;</code>;</li><li>内置属性：如<code>$&#123;project.basedir&#125;</code>表示当前项目[或module]的根目录；</li><li><code>Settings</code>属性：<code>$&#123;settings.localRepository&#125;</code>表示引用本地maven仓库中的依赖项以及构建产物的本地存储位置；</li><li><code>Java</code>系统属性</li><li>环境变量属性</li></ul></li></ul><h3 id="4-2-版本管理"><a href="#4-2-版本管理" class="headerlink" title="4.2 版本管理"></a>4.2 版本管理</h3><ul><li><p>工程版本：</p></li><li><p><code>SNAPSHOT</code>：快照版本</p><ul><li>项目开发过程中临时输出的版本；</li><li>随着开发过程不断更新；</li></ul></li><li><p><code>RELEASE</code>：发布版本</p><ul><li>项目开发进入阶段里程碑后，向团队外部发布较为稳定的版本；</li><li>此版本对应的构建文件是稳定的，即便进行后续的开发，也不会影响当前发布版本的内容；</li></ul></li><li><p>发布版本：</p><ul><li><p><code>alpha</code>版：内部测试版本</p></li><li><p><code>beta</code>版：公开测试版本</p></li><li><p>纯数字版：例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.33<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="五、多环境配置与应用"><a href="#五、多环境配置与应用" class="headerlink" title="五、多环境配置与应用"></a>五、多环境配置与应用</h2><ul><li><code>Maven</code>提供了配置多种环境的设定，可以快速切换环境；</li></ul><h3 id="5-1-多环境开发步骤"><a href="#5-1-多环境开发步骤" class="headerlink" title="5.1 多环境开发步骤"></a>5.1 多环境开发步骤</h3><ul><li><p><strong>步骤1：定义多环境</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sea<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven_00_parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--聚合工程管理的子模块--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../maven_01_ssm<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../maven_02_pojo<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../maven_03_dao<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--自定义参数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--依赖项配置坐标配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--可选依赖项配置，子工程可选择继承的依赖项--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--多环境配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--开发环境--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>env_dev<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.url</span>&gt;</span>jdbc:mysql://localhost:3306/springdb?useSSL=false<span class="hljs-symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.url</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-comment">&lt;!--设置为默认启动环境--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--生产环境--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>env_pro<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.url</span>&gt;</span>jdbc:mysql://192.106.3.1:3306/springdb?useSSL=false<span class="hljs-symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.url</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--测试环境--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>env_test<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.url</span>&gt;</span>jdbc:mysql://192.105.0.2:3306/springdb?useSSL=false<span class="hljs-symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.url</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>步骤2：使用多环境</strong></p><ul><li><p>通过maven指令进行构建，并指定构建环境，maven指令如下：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-comment">//指令格式</span><br><span class="hljs-keyword">mvn</span> 指令 -P 环境定义的id值<br><br><span class="hljs-comment">//案例：以测试环境构建工程</span><br><span class="hljs-keyword">mvn</span> install -P env_test<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="六、私服"><a href="#六、私服" class="headerlink" title="六、私服"></a>六、私服</h2><h3 id="6-1-私服简介"><a href="#6-1-私服简介" class="headerlink" title="6.1 私服简介"></a>6.1 私服简介</h3><ul><li>私服：一台独立的服务器，用于解决<strong>团队内部的资源共享与资源同步</strong>问题；【相当于在团队内部增加一台代替maven中央仓库的服务器】<ul><li>一方面，私服可以作为中央仓库的代理，第一次访问私服时没有该资源，私服会去中央仓库下载；<strong>【中央仓库代理】</strong></li><li>另一方面，私服可以共享已开发完成的服务接口的jar包供其他项目进行调用；<strong>【共享已开发完成的服务接口】</strong></li></ul></li></ul><h3 id="6-2-Nexus搭建私服仓库服务器"><a href="#6-2-Nexus搭建私服仓库服务器" class="headerlink" title="6.2 Nexus搭建私服仓库服务器"></a>6.2 Nexus搭建私服仓库服务器</h3><ul><li><p>Nexus：一个强大的、开箱即用的 Maven 仓库管理器，它极大地简化了本地内部仓库的维护和外部仓库的访问</p></li><li><p>Nexus下载安装:</p><ul><li><p>下载地址：<a href="https://help.sonatype.com/repomanager3/product-information/download/download-archives---repository-manager-3">Download Archives - Repository Manager 3 (sonatype.com)</a></p></li><li><p>下载完成后，进入<code>bin</code>目录下，打开终端执行命令<code>./nexus start</code>即可启动Nexus服务；</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Nexus-%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8.png" alt="Nexus-安装启动"></p></li><li><p>启动后，在浏览器输入<code>localhost:8081</code>访问该web服务器【Jetty是一个开源的Java HTTP服务器和Servlet容器，可以嵌入Java程序中而不需要独立安装和配置Web服务器，具有<strong>嵌入式和轻量级</strong>特点】：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Nexus-%E8%AE%BF%E9%97%AEweb%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="Nexus-访问web服务器"></p></li></ul></li></ul><h3 id="6-3-私服仓库分类"><a href="#6-3-私服仓库分类" class="headerlink" title="6.3 私服仓库分类"></a>6.3 私服仓库分类</h3><ul><li><p>私服仓库可分为以下三种：</p><table><thead><tr><th>类别</th><th>英文名称</th><th>功能</th><th>关联操作</th></tr></thead><tbody><tr><td>宿主仓库</td><td>hosted</td><td>保存自主研发的项目以及第三方资源</td><td>上传</td></tr><tr><td>代理仓库</td><td>proxy</td><td>代理链接中央仓库</td><td>下载</td></tr><tr><td>仓库组</td><td>group</td><td>为仓库编组，简化下载操作【所有的下载操作不需要指定仓库，而是向仓库组请求资源】</td><td>下载</td></tr></tbody></table></li><li><p>如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Maven-%E7%A7%81%E6%9C%8D%E4%BB%93%E5%BA%93%E5%88%86%E7%B1%BB_1.png" alt="Maven-私服仓库分类_1"></p></li></ul><h3 id="6-3-资源上传与下载"><a href="#6-3-资源上传与下载" class="headerlink" title="6.3 资源上传与下载"></a>6.3 资源上传与下载</h3><h4 id="6-3-1-私服仓库配置"><a href="#6-3-1-私服仓库配置" class="headerlink" title="6.3.1 私服仓库配置"></a>6.3.1 私服仓库配置</h4><ul><li><p>步骤1：新建两个私服仓库<code>sea-snapshot</code>和<code>sea-release</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Maven-%E5%BB%BA%E7%AB%8B%E7%A7%81%E6%9C%8D%E4%BB%93%E5%BA%93.png" alt="Maven-建立私服仓库"></p></li><li><p>步骤2：在本地maven仓库所在位置找到<code>settings.xml</code>文件，添加上述两个私服仓库配置：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Maven-%E7%A7%81%E6%9C%8D%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE.png" alt="Maven-私服仓库配置"></p></li></ul><h4 id="6-3-2-资源上传和下载"><a href="#6-3-2-资源上传和下载" class="headerlink" title="6.3.2 资源上传和下载"></a>6.3.2 资源上传和下载</h4><ul><li><p>步骤1：在工程的<code>pom.xml</code>文件中添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sea<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven_00_parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-comment">&lt;!--当前为snapshot版本，发布时会上传到私服仓库sea-snapshot--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--聚合工程管理的子模块--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../maven_01_ssm<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../maven_02_pojo<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../maven_03_dao<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--自定义参数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--依赖项配置坐标配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--可选依赖项配置，子工程可选择继承的依赖项--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--多环境配置--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置当前工程发布到私服的具体位置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>sea-release<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8081/repository/sea-release/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>sea-snapshot<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8081/repository/sea-snapshot/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>步骤2：点击Maven生命周期的<code>deploy</code>操作，将工程发布上传到私服仓库：</p><ul><li>第一次发布时，私服仓库会从maven中央下载相关资源；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Maven-%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%8D%E4%BB%93%E5%BA%93_1.png" alt="Maven-发布到私服仓库_1"></p></li><li><p>此时，私服仓库中的内容如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Maven-%E8%B5%84%E6%BA%90%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD.png" alt="Maven-资源上传和下载"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java开发框架学习</category>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-泛型</title>
    <link href="/2023/09/16/Java-%E6%B3%9B%E5%9E%8B/"/>
    <url>/2023/09/16/Java-%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-泛型"><a href="#Java-泛型" class="headerlink" title="Java-泛型"></a>Java-泛型</h1><h2 id="没有泛型时存在的问题"><a href="#没有泛型时存在的问题" class="headerlink" title="没有泛型时存在的问题"></a>没有泛型时存在的问题</h2><ul><li>1.不能对加入到集合（例如ArrayList）的数据类型进行约束，不安全。</li><li>2.遍历的时候，需要进行类型转换，如果集合中的数据量较大，对效率有影响。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">案例：没有泛型时存在的问题分析</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;...&#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;...&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;...&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;...&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;...&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;...&#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;...&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;...&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;...&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;...&#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic01</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 泛型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">arrayList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>));<br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>));<br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">3</span>));<br>        <br>        <span class="hljs-comment">//万一在添加Dog时，不小心添加了一个Cat；</span><br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-number">4</span>));<br><br>        <span class="hljs-keyword">for</span> (Object o : arrayList) &#123;<br>            <span class="hljs-type">Dog</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> (Dog) o;<span class="hljs-comment">//遍历时会报错，Cat 不能转为 Dog</span><br>            System.out.println(o1.getName() + <span class="hljs-string">&quot;-&quot;</span> + o1.getAge());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引入泛型的好处"><a href="#引入泛型的好处" class="headerlink" title="引入泛型的好处"></a>引入泛型的好处</h2><ul><li>1.编译时，检查添加元素的类型，提高了安全性；</li><li>2.减少了类型转换的效率，提高了效率；</li><li>3.不再提示编译警告；</li></ul><h2 id="泛型介绍"><a href="#泛型介绍" class="headerlink" title="泛型介绍"></a>泛型介绍</h2><ul><li>1.泛型又称参数化类型（我的理解是，泛型，generic，通用数据类型），jdk5.0后出现的新特性，解决数据类型的安全性问题；</li><li>2.在类声明或实例化时只要指定需要的数据类型即可；</li><li>3.Java泛型可以保证程序在编译时没有发出警告的话，运行时就不会产生ClassCastException异常，同时，使得代码简洁性和健壮性好；</li><li>4.泛型的作用：可以<strong>在类声明时</strong>通过一个标识表示<strong>类中某个属性的类型</strong>，或者是<strong>某个方法的返回值类型</strong>，或者是<strong>参数类型</strong>；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&lt;T&gt;&#123;<span class="hljs-comment">//泛型类型 T 是在定义Person对象时指定，即编译期间确定；</span><br>    T s;<span class="hljs-comment">//属性的类型</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(T s)</span> &#123;<span class="hljs-comment">//方法的参数</span><br>        <span class="hljs-built_in">this</span>.s = s;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//方法的返回值</span><br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Person&lt;String&gt; stringPerson = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>&lt;String&gt;(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-comment">//Person&lt;String&gt; stringPerson1 = new Person&lt;String&gt;(1);</span><br>        <span class="hljs-comment">//要求String，提供Integer，编译器直接报错</span><br><br>        Person&lt;Integer&gt; person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>&lt;Integer&gt;(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型语法"><a href="#泛型语法" class="headerlink" title="泛型语法"></a>泛型语法</h2><h3 id="泛型的声明和实例化"><a href="#泛型的声明和实例化" class="headerlink" title="泛型的声明和实例化"></a>泛型的声明和实例化</h3><ul><li><p>1.给泛型指定数据类型时，只能指定为引用类型；</p></li><li><p>2.给泛型指定数据类型后，可以指定为<strong>该类型</strong>或<strong>该类型的子类类型</strong>；</p></li><li><p>3.实际开发中会进行简写（编译器会自动进行类型推断）：</p><ul><li>如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;String, Student&lt;String, Integer&gt;&gt; hmap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Student&lt;String, Integer&gt;&gt;();<br></code></pre></td></tr></table></figure><ul><li>简写为：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;String, Student&lt;String, Integer&gt;&gt; hmap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><ul><li>如果这样写：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HashMap</span> <span class="hljs-variable">hmap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br></code></pre></td></tr></table></figure><ul><li>会默认泛型类型为Object类型：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;Object, Object&gt; hmap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure></li></ul><h3 id="具体案例"><a href="#具体案例" class="headerlink" title="具体案例"></a>具体案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//泛型声明语法</span><br><span class="hljs-comment">// T、K、V仅指代类型并且只能是引用类型，没有其他含义，任意字母都可以，常用T表示，是Type的缩写；</span><br>interface 接口名&lt;T&gt; &#123;&#125; <br><br>class 类名&lt;K, V&gt; &#123;&#125;<br><br><span class="hljs-comment">//例如：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&lt;K, V&gt;&#123;<span class="hljs-comment">//在定义Student对象时确定K,V的具体类型；</span><br>    K name;<br>    V age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(K name, V age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        HashMap&lt;String, Student&lt;String, Integer&gt;&gt; hmap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">//实例化HashMap对象时，指定key和value的具体类型；</span><br>        <span class="hljs-comment">//同时，也指定了Student&lt;K, V&gt;中K, V的具体类型；</span><br>        hmap.put(<span class="hljs-string">&quot;01&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>&lt;&gt;(<span class="hljs-string">&quot;01&quot;</span>, <span class="hljs-number">18</span>));<br>        hmap.put(<span class="hljs-string">&quot;02&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>&lt;&gt;(<span class="hljs-string">&quot;02&quot;</span>, <span class="hljs-number">18</span>));<br>        hmap.put(<span class="hljs-string">&quot;03&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>&lt;&gt;(<span class="hljs-string">&quot;03&quot;</span>, <span class="hljs-number">18</span>));<br><br>        <span class="hljs-comment">//两种遍历方式</span><br>        <span class="hljs-comment">//1.迭代器</span><br>        Iterator&lt;Map.Entry&lt;String, Student&lt;String, Integer&gt;&gt;&gt; iterator = hmap.entrySet().iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            Map.Entry&lt;String, Student&lt;String, Integer&gt;&gt; next = iterator.next();<br>            System.out.println(next.getKey() + <span class="hljs-string">&quot;--&quot;</span> + next.getValue());<br>        &#125;<br><span class="hljs-comment">//2.增强for</span><br>        Set&lt;String&gt; strings = hmap.keySet();<br>        <span class="hljs-keyword">for</span> (String o : strings) &#123;<br>            <span class="hljs-comment">//由于泛型指定了key的类型为String，因此此处可以直接用String而不是Object;</span><br>            <span class="hljs-comment">//因此，可以省去类型转换，提升效率；</span><br>            System.out.println(o + <span class="hljs-string">&quot;===&quot;</span> + hmap.get(o));<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h2><h3 id="自定义泛型-类"><a href="#自定义泛型-类" class="headerlink" title="自定义泛型 类"></a>自定义泛型 类</h3><ul><li>基本语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//T,R,...表示可以有多个，一般是单个大写字母</span><br>class 类名 &lt;T, R, ...&gt; &#123;<br>    成员;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意：<ul><li>1.普通成员可以使用泛型（包括属性、方法）；</li><li>2.使用泛型的<strong>数组，不能初始化</strong>；</li><li>3.静态方法中不能使用类的泛型；</li><li>4.泛型类 的类型，是在<strong>创建类的对象时</strong>确定的（若没有指定，则默认为Object）；</li></ul></li><li>案例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//案例：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tiger</span>&lt;T,R,M&gt;&#123;<span class="hljs-comment">//自定义泛型 类</span><br>    String name;<br>    T t;<span class="hljs-comment">//属性使用泛型</span><br>    R r;<br>    M m;<br>    <br><span class="hljs-comment">//    T[] ts = new T[8];//无法初始化，因为类型不确定，无法分配内存空间；</span><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">(M n)</span>&#123;<span class="hljs-comment">//M 处报错</span><br>        <span class="hljs-comment">//静态 方法或属性 都不能使用泛型:</span><br>        <span class="hljs-comment">//因为静态方法是在类加载时进行初始化，此时对象还没有创建；</span><br>        <span class="hljs-comment">//而泛型是在对象创建时指定类型，因此JVM无法完成初始化；</span><br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tiger</span><span class="hljs-params">(String name, T t, R r, M m)</span> &#123;<span class="hljs-comment">//构造器使用泛型</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.t = t;<br>        <span class="hljs-built_in">this</span>.r = r;<br>        <span class="hljs-built_in">this</span>.m = m;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getT</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//方法的返回类型使用泛型</span><br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setT</span><span class="hljs-params">(T t)</span> &#123;<span class="hljs-comment">//方法使用泛型</span><br>        <span class="hljs-built_in">this</span>.t = t;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Tiger&lt;String, Integer, Boolean&gt; stringIntegerBooleanTiger = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tiger</span>&lt;&gt;(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-number">1</span>,<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义泛型-接口"><a href="#自定义泛型-接口" class="headerlink" title="自定义泛型 接口"></a>自定义泛型 接口</h3><ul><li>基本语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">interface 接口名 &lt;T, R, ...&gt; &#123;<br> 成员；   <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意：<ul><li>1.接口中，静态成员也不能使用泛型；</li><li>2.泛型接口的类型，在<strong>继承接口</strong>或者<strong>实现接口</strong>时确定；</li><li>3.没有指定类型时，默认为Object；</li></ul></li><li>案例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IU</span>&lt;U, R&gt;&#123;<br>    <span class="hljs-comment">//1.静态成员不能使用泛型</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">// &lt;==&gt; public static final int n = 10;</span><br><br>    R <span class="hljs-title function_">get</span><span class="hljs-params">(U u)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(R r)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(R r1, R r2, U u1, U u2)</span>;<br><br>    <span class="hljs-comment">//在JDK8中，可以在接口中，使用默认方法，也是可以使用泛型</span><br>    <span class="hljs-keyword">default</span> R <span class="hljs-title function_">method</span><span class="hljs-params">(U u)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IU</span>&lt;String, Double&gt;&#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span>&#123;<span class="hljs-comment">//2.1 继承接口时指定泛型具体的类型</span><br><br>    <span class="hljs-comment">//IA接口继承IU接口时已经指定了泛型的类型，</span><br>    <span class="hljs-comment">// 因此，A类在实现IA接口的抽象方法时，自动将泛型替换为具体的类型</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">get</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(Double aDouble)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(Double r1, Double r2, String u1, String u2)</span> &#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IU</span>&lt;String, Double&gt;&#123;<span class="hljs-comment">//2.2 实现接口时指定泛型具体的类型</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">get</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(Double aDouble)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(Double r1, Double r2, String u1, String u2)</span> &#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IU</span>&lt;Object, Object&gt;&#123;<span class="hljs-comment">//3.未指定时，默认为Object类型；建议写上Object</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(Object o)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(Object r1, Object r2, Object u1, Object u2)</span> &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="自定义泛型-方法"><a href="#自定义泛型-方法" class="headerlink" title="自定义泛型 方法"></a>自定义泛型 方法</h3><ul><li>基本语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 &lt;T, R, ...&gt; 返回类型 方法名(参数列表)&#123;<br>方法体；<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意：<ul><li>1.泛型方法可以定义在普通类中，也可以定义在泛型类中；</li><li>2.当泛型方法被调用时，类型也会被确定；</li><li><ol start="3"><li></li></ol></li></ul></li><li>案例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>&#123;<span class="hljs-comment">//普通类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//普通方法</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;T, R&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">(T t, R r)</span>&#123;<span class="hljs-comment">//泛型方法</span><br>        System.out.println(t.getClass());<br>        System.out.println(r.getClass());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fish</span>&lt;E&gt;&#123;<span class="hljs-comment">//泛型类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//普通方法</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;U, M&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(U u, M m, E e)</span>&#123;<span class="hljs-comment">//泛型方法</span><br>        <span class="hljs-comment">//可以使用泛型类声明的泛型（E），也可以使用自己声明的泛型(U, M);</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(E e)</span>&#123;<span class="hljs-comment">//使用泛型的方法，但不是泛型方法；</span><br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic_funtion01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br>        car.fly(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">//指定泛型T,R的具体类型，其中整数1会自动装箱为Integer;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型的继承和同配符"><a href="#泛型的继承和同配符" class="headerlink" title="泛型的继承和同配符"></a>泛型的继承和同配符</h2><ul><li><p>1.泛型不具备继承性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-comment">//编译器报错</span><br></code></pre></td></tr></table></figure></li><li><p>2.&lt;?&gt; : 表示支持任意泛型类型；</p></li><li><p>3.&lt;? extend A&gt; : 表示支持A类以及A类的子类，规定了泛型的上限；</p></li><li><p>4.&lt;? super A&gt; : 表示支持A类以及A类的父类，且不限于直接弗父类，规定了泛型的下限；</p></li><li><p>5.案例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic_Inheritance01</span> &#123;<br>    <span class="hljs-comment">//List&lt;?&gt; 表示可以接收任意类型的List；</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollection1</span><span class="hljs-params">(List&lt;?&gt; list)</span>&#123;<br>        <span class="hljs-keyword">for</span> (Object o : list) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//? extend A 表示可以接收类型的上限，可接受类型为 A类或A类的子类；</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollection2</span><span class="hljs-params">(List&lt;? extends A&gt; list)</span>&#123;<br>        <span class="hljs-keyword">for</span> (Object o : list) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//? super A 表示可以接收类型的下限，可接受类型为 A类或A类的父类；</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollection3</span><span class="hljs-params">(List&lt;? <span class="hljs-built_in">super</span> A&gt; list)</span>&#123;<br>        <span class="hljs-keyword">for</span> (Object o : list) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;1&quot;</span>);<br><br>        <span class="hljs-comment">//List&lt;Object&gt; list = new ArrayList&lt;String&gt;();//报错，泛型不具备继承性</span><br><br>        ArrayList&lt;Object&gt; objects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;A&gt; as = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;B&gt; bs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;C&gt; cs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <br>        printCollection1(objects);<br>        printCollection1(strings);<br>        printCollection1(as);<br>        printCollection1(bs);<br>        printCollection1(cs);<br>        <br>        printCollection2(objects);<span class="hljs-comment">//</span><br>        printCollection2(strings);<span class="hljs-comment">//报错，不是A类或A类的主类</span><br>        printCollection2(as);<br>        printCollection2(bs);<br>        printCollection2(cs);<br><br>        printCollection3(objects);<span class="hljs-comment">//Object是A类的父类，可以传过去</span><br>        printCollection3(strings);<span class="hljs-comment">//</span><br>        printCollection3(as);<br>        printCollection3(bs);<span class="hljs-comment">//</span><br>        printCollection3(cs);<span class="hljs-comment">//报错，不是A类或A类的父类</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>泛型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>泛型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-集合练习题（HashSet添加机制）</title>
    <link href="/2023/09/16/Java-%E9%9B%86%E5%90%88%E7%BB%83%E4%B9%A0%E9%A2%98%EF%BC%88HashSet%E6%B7%BB%E5%8A%A0%E6%9C%BA%E5%88%B6%EF%BC%89/"/>
    <url>/2023/09/16/Java-%E9%9B%86%E5%90%88%E7%BB%83%E4%B9%A0%E9%A2%98%EF%BC%88HashSet%E6%B7%BB%E5%8A%A0%E6%9C%BA%E5%88%B6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-集合练习题（HashSet添加机制）"><a href="#Java-集合练习题（HashSet添加机制）" class="headerlink" title="Java-集合练习题（HashSet添加机制）"></a>Java-集合练习题（HashSet添加机制）</h1><ul><li>韩顺平Java视频中的练习题，坑挺多的，mark一下；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><br>    <span class="hljs-type">int</span> id;<br>    String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">//根据id和name属性重写了hashCode()和equals()</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) o;<br>        <span class="hljs-keyword">return</span> id == person.id &amp;&amp; Objects.equals(name, person.name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(id, name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">practices06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;AA&quot;</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1002</span>, <span class="hljs-string">&quot;BB&quot;</span>);<br>        set.add(p1);<br>        set.add(p2);<br>        <span class="hljs-comment">//此时，set中有两个元素：</span><br>        <span class="hljs-comment">//1.索引hashCode(1001, &quot;AA&quot;)====&gt;p1&#123;1001, &quot;AA&quot;&#125;;</span><br>        <span class="hljs-comment">//2.索引hashCode(1002, &quot;BB&quot;)====&gt;p2&#123;1002, &quot;BB&quot;&#125;;</span><br>        p1.name = <span class="hljs-string">&quot;CC&quot;</span>;<br>        <span class="hljs-comment">//此时，set中的两个元素为：</span><br>        <span class="hljs-comment">//1.索引hashCode(1001, &quot;AA&quot;)====&gt;p1&#123;1001, &quot;CC&quot;&#125;;</span><br>        <span class="hljs-comment">//2.索引hashCode(1002, &quot;BB&quot;)====&gt;p2&#123;1002, &quot;BB&quot;&#125;;</span><br><br>        set.remove(p1);<br>        <span class="hljs-comment">//由于remove()方法删除时，是删除set中索引为hashCode(1001, &quot;CC&quot;)处的元素，由于该处没有元素，remove()没有删除任何元素；</span><br><br>        System.out.println(set);<br>        <span class="hljs-comment">//打印set中的两个元素：</span><br>        <span class="hljs-comment">//1.索引hashCode(1001, &quot;AA&quot;)====&gt;p1&#123;1001, &quot;CC&quot;&#125;;</span><br>        <span class="hljs-comment">//2.索引hashCode(1002, &quot;BB&quot;)====&gt;p2&#123;1002, &quot;BB&quot;&#125;;</span><br><br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;CC&quot;</span>));<br>        <span class="hljs-comment">//此时，set中的三个元素为：</span><br>        <span class="hljs-comment">//1.索引hashCode(1001, &quot;AA&quot;)====&gt;p1&#123;1001, &quot;CC&quot;&#125;;</span><br>        <span class="hljs-comment">//2.索引hashCode(1002, &quot;BB&quot;)====&gt;p2&#123;1002, &quot;BB&quot;&#125;;</span><br>        <span class="hljs-comment">//3.索引hashCode(1001, &quot;CC&quot;)====&gt;&#123;1001, &quot;CC&quot;&#125;;</span><br><br>        System.out.println(set);<br>        <span class="hljs-comment">//打印set中的三个元素：</span><br>        <span class="hljs-comment">//1.索引hashCode(1001, &quot;AA&quot;)====&gt;p1&#123;1001, &quot;CC&quot;&#125;;</span><br>        <span class="hljs-comment">//2.索引hashCode(1002, &quot;BB&quot;)====&gt;p2&#123;1002, &quot;BB&quot;&#125;;</span><br>        <span class="hljs-comment">//3.索引hashCode(1001, &quot;CC&quot;)====&gt;&#123;1001, &quot;CC&quot;&#125;;</span><br>        <br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;AA&quot;</span>));<br><span class="hljs-comment">//此时，set中的四个元素为：</span><br>        <span class="hljs-comment">//1.索引hashCode(1001, &quot;AA&quot;)====&gt;p1&#123;1001, &quot;CC&quot;&#125; ====&gt;&#123;1001, &quot;AA&quot;&#125;;</span><br>        <span class="hljs-comment">//2.索引hashCode(1002, &quot;BB&quot;)====&gt;p2&#123;1002, &quot;BB&quot;&#125;;</span><br>        <span class="hljs-comment">//3.索引hashCode(1001, &quot;CC&quot;)====&gt;&#123;1001, &quot;CC&quot;&#125;;</span><br>        <br>        System.out.println(set);<br>        <span class="hljs-comment">//打印set中的四个元素为：</span><br>        <span class="hljs-comment">//1.索引hashCode(1001, &quot;AA&quot;)====&gt;p1&#123;1001, &quot;CC&quot;&#125; ====&gt;&#123;1001, &quot;AA&quot;&#125;;</span><br>        <span class="hljs-comment">//2.索引hashCode(1002, &quot;BB&quot;)====&gt;p2&#123;1002, &quot;BB&quot;&#125;;</span><br>        <span class="hljs-comment">//3.索引hashCode(1001, &quot;CC&quot;)====&gt;&#123;1001, &quot;CC&quot;&#125;;</span><br>        <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>集合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-反射机制的引入</title>
    <link href="/2023/09/16/Java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BC%95%E5%85%A5/"/>
    <url>/2023/09/16/Java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BC%95%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-反射机制的引入"><a href="#Java-反射机制的引入" class="headerlink" title="Java-反射机制的引入"></a>Java-反射机制的引入</h1><h2 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h2><ul><li>需求：根据配置文件中指定的信息，创建<code>Cat</code>类对象并调用方法<code>hi()</code>；<ul><li>事先并不知道配置文件中：1.需要创建对象的具体类型（Cat、Dog等）；2.需要调用的方法名称（hi）；</li></ul></li></ul><h3 id="1-1-Cat类"><a href="#1-1-Cat类" class="headerlink" title="1.1 Cat类"></a>1.1 Cat类</h3><ul><li>Cat类的定义如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/23 16:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hihihi&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;miamiamia&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-re-properties配置文件"><a href="#1-2-re-properties配置文件" class="headerlink" title="1.2 re.properties配置文件"></a>1.2 re.properties配置文件</h3><ul><li><code>re.properties</code>配置文件的内容如下：</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">classfullpath</span>=<span class="hljs-string">hsp_ch23.Reflection_.Cat</span><br><span class="hljs-attr">method</span>=<span class="hljs-string">hi</span><br></code></pre></td></tr></table></figure><h2 id="二、引入反射机制"><a href="#二、引入反射机制" class="headerlink" title="二、引入反射机制"></a>二、引入反射机制</h2><h3 id="2-1-尝试"><a href="#2-1-尝试" class="headerlink" title="2.1 尝试"></a>2.1 尝试</h3><ul><li>1.通过<code>Properties</code>类能够读取到配置文件中的信息：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/23 16:35</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection_01_import</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;<br>        <span class="hljs-comment">//需求：根据配置文件中指定的信息，创建Cat类对象并调用方法hi；</span><br><br>        <span class="hljs-comment">//1.正常的创建Cat对象的方法</span><br><span class="hljs-comment">//        Cat cat = new Cat();</span><br><span class="hljs-comment">//        cat.hi();</span><br><br>        <span class="hljs-comment">//2.从配置文件中读取信息，然后根据读取的信息创建对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch23/re.properties&quot;</span>;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">classFullPath</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;classfullpath&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;method&quot;</span>);<br>        <span class="hljs-comment">//可以从文件中读取到 类的路径 和 方法名称，但是如果不使用反射机制的话，无法通过路径创建类的对象</span><br>        System.out.println(<span class="hljs-string">&quot;classfullpath=&quot;</span> + classFullPath + <span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;method=&quot;</span> + method);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到的输出结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Java_%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%BC%95%E5%85%A5_2.png" alt="Java_反射机制引入_2"></p><ul><li>2.但是，配置文件中读取到的值是字符串类型，并不能直接创建对应的类对象，应该如何解决呢？</li></ul><h3 id="2-2-引入反射机制"><a href="#2-2-引入反射机制" class="headerlink" title="2.2 引入反射机制"></a>2.2 引入反射机制</h3><ul><li>接着上面，引入反射机制，本文先直接用，下一篇详细梳理反射机制的概念和原理。</li></ul><h4 id="2-2-1-通过-类的完整路径-得到-该类的Class对象"><a href="#2-2-1-通过-类的完整路径-得到-该类的Class对象" class="headerlink" title="2.2.1 通过 类的完整路径 得到 该类的Class对象"></a>2.2.1 通过 类的完整路径 得到 该类的Class对象</h4><ul><li>通过<code>Class</code>类的静态方法<code>forName()</code>加载路径对应的类，并返回该类的<code>Class</code>对象，如下代码所示：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//(1) 通过 类的路径 加载 类，返回的是Class类型的对象aClass</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(classFullPath);<br></code></pre></td></tr></table></figure><ul><li>解释：<ul><li><code>Class</code> 是Java中的一个<strong>内置类</strong>，它表示类的元数据，可以用来获取和操作类的相关信息。</li><li><code>forName</code> 是Class类的一个<strong>静态方法</strong>，用于根据给定的类的全路径名加载并返回对应的Class对象。它接受一个字符串参数，即类的全路径名。<ul><li>一个类，加载完成后，只会在堆中产生一个Class对象，该对象包含了该类的完整结构信息。</li></ul></li></ul></li></ul><h4 id="2-2-2-通过-Class对象-获取-该类的对象示例"><a href="#2-2-2-通过-Class对象-获取-该类的对象示例" class="headerlink" title="2.2.2 通过 Class对象 获取 该类的对象示例"></a>2.2.2 通过 Class对象 获取 该类的对象示例</h4><ul><li>通过<code>aClass</code>对象获取该类（<code>hsp_ch23.Reflection_.Cat</code>）的对象实例，如下代码所示：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//(2) 通过 aClass 得到 加载的类（hsp_ch23.Reflection_.Cat）的对象实例</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aClass.newInstance();<br>System.out.println(<span class="hljs-string">&quot;对象实例 o 的运行类型：&quot;</span> + aClass.newInstance().getClass());<br></code></pre></td></tr></table></figure><ul><li><code>newInstance()</code> 是<code>Class</code>类的一个方法，用于通过默认的无参构造函数创建一个该类的实例对象。该方法返回一个<code>Object</code>类型的实例；<ul><li>注意：使用这个方法获取类的对象实例时，需要保证该类拥有默认的无参构造方法。</li></ul></li><li>这里可以打印一下返回的Object类型的对象实例的运行类型，发现是Cat类型。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Java_%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BC%95%E5%85%A5_3.png" alt="Java_反射机制的引入_3"></p><h4 id="2-2-3-通过-Class对象-根据-给定的方法名称-获取-该类中的方法对象"><a href="#2-2-3-通过-Class对象-根据-给定的方法名称-获取-该类中的方法对象" class="headerlink" title="2.2.3 通过 Class对象 根据 给定的方法名称 获取 该类中的方法对象"></a>2.2.3 通过 Class对象 根据 给定的方法名称 获取 该类中的方法对象</h4><ul><li>通过 Class对象 根据 给定的方法名称 获取 该类中制定方法名称的Method对象；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//(3) 通过 aClass 可以获取到 加载的类（hsp_ch23.Reflection_.Cat）中名称为 读取到的method值 的方法对象（Method类的对象）</span><br><span class="hljs-comment">//        即：在反射中，方法也视为一个对象</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> aClass.getMethod(method);<br></code></pre></td></tr></table></figure><ul><li><code>getMethod(method)</code> 是<code>Class</code>类中的一个方法，用于根据<strong>给定的方法名</strong>获取指定类中对应的公共方法。它接受一个字符串参数，即方法名，返回该方法的Method对象。<ul><li>注意：使用这个方法获取类的方法时，需要保证该方法是公共可以访问的。</li></ul></li></ul><h4 id="2-2-4-通过反射机制调用指定对象的指定方法"><a href="#2-2-4-通过反射机制调用指定对象的指定方法" class="headerlink" title="2.2.4 通过反射机制调用指定对象的指定方法"></a>2.2.4 通过反射机制调用指定对象的指定方法</h4><ul><li>通过反射机制，调用了<strong>指定对象</strong>（即 o ）的<strong>指定方法</strong>（当前指定的是hi()方法），并根据该方法的定义执行相应的操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//(4) 通过 method1 来实现方法的调用</span><br>method1.invoke(o);<span class="hljs-comment">//此处，有点绕，传统方式：通过 对象示例 调用 类的方法。 此处：方法.invoke(对象)；</span><br></code></pre></td></tr></table></figure><ul><li><code>invoke()</code> 是<code>Method</code>类的一个方法，用于通过反射调用方法。它接受一个对象参数（即 o ），表示要调用方法的对象，以及可选的方法参数。</li></ul><h3 id="2-3-完整实现"><a href="#2-3-完整实现" class="headerlink" title="2.3 完整实现"></a>2.3 完整实现</h3><h4 id="2-3-1-实现代码"><a href="#2-3-1-实现代码" class="headerlink" title="2.3.1 实现代码"></a>2.3.1 实现代码</h4><ul><li>如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/23 16:35</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection_01_import</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;<br>        <span class="hljs-comment">//需求：根据配置文件中指定的信息，创建Cat类对象并调用方法hi；</span><br><br>        <span class="hljs-comment">//1.正常的创建Cat对象的方法</span><br><span class="hljs-comment">//        Cat cat = new Cat();</span><br><span class="hljs-comment">//        cat.hi();</span><br><br>        <span class="hljs-comment">//2.从配置文件中读取信息，然后根据读取的信息创建对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch23/re.properties&quot;</span>;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">classFullPath</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;classfullpath&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;method&quot;</span>);<br>        <span class="hljs-comment">//可以从文件中读取到 类的路径 和 方法名称，但是如果不使用反射机制的话，无法通过路径创建类的对象</span><br>        System.out.println(<span class="hljs-string">&quot;classfullpath=&quot;</span> + classFullPath + <span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;method=&quot;</span> + method);<br><br>        <span class="hljs-comment">//3.使用反射机制，解决上述问题</span><br><br>        <span class="hljs-comment">//(1) 通过 类的路径 加载 类，返回的是Class类型的对象aClass</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(classFullPath);<br><br>        <span class="hljs-comment">//(2) 通过 aClass 得到 加载的类（hsp_ch23.Reflection_.Cat）的对象实例</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aClass.newInstance();<br>        System.out.println(<span class="hljs-string">&quot;对象实例 o 的运行类型：&quot;</span> + aClass.newInstance().getClass());<br><br>        <span class="hljs-comment">//(3) 通过 aClass 可以获取到 加载的类（hsp_ch23.Reflection_.Cat）中名称为 读取到的method值 的方法对象（Method类的对象）</span><br>        <span class="hljs-comment">//        即：在反射中，方法也视为一个对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> aClass.getMethod(method);<br><br>        <span class="hljs-comment">//(4) 通过 method1 来实现方法的调用</span><br>        method1.invoke(o);<span class="hljs-comment">//此处，有点绕，传统方式：通过 对象示例 调用 类的方法。 此处：方法.invoke(对象)；</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-2-体会反射机制的优点"><a href="#2-3-2-体会反射机制的优点" class="headerlink" title="2.3.2 体会反射机制的优点"></a>2.3.2 体会反射机制的优点</h4><ul><li>对比：</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>若功能改为需要调用Cat类的cry方法：<br><span class="hljs-regexp">//</span>引入反射机制前：<br><span class="hljs-regexp">//</span> 需要修改源码：cat.hi()  ==&gt; cat.cry;<br><br><span class="hljs-regexp">//</span>引入反射机制后：<br><span class="hljs-regexp">//</span>只需修改配置文件中的method的值：method=hi ==&gt; method=cry<br><br><span class="hljs-regexp">//</span>满足了开闭原则：对拓展开放，对修改关闭。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>反射机制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>反射机制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-反射机制总结</title>
    <link href="/2023/09/16/Java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93/"/>
    <url>/2023/09/16/Java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-反射机制总结"><a href="#Java-反射机制总结" class="headerlink" title="Java-反射机制总结"></a>Java-反射机制总结</h1><h2 id="一、反射机制"><a href="#一、反射机制" class="headerlink" title="一、反射机制"></a>一、反射机制</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">反射机制是指在运行时动态地获取和操作类的信息、对象的属性和方法的能力。通过反射，可以在编译时无法确定的情况下，通过获取类的元数据信息，实现对类、对象、方法的检查、调用和操作。<br></code></pre></td></tr></table></figure><ul><li><p>理解：</p><ul><li><p>反射机制允许：程序在执行期间借助于Reflection API取得任何类的内部信息（比如成员变量，构造方法，成员方法等的），并且能够操作对象的属性及方法。【在 设计模式 和 框架的底层 常用】</p></li><li><p>类加载完后，在堆中产生一个Class类型的对象（一个类仅产生一个Class对象），这个Class类型的对象包含了类的完整结构信息。</p></li><li><p>通过这个Class类型的对象，可以得到类的结构以及各种类的信息，因此，Class对象就像一面镜子，透过镜子可以看到类的结构，所以形象地成为反射。</p></li></ul></li></ul><h3 id="1-2-反射机制原理图"><a href="#1-2-反射机制原理图" class="headerlink" title="1.2 反射机制原理图"></a>1.2 反射机制原理图</h3><ul><li><p>回顾Java程序运行过程：</p><ul><li>1.编码：编写源代码（.java文件）</li><li>2.编译：通过<strong>编译器</strong>（javac）编译成字节码（.class文件）</li><li>3.类加载器加载：Java虚拟机（JVM）的<strong>类加载器</strong>将字节码文件（.class）加载到内存中；</li><li>4.字节码验证：如结构，语义，类型等验证；</li><li>5.执行：Java虚拟机解释字节码指令进行执行；</li></ul></li><li><p>以”反射机制引入”中的需求为例，绘制反射机制原理图如下:</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="反射机制原理图"></p><h2 id="二、反射机制相关的类"><a href="#二、反射机制相关的类" class="headerlink" title="二、反射机制相关的类"></a>二、反射机制相关的类</h2><ul><li>主要的类如下：</li></ul><table><thead><tr><th>类名</th><th>所在包名</th><th>描述</th></tr></thead><tbody><tr><td>Class</td><td>java.lang.Class</td><td>代表一个类，Class对象表示某个类加载后在堆中的对象</td></tr><tr><td>Method</td><td>java.lang.reflection.Method</td><td>代表类的方法</td></tr><tr><td>Field</td><td>java.lang.reflect.Field</td><td>代表类的成员变量</td></tr><tr><td>Constructor</td><td>java.lang.reflect.Constructor</td><td>代表类的构造方法</td></tr></tbody></table><h3 id="2-1-相关类的用法"><a href="#2-1-相关类的用法" class="headerlink" title="2.1 相关类的用法"></a>2.1 相关类的用法</h3><ul><li><p>通过反射获取类的成员变量：</p><ul><li>自定义的Cat类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/23 16:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hihihi&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;miamiamia&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>用法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/29 09:22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection_02_Field_Constructor</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch23/re.properties&quot;</span>;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">classFullPath</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;classfullpath&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;method&quot;</span>);<br>        <span class="hljs-comment">//可以从文件中读取到 类的路径 和 方法名称，但是如果不使用反射机制的话，无法通过路径创建类的对象</span><br>        System.out.println(<span class="hljs-string">&quot;classfullpath=&quot;</span> + classFullPath + <span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;method=&quot;</span> + method);<br><br>        <span class="hljs-comment">//(1) 通过 类的路径 加载 类，返回的是Class类型的对象aClass</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(classFullPath);<br><br>        <span class="hljs-comment">//(2) 通过 aClass 得到 加载的类（hsp_ch23.Reflection_.Cat）的对象实例</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aClass.newInstance();<br>        System.out.println(<span class="hljs-string">&quot;对象实例 o 的运行类型：&quot;</span> + aClass.newInstance().getClass());<br>      <br>      <span class="hljs-comment">//(3) 通过 aClass 可以获取到 加载的类（hsp_ch23.Reflection_.Cat）中名称为 读取到的method值 的方法对象（Method类的对象）</span><br>        <span class="hljs-comment">// 即：在反射中，方法也视为一个对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> aClass.getMethod(method);<br><br>        <span class="hljs-comment">//(4) 通过 method1 来实现方法的调用</span><br>        method1.invoke(o);<span class="hljs-comment">//此处，有点绕，传统方式：通过 对象示例 调用 类的方法【o.method1()】。 此处：方法.invoke(对象)；</span><br>        <br>      <br>        <span class="hljs-comment">//获取类的成员变量（Field对象）</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> aClass.getField(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(name.get(o));<span class="hljs-comment">// ==&gt; o.name</span><br>      <br>      <span class="hljs-type">Field</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> aClass.getField(<span class="hljs-string">&quot;age&quot;</span>);<br>        System.out.println(age.get(o));<br>      <br>        <span class="hljs-comment">//获取构造器</span><br>        <span class="hljs-comment">// (1)无参构造器</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor1</span> <span class="hljs-operator">=</span> aClass.getConstructor();<br>        System.out.println(constructor1);<br>        <span class="hljs-comment">// (2)带参构造器</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor2</span> <span class="hljs-operator">=</span> aClass.getConstructor(String.class);<br>        System.out.println(constructor2);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>获取成员变量name时会报错，原因：name字段为私有成员变量，不能获取类的私有变量；、<ul><li>通过<code>setAccessible()</code>方法，传入true，使得可以通过反射来操作私有变量；</li></ul></li></ul></li><li><p>反射机制相对于传统方式效率比较低，原因：反射机制涉及到一些权限检查等步骤。</p></li></ul><h3 id="2-2-哪些类型有Class对象"><a href="#2-2-哪些类型有Class对象" class="headerlink" title="2.2 哪些类型有Class对象"></a>2.2 哪些类型有Class对象</h3><ul><li>如下类型有Class对象：<ul><li>外部类</li><li>内部类（局部内部类、匿名内部类、成员内部类、静态内部类）</li><li>接口：Interface</li><li>数组：[]、[][]</li><li>枚举类型：Enum</li><li>注解：Annotation</li><li>基本数据类型</li><li>void</li></ul></li></ul><h2 id="三、类加载阶段"><a href="#三、类加载阶段" class="headerlink" title="三、类加载阶段"></a>三、类加载阶段</h2>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>反射机制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>反射机制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-String类常用方法源码分析</title>
    <link href="/2023/09/16/Java-String%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2023/09/16/Java-String%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-String类常用方法源码分析"><a href="#Java-String类常用方法源码分析" class="headerlink" title="Java-String类常用方法源码分析"></a>Java-String类常用方法源码分析</h1><h2 id="一、常用方法概述"><a href="#一、常用方法概述" class="headerlink" title="一、常用方法概述"></a>一、常用方法概述</h2><ul><li><p>在刷LeetCode过程中，涉及字符串的操作时，发现自己经常这样想：jdk里边会不会有这个功能了，找找看吧！</p></li><li><p>在开发过程中这样想当然没有大问题，因为一般情况下，jdk实现的操作肯定比我自己写的代码会简洁高效的；</p></li><li><p>但是在刷题的过程中，总是想着调用jdk已经实现的方法，存在一个问题：当你写完一个算法题后，让你分析你写的代码，时间复杂度怎么样？是否开辟了额外的空间？</p></li><li><p>因此，在刷题过程中，尽量避免在核心部分直接调用jdk已经实现的方法，除非已经了解了该方法的实现。</p></li><li><p>常用方法：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>equals(String)</td><td>比较两个字符串内容是否相同</td></tr><tr><td>compareTo(String)</td><td>比较两个字符串的大小（ASCII码&#x2F;Unicode码）</td></tr><tr><td>indexOf(int)</td><td>字符串中第一次出现<strong>某个字符</strong>的位置（没有返回-1）</td></tr><tr><td>indexOf(String)</td><td>字符串中第一次出现<strong>某字符串</strong>的位置（没有返回-1）</td></tr><tr><td>replace(char, char)</td><td>将字符串中所有的字符A替换成字符B</td></tr><tr><td>split(String)</td><td>以某字符串作为分隔符，分隔字符串，返回分割后的字符串数组</td></tr></tbody></table></li></ul><h2 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h2><h3 id="2-1-equals-String-方法"><a href="#2-1-equals-String-方法" class="headerlink" title="2.1 equals(String)方法"></a>2.1 equals(String)方法</h3><ul><li><p>功能：比较两个字符串内容是否相同</p></li><li><p>JDK源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object anObject)</span> &#123;<br>    <span class="hljs-comment">//1.判断两个要比较对象的地址是否一致，如果一致则肯定相同</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == anObject) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">//2.地址不一致，判断要比较的对象anObject是否为String类型的对象</span><br>    <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;<br>        <span class="hljs-comment">//(1)将Object类型的对象转换为String对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">anotherString</span> <span class="hljs-operator">=</span> (String)anObject;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> value.length;<br>        <span class="hljs-comment">//(2)判断两个字符串长度是否相同</span><br>        <span class="hljs-keyword">if</span> (n == anotherString.value.length) &#123;<br>            <span class="hljs-type">char</span> v1[] = value;<br>            <span class="hljs-type">char</span> v2[] = anotherString.value;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-comment">//(3)对两个String对象逐个字符进行比较</span><br>            <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (v1[i] != v2[i])<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//3.要比较的对象anObject不是String类型的对象，则直接返回false</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>时间复杂度：</p><ul><li>主要的时间开销在<code>while</code>循环逐个字符比较 &#x3D;&#x3D;&gt; O(n)</li></ul></li><li><p>空间复杂度：</p><ul><li>开辟了两个字符数组 &#x3D;&#x3D;&gt; O(n)</li></ul></li></ul><h3 id="2-2-compareTo-String-方法"><a href="#2-2-compareTo-String-方法" class="headerlink" title="2.2 compareTo(String)方法"></a>2.2 compareTo(String)方法</h3><ul><li><p>功能：比较两个字符串的大小（ASCII码&#x2F;Unicode码）</p></li><li><p>JDK源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(String anotherString)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len1</span> <span class="hljs-operator">=</span> value.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len2</span> <span class="hljs-operator">=</span> anotherString.value.length;<br>    <span class="hljs-comment">//1.只需要比较到较短字符串的最后一个字符即可判断大小</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">lim</span> <span class="hljs-operator">=</span> Math.min(len1, len2);<br>    <span class="hljs-comment">//2.获取两个字符串对象的字符数组</span><br>    <span class="hljs-type">char</span> v1[] = value;<br>    <span class="hljs-type">char</span> v2[] = anotherString.value;<br><span class="hljs-comment">//3.逐个字符进行比较</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (k &lt; lim) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> v1[k];<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> v2[k];<br>        <span class="hljs-keyword">if</span> (c1 != c2) &#123;<br>            <span class="hljs-keyword">return</span> c1 - c2;<br>        &#125;<br>        k++;<br>    &#125;<br>  <span class="hljs-comment">//4.前面的字符都相等的情况，字符串长的大</span><br>    <span class="hljs-keyword">return</span> len1 - len2;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>时间复杂度：</p><ul><li>主要的时间开销在<code>while</code>循环逐个字符比较 &#x3D;&#x3D;&gt; O(n)</li></ul></li><li><p>空间复杂度：</p><ul><li>开辟了两个字符数组 &#x3D;&#x3D;&gt; O(n)</li></ul></li></ul><h3 id="2-3-indexOf-int-方法"><a href="#2-3-indexOf-int-方法" class="headerlink" title="2.3 indexOf(int)方法"></a>2.3 indexOf(int)方法</h3><p>- </p><h3 id="2-4-indexOf-String-方法"><a href="#2-4-indexOf-String-方法" class="headerlink" title="2.4 indexOf(String)方法"></a>2.4 indexOf(String)方法</h3><p>- </p><h3 id="2-5-replace-char-char-方法"><a href="#2-5-replace-char-char-方法" class="headerlink" title="2.5 replace(char, char)方法"></a>2.5 replace(char, char)方法</h3><p>- </p><h3 id="2-6-split-String-方法"><a href="#2-6-split-String-方法" class="headerlink" title="2.6 split(String)方法"></a>2.6 split(String)方法</h3><p>- </p>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>一些知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-final关键字</title>
    <link href="/2023/09/16/Java-final%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2023/09/16/Java-final%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-final关键字"><a href="#Java-final关键字" class="headerlink" title="Java-final关键字"></a>Java-final关键字</h1><ul><li>关于<code>final</code>关键字的重要知识点：<ul><li><code>final</code>关键字可以用于<strong>成员变量</strong>、<strong>本地变量</strong>、<strong>方法</strong>以及<strong>类</strong>；</li><li><code>final</code>修饰的<strong>成员变量</strong>必须在声明的时候初始化或者在构造器中初始化，否则报编译错误；</li><li><code>final</code>修饰的<strong>变量</strong>不能再次赋值；</li><li><code>final</code>修饰的<strong>方法</strong>不能被重写；</li><li><code>final</code>修饰的<strong>类</strong>不能被继承；</li><li>在匿名类中所有变量都必须是final变量；</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>一些知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-关键字throw和throws的区别</title>
    <link href="/2023/09/16/Java-%E5%85%B3%E9%94%AE%E5%AD%97throw%E5%92%8Cthrows%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/09/16/Java-%E5%85%B3%E9%94%AE%E5%AD%97throw%E5%92%8Cthrows%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-关键字throw和throws的区别"><a href="#Java-关键字throw和throws的区别" class="headerlink" title="Java-关键字throw和throws的区别"></a>Java-关键字throw和throws的区别</h1><ul><li><p><code>throw</code>关键字和<code>throws</code>关键字都是用于异常处理的关键字；</p><ul><li><p><code>throw</code>关键字：</p><ul><li>用于在程序中<strong>显式地</strong>抛出一个异常对象。</li><li><code>throw</code>关键字通常用于方法内部，用于抛出特定的异常，以表示异常情况的发生。</li><li>当执行<code>throw</code>关键字时，当前方法的执行立即终止，并将异常对象传递给调用者。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">someMethod</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (condition) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SomeException</span>(<span class="hljs-string">&quot;Exception message&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>throws</code>关键字：</p><ul><li>用于在<strong>方法声明</strong>中指定可能抛出的一种或多种异常。</li><li><code>throws</code>关键字用于通知方法的调用者，该方法可能会抛出指定类型的异常。</li><li>使用<code>throws</code>关键字的方法，需要在方法名称后面列出可能抛出的异常类型，多个异常类型之间使用逗号分隔。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">someMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SomeException &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>一些知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-运算符相关的类型转换</title>
    <link href="/2023/09/16/Java-%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9B%B8%E5%85%B3%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>/2023/09/16/Java-%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9B%B8%E5%85%B3%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-运算符相关的类型转换"><a href="#Java-运算符相关的类型转换" class="headerlink" title="Java-运算符相关的类型转换"></a>Java-运算符相关的类型转换</h1><ul><li><p>当使用<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>运算符进行运算时，涉及操作数的数据类型转换遵循以下规则：</p><ul><li><strong>1.自动类型提升：</strong>当参与运算的操作数有不同的类型时，会进行自动类型提升，将低精度类型转换为高精度类型。</li><li><strong>2.强制类型转换：</strong>仅能够将高精度类型转换为低精度类型，且可能导致精度丢失或截断。</li></ul></li><li><p>Java虚拟机将<code>byte</code>、<code>short</code>和<code>char</code>类型均视为32位的<code>int</code>类型来进行操作；</p></li><li><p>Java中，整数常量默认为<code>int</code>类型，小数常量默认为<code>double</code>类型；</p></li><li><p>好了，接下来看题：</p><ul><li>下面代码中，哪几条语句会报编译错误；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, b2 = <span class="hljs-number">2</span>, b3, b6, b8;<br><span class="hljs-keyword">final</span> <span class="hljs-type">byte</span> <span class="hljs-variable">b4</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>, b5 = <span class="hljs-number">6</span>, b7;<br>b3 = (b1 + b2);  <span class="hljs-comment">/*语句1*/</span><br>b6 = b4 + b5;    <span class="hljs-comment">/*语句2*/</span><br>b8 = (b1 + b4);  <span class="hljs-comment">/*语句3*/</span><br>b7 = (b2 + b5);  <span class="hljs-comment">/*语句4*/</span><br>System.out.println(b3 + b6);<br></code></pre></td></tr></table></figure></li><li><p>答案是：1,3,4</p></li><li><p>分析：</p><ul><li>语句1：(b1 + b2)的和是int类型，b3是byte类型，需要强制类型转换；</li><li>语句2：final修饰的变量不会转换为int计算；</li><li>语句3：(b1 + b4)的和是int类型，b8是byte类型，需要强制类型转换；</li><li>语句4：final不能二次赋值；</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>一些知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-坦克绘制（面向对象思想）</title>
    <link href="/2023/09/16/Java-%E5%9D%A6%E5%85%8B%E7%BB%98%E5%88%B6%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3%EF%BC%89/"/>
    <url>/2023/09/16/Java-%E5%9D%A6%E5%85%8B%E7%BB%98%E5%88%B6%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-坦克绘制（面向对象思想）"><a href="#Java-坦克绘制（面向对象思想）" class="headerlink" title="Java-坦克绘制（面向对象思想）"></a>Java-坦克绘制（面向对象思想）</h1><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><ul><li>普通Tank类；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 坦克</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tank</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x;<span class="hljs-comment">//坦克的横坐标</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> y;<span class="hljs-comment">//坦克的纵坐标</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getX</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setX</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getY</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setY</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>玩家坦克类，顾名思义，继承了坦克类；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 游戏玩家坦克</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Tank</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Hero</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">super</span>(x, y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>坦克游戏窗口；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 坦克游戏窗口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GameFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<span class="hljs-comment">//画框</span><br>    <span class="hljs-type">GamePanel</span> <span class="hljs-variable">gamePanel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        gamePanel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GamePanel</span>();<br><br>        <span class="hljs-built_in">this</span>.add(gamePanel);<br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">1000</span>, <span class="hljs-number">800</span>);<br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>坦克游戏绘制区域；</li><li>面向对象思想：在将坦克抽象为类后，通过实现drawTank(int x, int y, Graphics g, int direction, int type)方法来绘制多个坦克对象；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 坦克大战绘图区域</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/2</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GamePanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> &#123;<span class="hljs-comment">//画板</span><br><br>    <span class="hljs-comment">//定义玩家的坦克</span><br>    <span class="hljs-type">Hero</span> <span class="hljs-variable">hero</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GamePanel</span><span class="hljs-params">()</span> &#123;<br>        hero = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<span class="hljs-comment">//初始化玩家坦克</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br><br>        <span class="hljs-comment">//游戏窗口背景</span><br>        g.setColor(Color.BLACK);<br>        g.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">800</span>);<br><br>        <span class="hljs-comment">//标题</span><br>        g.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-string">&quot;楷体&quot;</span>, Font.BOLD, <span class="hljs-number">32</span>));<br>        g.setColor(Color.RED);<br>        g.drawString(<span class="hljs-string">&quot;TankGame V0.1&quot;</span>, <span class="hljs-number">60</span>, <span class="hljs-number">40</span>);<br><br>        <span class="hljs-comment">//绘制坦克-&gt;封装成方法</span><br>        drawTank(hero.getX(), hero.getY(), g, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        drawTank(hero.getX() + <span class="hljs-number">100</span>, hero.getY(), g, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        drawTank(hero.getX(), hero.getY() + <span class="hljs-number">100</span>, g, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        drawTank(hero.getX() + <span class="hljs-number">100</span>, hero.getY() + <span class="hljs-number">100</span>, g, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> x 坦克左上方x轴坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> y 坦克左上方y轴坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> g 画笔</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> direction 坦克的朝向</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 坦克类型：0 =&gt; 玩家坦克，1 =&gt; 敌方坦克</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawTank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, Graphics g, <span class="hljs-type">int</span> direction, <span class="hljs-type">int</span> type)</span>&#123;<br><br>        <span class="hljs-comment">//不同坦克类型，颜色不同</span><br>        <span class="hljs-keyword">switch</span> (type)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//玩家坦克</span><br>                g.setColor(Color.YELLOW);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//敌方坦克</span><br>                g.setColor(Color.CYAN);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//不同方向的坦克</span><br>        <span class="hljs-keyword">switch</span> (direction)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//向上坦克</span><br>                g.fill3DRect(x, y, <span class="hljs-number">10</span>, <span class="hljs-number">60</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克左矩形（履带）</span><br>                g.fill3DRect(x+<span class="hljs-number">34</span>, y, <span class="hljs-number">10</span>, <span class="hljs-number">60</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克右矩形（履带）</span><br>                g.fill3DRect(x+<span class="hljs-number">10</span>, y+<span class="hljs-number">10</span>, <span class="hljs-number">24</span>, <span class="hljs-number">40</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克中间矩形（驾驶仓）</span><br>                g.fillOval(x+<span class="hljs-number">10</span>, y+<span class="hljs-number">18</span>, <span class="hljs-number">24</span>, <span class="hljs-number">24</span>   );<span class="hljs-comment">//坦克中间圆形（炮台）</span><br>                g.fill3DRect(x+<span class="hljs-number">22</span>, y, <span class="hljs-number">2</span>, <span class="hljs-number">22</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克中间矩形（炮筒）</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;未处理其他方向的坦克&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="绘制效果"><a href="#绘制效果" class="headerlink" title="绘制效果"></a>绘制效果</h2><ul><li>如图所示：</li></ul><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/drawTank.png?raw=true"></p>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>TankGame</category>
      
      <category>TankGame V0.1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TankGame V0.1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-JDBC知识整理</title>
    <link href="/2023/09/16/Java-JDBC%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    <url>/2023/09/16/Java-JDBC%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="JDBC知识整理"><a href="#JDBC知识整理" class="headerlink" title="JDBC知识整理"></a>JDBC知识整理</h1><h2 id="一、概念介绍"><a href="#一、概念介绍" class="headerlink" title="一、概念介绍"></a>一、概念介绍</h2><ul><li><p>JDBC是为访问不同的数据库提供了统一的接口，为使用者屏蔽了使用细节；</p></li><li><p>JDBC可以连接任何提供了JDBC驱动程序的数据库系统，从而完成对数据库的各种操作；</p></li><li><p>下图为JDBC原理示意图(来自韩顺平老师Java课程)：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/JDBC.png" alt="JDBC"></p></li><li><p>注意：JDBC<strong>只是一种数据库连接和操作的标准接口</strong>，具体的实现是由数据库供应商提供的驱动程序来实现的。</p></li></ul><h3 id="1-1-模拟JDBC原理"><a href="#1-1-模拟JDBC原理" class="headerlink" title="1.1 模拟JDBC原理"></a>1.1 模拟JDBC原理</h3><ul><li><p>根据上述原理图，模拟JDBC的视线原理：</p><ul><li><p>1.Java厂商指定JDBC接口规范：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/9 14:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">JDBCInterface</span> &#123;<br>    <span class="hljs-comment">//连接数据库</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//操作数据库CRUD</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">crud</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//关闭数据库</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>2.各个数据库的供应商商根据上述接口规范分别给出不同的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MySQL数据库的接口实现</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/9 14:56</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySQLJDBCImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">JDBCInterface</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;获得mysql数据库连接对象&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">crud</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;实现操作mysql数据库的方法，CRUD&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;关闭mysql数据库连接&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Oracle数据库的接口实现</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/9 15:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OracleJDBCImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">JDBCInterface</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;获得Oracle数据库连接对象&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">crud</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;完成对Oracle数据库的增删改查&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;关闭Oracle数据库连接&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>3.开发人员想要操作不同的数据库时:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/9 14:57</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestJDBC</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//操作mysql数据库</span><br><br>        <span class="hljs-type">JDBCInterface</span> <span class="hljs-variable">jdbcInterface</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySQLJDBCImpl</span>();<span class="hljs-comment">//通过接口调用实现类的方法</span><br>        jdbcInterface.getConnection();<br>        jdbcInterface.crud();<br>        jdbcInterface.close();<br><br>        <span class="hljs-comment">//操作Oracle数据库</span><br><br>        <span class="hljs-type">JDBCInterface</span> <span class="hljs-variable">jdbcInterface1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OracleJDBCImpl</span>();<br>        jdbcInterface1.getConnection();<br>        jdbcInterface1.crud();<br>        jdbcInterface1.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><h3 id="2-1-下载MySQL驱动包（Mac-M1）"><a href="#2-1-下载MySQL驱动包（Mac-M1）" class="headerlink" title="2.1 下载MySQL驱动包（Mac M1）"></a>2.1 下载MySQL驱动包（Mac M1）</h3><ul><li><p>官网地址：<code>[MySQL :: Download Connector/J](https://dev.mysql.com/downloads/connector/j/)</code></p></li><li><p>选择<code>Platform Independent</code>选项（即不依赖平台的版本）</p></li><li><p>点击下载并解压</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/MySQL%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD_1.png" alt="MySQL驱动下载_1"></p></li><li><p>在项目工程目录下新建一个<code>lib</code>文件夹，将解压后的<code>mysql-connector-j-8.0.33.jar</code>包放进去；</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/MySQL%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD_2.png" alt="MySQL驱动下载_2"></p></li><li><p>最后，右键jar包，选择add as Library即可。</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/MySQL%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD_3.png" alt="MySQL驱动下载_3"></p></li></ul><h3 id="2-2-JDBC程序的编写步骤"><a href="#2-2-JDBC程序的编写步骤" class="headerlink" title="2.2 JDBC程序的编写步骤"></a>2.2 JDBC程序的编写步骤</h3><ul><li><p>1.注册驱动 </p><ul><li>此处，导入的包是<code>com.mysql.cj.jdbc.Driver;</code>，一开始我导入的是<code>import com.mysql.jdbc.Driver;</code>包，也是可以的，在运行后控制台提示已弃用，建议更换；【前者是针对MySQL Connector&#x2F;J 8.0及更高版本的驱动程序，后者是针对MySQL Connector&#x2F;J 5.1及更早版本的驱动程序】</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mysql.cj.jdbc.Driver;<br><br>...<br>  <br><span class="hljs-comment">//1.注册驱动</span><br><span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>();<span class="hljs-comment">//创建一个Driver对象</span><br></code></pre></td></tr></table></figure></li><li><p>2.获取数据库连接对象</p><ul><li>本质上是<strong>socket连接</strong>！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//2.获取数据库连接</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db_hspJava&quot;</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    【jdbc:mysql://】: 协议，表示通过jdbc连接mysql数据库；</span><br><span class="hljs-comment">    【localhost】:主机（ip）地址；</span><br><span class="hljs-comment">    【3306】:mysql监听的端口号；</span><br><span class="hljs-comment">    【db_hspJava】:指定连接的mysql数据库名称；</span><br><span class="hljs-comment">    注意：本质上是socket连接！</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//将连接数据库的用户放入一个Properties对象</span><br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<span class="hljs-comment">//用户</span><br>properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;12345678&quot;</span>);<span class="hljs-comment">//密码</span><br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> driver.connect(url, properties);<br></code></pre></td></tr></table></figure></li><li><p>3.执行数据库操作</p><ul><li>需要通过获得的连接对象创建一个Statement对象，用于执行静态SQL语句并返回其生成的结果；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//3.执行数据库操作(sql语句)</span><br><br><span class="hljs-comment">//sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql_op1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INSERT INTO actor (name, sex, borndate, phone) VALUES (&#x27;a&#x27;, &#x27;男&#x27;, &#x27;2000-06-03&#x27;, 123456789), (&#x27;b&#x27; , &#x27;男&#x27;, &#x27;2000-06-04&#x27;, 123456789)&quot;</span>;<br><br><span class="hljs-comment">//获取Statement对象，该对象是用于执行静态SQL语句并返回其生成的结果的对象</span><br><span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connect.createStatement();<br><br><span class="hljs-comment">//执行sql，返回结果是数据库中受影响的行数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">rowUpdate</span> <span class="hljs-operator">=</span> statement.executeUpdate(sql_op1);<br>System.out.println(rowUpdate &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;成功！&quot;</span> + rowUpdate + <span class="hljs-string">&quot; rows&quot;</span> : <span class="hljs-string">&quot;失败！&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>4.关闭数据库连接并释放资源 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//4.关闭数据库连接</span><br>statement.close();<br>connect.close();<br></code></pre></td></tr></table></figure></li><li><p>5.运行后，数据库中增加了记录；</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/JDBC%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93_1.png" alt="JDBC连接数据库_1"></p></li></ul><h2 id="三、JDBC连接数据库的方式"><a href="#三、JDBC连接数据库的方式" class="headerlink" title="三、JDBC连接数据库的方式"></a>三、JDBC连接数据库的方式</h2><ul><li>一共5种方式，上面【基本使用】小节为其中一种方式；</li></ul><h3 id="3-1-方式一：静态加载驱动"><a href="#3-1-方式一：静态加载驱动" class="headerlink" title="3.1 方式一：静态加载驱动"></a>3.1 方式一：静态加载驱动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>();<span class="hljs-comment">//创建一个Driver对象</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db_hspJava&quot;</span>;<br><br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<span class="hljs-comment">//用户</span><br>properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;12345678&quot;</span>);<span class="hljs-comment">//密码</span><br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> driver.connect(url, properties);<br></code></pre></td></tr></table></figure><h3 id="3-2-方式二：使用反射机制动态加载驱动"><a href="#3-2-方式二：使用反射机制动态加载驱动" class="headerlink" title="3.2 方式二：使用反射机制动态加载驱动"></a>3.2 方式二：使用反射机制动态加载驱动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<span class="hljs-comment">//反射机制，动态加载</span><br><span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> (Driver) aClass.newInstance();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db_hspJava&quot;</span>;<br><br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<span class="hljs-comment">//用户</span><br>properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;12345678&quot;</span>);<span class="hljs-comment">//密码</span><br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> driver.connect(url, properties);<br>System.out.println(connect);<br></code></pre></td></tr></table></figure><h3 id="3-3-方式三：使用DriverManager替换Driver"><a href="#3-3-方式三：使用DriverManager替换Driver" class="headerlink" title="3.3 方式三：使用DriverManager替换Driver"></a>3.3 方式三：使用DriverManager替换Driver</h3><ul><li><code>DriverManager</code>可以根据不同的数据库连接URL自动加载并使用相应的驱动程序。</li><li>根据JDBC规范和自动服务发现机制，<code>DriverManager</code>可以识别连接URL中的数据库协议（例如<code>jdbc:mysql://</code>表示MySQL数据库）并加载相应的驱动程序。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在较新版本的mysql驱动程序中，可以省略driver注册操作（即不需要显式的注册驱动）</span><br><br><span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br><span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> (Driver) aClass.newInstance();<br>DriverManager.registerDriver(driver);<br><br><span class="hljs-comment">//直接从这里开始也可以</span><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db_hspJava&quot;</span>;<br><br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<span class="hljs-comment">//用户</span><br>properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;12345678&quot;</span>);<span class="hljs-comment">//密码</span><br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, properties);<span class="hljs-comment">//使用DriverManager统一进行管理</span><br>System.out.println(connection);<br></code></pre></td></tr></table></figure><h3 id="3-4-方式四：使用Class-forName-自动完成注册驱动，简化代码【推荐使用】"><a href="#3-4-方式四：使用Class-forName-自动完成注册驱动，简化代码【推荐使用】" class="headerlink" title="3.4 方式四：使用Class.forName()自动完成注册驱动，简化代码【推荐使用】"></a>3.4 方式四：使用Class.forName()自动完成注册驱动，简化代码【推荐使用】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//jdk1.5以后使用了JDBC4，不需要再显式的注册驱动了，因此此处Class.forName()可省略</span><br>Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<span class="hljs-comment">//反射机制动态加载Driver</span><br><span class="hljs-comment">//此处，加载Driver类时，底层自动注册驱动Driver：</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  Driver.class反编译得到的源码：</span><br><span class="hljs-comment">        public class Driver extends NonRegisteringDriver implements java.sql.Driver &#123;</span><br><span class="hljs-comment">            public Driver() throws SQLException &#123;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            static &#123;</span><br><span class="hljs-comment">                try &#123;</span><br><span class="hljs-comment">                    DriverManager.registerDriver(new Driver());//此处进行了Driver驱动注册操作</span><br><span class="hljs-comment">                &#125; catch (SQLException var1) &#123;</span><br><span class="hljs-comment">                    throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db_hspJava&quot;</span>;<br><br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<span class="hljs-comment">//用户</span><br>properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;12345678&quot;</span>);<span class="hljs-comment">//密码</span><br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, properties);<span class="hljs-comment">//使用DriverManager统一进行管理</span><br>System.out.println(connection);<br></code></pre></td></tr></table></figure><h3 id="3-5-方式五：使用配置文件"><a href="#3-5-方式五：使用配置文件" class="headerlink" title="3.5 方式五：使用配置文件"></a>3.5 方式五：使用配置文件</h3><ul><li>上述方式，数据库连接的url、user以及password都是写死了，不利于修改；</li><li>优化：使用配置文件properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/db_hspJava</span><br><span class="hljs-attr">user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">12345678</span><br><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过Properties对象获取配置文件信息</span><br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./hsp_ch25/mysql.properties&quot;</span>));<br><br><span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br><br>Class.forName(driver);<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br>System.out.println(connection);<br></code></pre></td></tr></table></figure><h2 id="四、ResultSet结果集"><a href="#四、ResultSet结果集" class="headerlink" title="四、ResultSet结果集"></a>四、ResultSet结果集</h2><ul><li><p>执行查询数据库的语句生成的结果集；</p></li><li><p>ResultSet对象保持一个光标指向当前的数据行，初始时指向第一行；</p></li><li><p>next()方法将该光标移动到下一行，因此一般用while遍历结果集；</p></li><li><p>具体案例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/12 09:10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBC_04_ResultSet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;./hsp_ch25/mysql.properties&quot;</span>));<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        Class.forName(driver);<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT id, name, sex, phone FROM actor;&quot;</span>;<br><br>        <span class="hljs-comment">//执行给定的SQL语句，返回单个ResultSet对象</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br>        System.out.println(resultSet);<br><br>        <span class="hljs-comment">//使用while循环取出数据</span><br>        <span class="hljs-keyword">while</span>(resultSet.next())&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-number">1</span>);<span class="hljs-comment">//获取当前行的第一列</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;sex&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;phone&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;[&quot;</span> + id + <span class="hljs-string">&quot;, &quot;</span> + name + <span class="hljs-string">&quot;, &quot;</span> + sex + <span class="hljs-string">&quot;, &quot;</span> + phone + <span class="hljs-string">&quot;]&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//关闭连接</span><br>        resultSet.close();<br>        statement.close();<br>        connection.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/JDBC_ResultSet.png" alt="JDBC_Result"></p></li></ul><h2 id="五、Statement"><a href="#五、Statement" class="headerlink" title="五、Statement"></a>五、Statement</h2><h3 id="5-1-Statement"><a href="#5-1-Statement" class="headerlink" title="5.1 Statement"></a>5.1 Statement</h3><ul><li><p>用于执行静态SQL语句并返回其生成结果的对象；</p></li><li><p>实际开发中一般不使用，原因：<strong>存在SQL注入！</strong></p></li><li><p>什么是SQL注入？</p><ul><li>SQL注入通常发生在使用动态SQL语句构建的Web应用程序中，这些语句将用户提供的输入直接拼接到SQL查询中，而不进行充分的验证或转义。</li><li>攻击者可以通过在输入中插入特殊的SQL代码来干扰原始查询的结构，从而实现执行恶意操作的目的。</li><li>例如：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/SQL%E6%B3%A8%E5%85%A5.png" alt="SQL注入"></p></li></ul><h3 id="5-2-PreparedStatement"><a href="#5-2-PreparedStatement" class="headerlink" title="5.2 PreparedStatement"></a>5.2 PreparedStatement</h3><ul><li><p>一种在关系型数据库中执行<strong>预编译SQL语句</strong>的机制。</p></li><li><p>它是SQL语句的预编译版本，允许开发人员定义<strong>参数化查询</strong>，并提供对输入参数的类型安全性验证。</p></li><li><p>PreparedStatement通常与绑定参数一起使用，以<strong>防止SQL注入攻击</strong>，并提供更高的性能和安全性。</p></li><li><p>基本使用流程：</p><ul><li>1.准备查询：使用PreparedStatement创建SQL查询的模板。查询中的值部分使用占位符（通常是问号 ?）代替实际的参数值。</li><li>2.绑定参数：对于每个占位符，使用相应的方法将实际的参数值绑定到PreparedStatement对象上，例如setString()。</li><li>3.执行查询：执行PreparedStatement的executeQuery()方法来执行查询。数据库系统将使用预编译的SQL语句模板和绑定的参数来执行查询。</li></ul></li><li><p>防止SQL注入！</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/PrepareStatement_%E9%98%B2%E6%AD%A2SQl%E6%B3%A8%E5%85%A5.png" alt="PreparedStatement_防止SQl注入"></p></li></ul><h2 id="六、事务"><a href="#六、事务" class="headerlink" title="六、事务"></a>六、事务</h2><ul><li><p>在JDBC中，当一个Connection对象创建时，默认为自动提交事务，即每一次执行SQL语句时，如果执行成功，就会向数据库自动进行事务提交操作；</p></li><li><p>为了让多个SQL语句作为一个整体执行，需要使用事务；</p></li><li><p>在JDBC中，调用Connection的<code>setAutoCommit(false)</code>方法可以取消默认自动提交事务；这样就可以在所有SQL执行完成后，调用<code>commit()</code>方法提交事务；</p><ul><li>在当前事务中，调用<code>rollback()</code>方法，可以撤销在当前事务中所做的所有更改，并且释放当前Connection对象持有的数据库锁；</li></ul></li><li><p>案例：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">银行转账：用户 马云 向 用户 马化腾 转100块<br>过程：<br>1.用户 马云 的余额 <span class="hljs-string">-100</span><br>2.用户 马化腾 的余额 <span class="hljs-string">+100</span><br>3.事务提交<br>4.若出现异常，事务回滚<br></code></pre></td></tr></table></figure><ul><li><p>1.建表并插入两条记录：</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/JDBC_transaction_1.png" alt="JDBC_transaction"></p></li><li><p>2.模拟转账业务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/12 12:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBC_07_transaction</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UPDATE account SET balance = balance - 100 WHERE id = 1;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UPDATE account SET balance = balance + 100 WHERE id = 2;&quot;</span>;<br><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;./hsp_ch25/mysql.properties&quot;</span>));<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        Class.forName(driver);<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//设置事务默认不自动提交</span><br>            connection.setAutoCommit(<span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">//减100</span><br>            <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement1</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql1);<br>            preparedStatement1.executeUpdate();<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<span class="hljs-comment">//异常事件</span><br><br>            <span class="hljs-comment">//加100</span><br>            <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement2</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql2);<br>            preparedStatement2.executeUpdate();<br><br>            <span class="hljs-comment">//两个sql操作都执行完后提交事务</span><br>            connection.commit();<br><br>            preparedStatement1.close();<br>            preparedStatement2.close();<br>            connection.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;出现异常，回滚事务&quot;</span>);<br>            connection.rollback();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果不使用事务处理，上述异常发生时，用户 马云 扣了100块，但是 用户 马化腾 没有加100块；</p></li></ul></li></ul><h2 id="七、批处理"><a href="#七、批处理" class="headerlink" title="七、批处理"></a>七、批处理</h2><h3 id="7-1-基本介绍"><a href="#7-1-基本介绍" class="headerlink" title="7.1 基本介绍"></a>7.1 基本介绍</h3><ul><li>当需要成批插入或者更新记录时，可以采用Java的批处理机制，这一机制允许 <strong>多条语句一次性提交</strong>给数据库进行<strong>批量处理</strong>。【效率较高】</li><li>批处理往往和PreparedStatement搭配使用，可以<strong>减少编译次数和运行次数</strong>；</li></ul><h3 id="7-2-批处理的性能优势"><a href="#7-2-批处理的性能优势" class="headerlink" title="7.2 批处理的性能优势"></a>7.2 批处理的性能优势</h3><ul><li><p>不使用批处理</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/JDBC_%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%89%B9%E5%A4%84%E7%90%86.png" alt="JDBC_不使用批处理"></p></li><li><p>使用批处理</p><ul><li><p>注意：使用批处理需要配置url的参数</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">url_batch</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/db_hspJava?rewriteBatchedStatements=true</span><br></code></pre></td></tr></table></figure><ul><li>该参数表示可以启用批处理写入的重写功能。作用是将批处理语句重写为更高效的形式【JDBC驱动程序将尝试将批处理语句转换为单个带有多个值的SQL语句】，以提高性能。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/JDBC_%E4%BD%BF%E7%94%A8%E6%89%B9%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F.png" alt="JDBC_使用批处理方式"></p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/JDBC_%E4%BD%BF%E7%94%A8%E6%89%B9%E5%A4%84%E7%90%86_2.png" alt="JDBC_使用批处理_2"></p></li><li><p>根据上述对比，<strong>不使用批处理，仅插入5000条数据就耗时1200多ms，而使用了批处理后，插入10万条数据，耗时780多ms！！！</strong></p></li><li><p>性能提升的原因：</p><ul><li>1.批处理：多条sql批量执行，减少执行次数；</li><li>2.PreparedStatement：预编译，减少编译次数；</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>JDBC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JDBC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Java中接口本身的访问修饰符</title>
    <link href="/2023/09/16/Java-Java%E4%B8%AD%E6%8E%A5%E5%8F%A3%E6%9C%AC%E8%BA%AB%E7%9A%84%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <url>/2023/09/16/Java-Java%E4%B8%AD%E6%8E%A5%E5%8F%A3%E6%9C%AC%E8%BA%AB%E7%9A%84%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-Java中接口本身的访问修饰符"><a href="#Java-Java中接口本身的访问修饰符" class="headerlink" title="Java-Java中接口本身的访问修饰符"></a>Java-Java中接口本身的访问修饰符</h1><ul><li><p>在Java中接口分为两种：</p><ul><li><p>内部接口：</p><ul><li>内部接口是指在一个类的内部定义的接口。</li><li>作为类的成员来定义的，因此只能在包含它的类中可见。</li><li>内部接口可以被声明为<code>public</code>、<code>private</code>、<code>protected</code>或<strong>默认访问修饰符</strong>，具体可见性受限于其所在类的访问修饰符和内部接口自身的修饰符。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">OuterClass</span> &#123;<br>    ...<br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InnerInterface</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>内部接口通常用于与包含它们的类紧密相关的功能，并且可以访问外部类的成员。</li></ul></li><li><p>外部接口：</p><ul><li>外部接口是指在包级别定义的接口，即在任何类的外部定义的接口。</li><li>外部接口可以被声明为<code>public</code>或<strong>默认访问级别</strong>（默认只能包内可见），它们在整个包中是可见的，可以被其他类或接口访问。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">OuterInterface</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>外部接口通常用于模块间的协作和通信，作为公共契约的一部分，被不同类和包中的代码实现和使用。</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>一些知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Java程序的种类</title>
    <link href="/2023/09/16/Java-Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%A7%8D%E7%B1%BB/"/>
    <url>/2023/09/16/Java-Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%A7%8D%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-Java程序的种类"><a href="#Java-Java程序的种类" class="headerlink" title="Java-Java程序的种类"></a>Java-Java程序的种类</h1><ul><li><p>主要分为以下几种类型：</p><ul><li><p><strong>Application：Java应用程序</strong></p><ul><li>一种独立的、功能完整的程序，用于满足特定的需求。</li><li>通常由开发人员编写，并在终端用户的计算机上执行。</li><li>通过编写主类（包含<code>main</code>方法）并使用Java虚拟机（JVM）来执行；</li></ul></li><li><p><strong>Applet：Java小应用程序</strong></p><ul><li>一种小型的Java程序，可以嵌入到网页中，通过<code>Java applet</code>插件在浏览器中执行。</li><li>过去广泛用于Web浏览器中的动态内容和客户端交互，但现在它们已经过时，不再被广泛支持</li></ul></li><li><p><strong>Servlet：Java服务器端小程序</strong></p><ul><li>运行在服务器端的Java程序，用于处理来自Web客户端（例如浏览器）的请求并生成动态内容。</li><li>通常嵌入在服务器容器（如Apache Tomcat）中，以响应来自客户端的HTTP请求。</li></ul></li><li><p><strong>JavaBean</strong>：</p><ul><li>JavaBean是一种可重用的组件模型，用于构建Java应用程序。</li><li>JavaBean是普通的Java类，符合特定的命名约定和属性访问器方法（getter和setter方法）。</li><li>它们可以通过反射机制进行动态访问和操作，常用于构建图形用户界面（GUI）应用程序。</li></ul></li><li><p><strong>中间件程序</strong>：</p><ul><li>Java中的中间件程序用于在分布式系统中协调不同组件之间的通信和交互。</li><li>通常利用Java的远程方法调用（RMI）或消息队列（如Java Message Service）等技术，实现分布式系统中的通信和数据共享。</li></ul></li><li><p><strong>工具程序</strong>：</p><ul><li>工具程序是用Java编写的实用工具，用于帮助开发人员进行任务或自动化特定的操作。</li><li>例如，构建工具（如Apache Ant和Apache Maven）是用Java编写的，用于自动化项目构建和依赖管理。</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>一些知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-IO流知识整理（整理完毕！）</title>
    <link href="/2023/09/16/Java-IO%E6%B5%81%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <url>/2023/09/16/Java-IO%E6%B5%81%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-IO流知识整理"><a href="#Java-IO流知识整理" class="headerlink" title="Java-IO流知识整理"></a>Java-IO流知识整理</h1><h2 id="一、文件"><a href="#一、文件" class="headerlink" title="一、文件"></a>一、文件</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><ul><li>保存数据的地方；</li></ul><h3 id="1-2-文件流"><a href="#1-2-文件流" class="headerlink" title="1.2 文件流"></a>1.2 文件流</h3><ul><li><p>文件在程序中是以流的形式来操作的；</p></li><li><p>流：数据在 数据源(文件) 和 程序（内存） 之间经历的路径；</p><ul><li>输入流： 数据源(文件) &#x3D;&#x3D;&gt; 程序（内存）</li><li>输出流： 数据源(文件) &lt;&#x3D;&#x3D; 程序（内存）</li></ul><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/IOStream_1.jpg?raw=true"></p></li></ul><h3 id="1-3-常用的文件操作"><a href="#1-3-常用的文件操作" class="headerlink" title="1.3 常用的文件操作"></a>1.3 常用的文件操作</h3><ul><li><p>（1）文件创建</p><ul><li>三种方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFile_1</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//1.根据文件路径创建</span><br>        <span class="hljs-type">String</span>  <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile\\news01.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<span class="hljs-comment">//在内存中，创建了File文件对象；</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<span class="hljs-comment">//此时才会在磁盘对应位置创建文件并写入；</span><br>            System.out.println(<span class="hljs-string">&quot;文件&quot;</span> + file.getName() + <span class="hljs-string">&quot;已创建&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFile_2</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//2.根据父目录文件 + 文件名创建</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;news02.txt&quot;</span>;<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parent, fileName);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;文件&quot;</span> + file.getName() + <span class="hljs-string">&quot;已创建&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFile_3</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//3.根据父目录文件路径 + 文件名创建</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">parentPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;news03.txt&quot;</span>;<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentPath, fileName);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;文件&quot;</span> + file.getName() + <span class="hljs-string">&quot;已创建&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>（2）获取文件信息</p><ul><li>常用的几个：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile\\news01.txt&quot;</span>);<br><br>    System.out.println(<span class="hljs-string">&quot; 文件名 ===== &quot;</span> + file.getName());<br><br>    System.out.println(<span class="hljs-string">&quot; 绝对路径 ===== &quot;</span> + file.getAbsolutePath());<br><br>    System.out.println(<span class="hljs-string">&quot; 父级目录 ===== &quot;</span> + file.getParent());<br><br>    System.out.println(<span class="hljs-string">&quot; 文件大小（byte） ===== &quot;</span> + file.length());<br><br>    System.out.println(<span class="hljs-string">&quot; 文件是否存在 ===== &quot;</span> + file.exists());<br><br>    System.out.println(<span class="hljs-string">&quot; 是不是一个文件 ===== &quot;</span> + file.isFile());<br><br>    System.out.println(<span class="hljs-string">&quot; 文件是不是一个目录 ===== &quot;</span> + file.isDirectory());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>（3）目录操作和文件删除</p><ul><li>删除文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//1.判断 指定路径的文件是否存在，存在则删除；</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile\\news01.txt&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>    <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>        <span class="hljs-keyword">if</span> (file.delete()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;文件删除成功！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;文件删除失败！&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;文件不存在！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>删除（目录）文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//2.判断 指定目录 是否存在，存在则删除；</span><br>    <span class="hljs-comment">//  目录也是一种文件!!</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile02&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>    <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>        <span class="hljs-keyword">if</span> (file.delete()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;目录删除成功！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;目录删除失败！&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;该目录不存在！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建目录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//3.判断 指定目录 是否存在，存在则提示存在，否则创建该目录；</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile\\a&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>    <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;该目录已存在！&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>(file.mkdirs())&#123;<span class="hljs-comment">//创建多级目录mkdirs()，即在当前已存在的目录下，创建多级目录文件（...\\a\\b\\c\\d）</span><br>            <span class="hljs-comment">// if(file.mkdir())&#123;//创建一级目录mkdir()，即在当前已存在的目录下，创建一级目录文件(...\\a)</span><br>            System.out.println(<span class="hljs-string">&quot;该目录创建成功！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;该目录创建失败！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="二、IO流原理及流的分类"><a href="#二、IO流原理及流的分类" class="headerlink" title="二、IO流原理及流的分类"></a>二、IO流原理及流的分类</h2><h3 id="2-1-I-x2F-O原理"><a href="#2-1-I-x2F-O原理" class="headerlink" title="2.1 I&#x2F;O原理"></a>2.1 I&#x2F;O原理</h3><ul><li>I&#x2F;O技术：用于处理数据传输，如文件读&#x2F;写，网络通讯等；</li><li>Java程序中，对于数据输入&#x2F;输出操作以“流（stream）”的方式进行；<ul><li>输入流（input）：读取外部数据（可以是磁盘、光盘、另一个程序等等）到程序（内存）中；</li><li>输出流（output）：将程序（内存）数据输出到外部存储设备或另一个程序</li></ul></li><li>java.io包中提供了各种“流”类和接口，用以获取不同种类的数据，并通过方法进行数据的输入或输出；</li></ul><h3 id="2-2-流的分类"><a href="#2-2-流的分类" class="headerlink" title="2.2 流的分类"></a>2.2 流的分类</h3><ul><li>按操作数据单位不同：<ul><li>字节流(8 bit)<ul><li>InputStream 和 OutputStream</li><li>如：<strong>操作二进制文件（如视频，音频）时，使用字节流操作不会产生损失</strong>；</li></ul></li><li>字符流(字符，大小与文件编码有关)<ul><li>Reader 和 Writer</li><li>如：<strong>操作文本文件(文本文件里面都是字符)时，使用字符流操作比较好</strong>；</li></ul></li></ul></li><li>按数据流的流向不同：<ul><li>输入流</li><li>输出流</li></ul></li><li>按流的角色不同<ul><li>节点流</li><li>处理流&#x2F;包装流</li></ul></li></ul><table><thead><tr><th>（抽象基类）</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><p><strong>上述四个类都是抽象类，可以通过实现子类来创建相应的对象，I&#x2F;O流的子类都是以抽象父类作为后缀的</strong></p><h3 id="2-3-输入流"><a href="#2-3-输入流" class="headerlink" title="2.3 输入流"></a>2.3 输入流</h3><h4 id="2-3-1-InputStream"><a href="#2-3-1-InputStream" class="headerlink" title="2.3.1 InputStream"></a>2.3.1 InputStream</h4><ul><li>抽象类 &#x3D;&#x3D;&gt; 输入流 &#x3D;&#x3D;&gt; 字节流</li><li>以字节为单位进行I&#x2F;O操作</li></ul><h5 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h5><ul><li><p>文件输入流（字节流）</p></li><li><p>new FileInputStream(File&#x2F;String)</p><ul><li>一个字节一个字节读取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read_FileInputStream_byte</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile\\hello1.txt&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">read_index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fi</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        fi = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath);<br>        read_index = fi.read();<br>        <span class="hljs-keyword">while</span>(read_index != -<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//read_index == -1时，文件到达末尾，读取结束！</span><br>            System.out.print((<span class="hljs-type">char</span>)read_index);<br>            read_index = fi.read();<br>        &#125;<br>        System.out.println();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//这里不能直接访问trycatch子句中定义的流对象</span><br>        <span class="hljs-keyword">if</span>(fi != <span class="hljs-literal">null</span>)<br>            fi.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过byte数组，指定每次最多读取的字节数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read_FileInputStream_byteArray</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile\\hello1.txt&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">read_len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8</span>];<span class="hljs-comment">//让字节流一次最多读取8个字节</span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fi</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        fi = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath);<br><br>        <span class="hljs-keyword">while</span> ((read_len = fi.read(buf)) != -<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//read(byte[])返回读取到的字节数</span><br>            System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, read_len));<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//这里不能直接访问trycatch子句中定义的流对象</span><br>        <span class="hljs-keyword">if</span>(fi != <span class="hljs-literal">null</span>)<br>            fi.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a>BufferedInputStream</h5><ul><li><p>继承关系：BufferedInputStream 继承 FliterInputStream 继承 InputStream</p></li><li><p>带缓冲字节输入流（包装流，可以包装任意InputStream字节输入流及其实现子类）</p></li><li></li></ul><h5 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h5><ul><li>对象字节输入流（节点-处理-输入流）</li><li>new ObjectInputStream(InpuSteam)</li></ul><h4 id="2-3-2-Reader"><a href="#2-3-2-Reader" class="headerlink" title="2.3.2 Reader"></a>2.3.2 Reader</h4><ul><li>抽象类 &#x3D;&#x3D;&gt; 输入流 &#x3D;&#x3D;&gt; 字符流</li><li>以字符为单位进行I&#x2F;O操作</li></ul><h5 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h5><ul><li><p>继承关系：FileReader 继承 InputStreamReader 继承 Reader</p></li><li><p>文件输入流（字符流）</p></li><li><p>new FileReader(File&#x2F;String)</p><ul><li>一个字符一个字符读取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read_FileReader_char</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile\\news04.txt&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">read_index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath);<br>        <span class="hljs-keyword">while</span>((read_index = fr.read()) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.print((<span class="hljs-type">char</span>)read_index);<br>        &#125;<br>        System.out.println();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">//记得关闭流！！</span><br>        <span class="hljs-keyword">if</span>(fr != <span class="hljs-literal">null</span>)<br>            fr.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过char数组读取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read_FileReader_charArr</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile\\news04.txt&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">read_len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">8</span>];<br>    <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath);<br>        <span class="hljs-keyword">while</span>((read_len = fr.read(buf)) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//                System.out.print(new String(buf));</span><br>            System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, read_len));<br>        &#125;<br>        System.out.println();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">//记得关闭流！！</span><br>        <span class="hljs-keyword">if</span>(fr != <span class="hljs-literal">null</span>)<br>            fr.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h5><ul><li><p>带缓冲字符输入流（包装流，可以包装不同的节点流）</p></li><li><p>new BufferedReader(new xxxReader)</p><ul><li>读取文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/21 15:06</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileIO_BufferedReader01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch19/FileIO_create/FileIO_create01.java&quot;</span>;<br>        <span class="hljs-comment">//创建BufferedReader</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath)));<br>        <span class="hljs-comment">//读取文件</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> bufferedReader.readLine();<br>        <span class="hljs-keyword">while</span>(line != <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(line);<br>            line = bufferedReader.readLine();<br>        &#125;<br><br>        <span class="hljs-comment">//关闭流</span><br>        bufferedReader.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h5><ul><li>转换流</li></ul><h3 id="2-4-输出流"><a href="#2-4-输出流" class="headerlink" title="2.4 输出流"></a>2.4 输出流</h3><h4 id="2-4-1-OutputStream"><a href="#2-4-1-OutputStream" class="headerlink" title="2.4.1 OutputStream"></a>2.4.1 OutputStream</h4><ul><li>抽象类 &#x3D;&#x3D;&gt; 输出流 &#x3D;&#x3D;&gt; 字节流</li><li>以字节为单位进行I&#x2F;O操作</li></ul><h5 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h5><ul><li><p>文件输出流（字节流）</p><ul><li>若<strong>指定的文件不存在但所在目录存在</strong>，则会先创建该文件然后写入数据；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write_FileOutputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile\\hello2.txt&quot;</span>;<br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fo</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        fo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath, <span class="hljs-literal">true</span>);<span class="hljs-comment">//true表示追加模式，默认为false覆盖模式；</span><br><br>        fo.write(<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-comment">//写入单个字节；</span><br><br>        fo.write(<span class="hljs-string">&quot;\nhello，北京\n&quot;</span>.getBytes());<span class="hljs-comment">//通过字节数组写入</span><br><br>        fo.write(<span class="hljs-string">&quot;\n1234567890\n&quot;</span>.getBytes(), <span class="hljs-number">3</span>, <span class="hljs-number">9</span>);<span class="hljs-comment">//写入字节数组指定范围内的数据</span><br><br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span>(fo != <span class="hljs-literal">null</span>)<br>            fo.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="BufferedOutputStream"><a href="#BufferedOutputStream" class="headerlink" title="BufferedOutputStream"></a>BufferedOutputStream</h5><ul><li>继承关系：BufferedOutputStream 继承 FliterOutputStream 继承 OutputStream</li><li>带缓冲字节输出流（包装流，可以包装任意OutputStream字节输入流及其实现子类）</li></ul><h5 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h5><ul><li>对象字节输出流（节点-处理-输出流）</li><li>new ObjectOutputStream(OutputStream)</li></ul><h4 id="2-4-2-Writer"><a href="#2-4-2-Writer" class="headerlink" title="2.4.2 Writer"></a>2.4.2 Writer</h4><ul><li><p>抽象类 &#x3D;&#x3D;&gt; 输入流 &#x3D;&#x3D;&gt; 字符流</p></li><li><p>以字符为单位进行I&#x2F;O操作</p></li></ul><h5 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h5><ul><li><p>继承关系：FileWriter 继承 OutputStreamWriter 继承 Writer</p></li><li><p>文件输出流（字符流）</p></li><li><p><strong>FileWriter在使用结束后，必须使用close()关闭方法或flush()刷新方法，否则写入不到指定文件（还在内存中！！！）</strong></p><ul><li><p>顺序：<strong>先flush()，后close()！</strong></p></li><li><p>两个方法的实现中都会将流里面的内容写入文件；</p></li></ul></li><li><p>new FileWriter(File&#x2F;String, true);&#x2F;&#x2F;true表示追加内容，默认是false，覆盖模式；</p><ul><li>一个字符一个字符写入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writer_FileWriter_char</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile\\news05.txt&quot;</span>;<br>    <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//fw = new FileWriter(filePath);//覆盖模式</span><br>        fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filePath, <span class="hljs-literal">true</span>);<span class="hljs-comment">//追加模式</span><br>        fw.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">//记得关闭或刷新流！！</span><br>        <span class="hljs-keyword">if</span>(fw != <span class="hljs-literal">null</span>)<br>            fw.close();<br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><ul><li>指定char数组写入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writer_FileWriter_charArr</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile\\news05.txt&quot;</span>;<br>    <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//fw = new FileWriter(filePath);//覆盖模式</span><br>        fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filePath, <span class="hljs-literal">true</span>);<span class="hljs-comment">//追加模式</span><br>        fw.write(<span class="hljs-string">&quot;abcdefg\n&quot;</span>.toCharArray());<br>        fw.write(<span class="hljs-string">&quot;abcdefgh\n&quot;</span>.toCharArray(), <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">//记得关闭或刷新流！！</span><br>        <span class="hljs-keyword">if</span>(fw != <span class="hljs-literal">null</span>)<br>            fw.close();<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure><ul><li>字符串写入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writer_FileWriter_String</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile\\news05.txt&quot;</span>;<br>    <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//fw = new FileWriter(filePath);//覆盖模式</span><br>        fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filePath, <span class="hljs-literal">true</span>);<span class="hljs-comment">//追加模式</span><br>        fw.write(<span class="hljs-string">&quot;abcdefg\n&quot;</span>);<br>        fw.write(<span class="hljs-string">&quot;abcdefgh\n&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">//记得关闭或刷新流！！</span><br>        <span class="hljs-keyword">if</span>(fw != <span class="hljs-literal">null</span>)<br>            fw.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h5><ul><li><p>带缓冲字符输出流</p></li><li><p>new BufferedWriter(new xxxWriter)</p><ul><li>字符串写入文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/21 16:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileIO_BufferedWriter01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch19/testfile/bufferedwriter01.txt&quot;</span>;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath)));<br><br>        bufferedWriter.write(<span class="hljs-string">&quot;我现在在学Java IO流，感觉不是很有意思啊。。。。&quot;</span>);<br>        bufferedWriter.newLine();<span class="hljs-comment">//插入一个和系统相关的换行符</span><br>        bufferedWriter.write(<span class="hljs-string">&quot;还是得学习！！！&quot;</span>);<br><br>        bufferedWriter.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h5><ul><li>转换流</li></ul><h3 id="2-5-节点流和处理流"><a href="#2-5-节点流和处理流" class="headerlink" title="2.5 节点流和处理流"></a>2.5 节点流和处理流</h3><table><thead><tr><th>分类</th><th>字节输入流</th><th>字节输出流</th><th>字符输入流</th><th>字符输出流</th><th>分类</th></tr></thead><tbody><tr><td><strong>抽象基类</strong></td><td><strong>InputStream</strong></td><td><strong>OutputStream</strong></td><td><strong>Reader</strong></td><td><strong>Writer</strong></td><td></td></tr><tr><td>访问文件</td><td><strong>File</strong>InputStream</td><td><strong>File</strong>OutputStream</td><td><strong>File</strong>Reader</td><td><strong>File</strong>Writer</td><td>节点流</td></tr><tr><td>访问数组</td><td><strong>ByteArray</strong>InputStream</td><td></td><td></td><td></td><td>节点流</td></tr><tr><td>访问管道</td><td><strong>Piped</strong>InputStream</td><td></td><td></td><td></td><td>节点流</td></tr><tr><td>访问字符串</td><td></td><td></td><td></td><td></td><td>节点流</td></tr><tr><td>缓冲流</td><td><strong>Buffered</strong>InputStream</td><td></td><td></td><td></td><td>处理(包装)流</td></tr><tr><td>转换流</td><td></td><td></td><td></td><td></td><td>处理(包装)流</td></tr><tr><td>对象流</td><td><strong>Object</strong>InputStream</td><td></td><td></td><td></td><td>处理(包装)流</td></tr><tr><td><strong>抽象基类<br>(继承自第二行的基类)</strong></td><td><strong>Filter</strong>InputStream</td><td><strong>Filter</strong>OutputStream</td><td><strong>Filter</strong>Reader</td><td><strong>Filter</strong>Writer</td><td></td></tr><tr><td>打印流</td><td></td><td><strong>Print</strong>Stream</td><td></td><td><strong>Print</strong>Writer</td><td>处理(包装)流</td></tr><tr><td>推回输入流</td><td><strong>Pushback</strong>InputStream</td><td></td><td><strong>Pushback</strong>Reader</td><td></td><td>处理(包装)流</td></tr><tr><td>特殊流</td><td><strong>Data</strong>InputStream</td><td><strong>Data</strong>OutputStream</td><td></td><td></td><td>处理(包装)流</td></tr></tbody></table><h4 id="2-5-1-节点流"><a href="#2-5-1-节点流" class="headerlink" title="2.5.1 节点流"></a>2.5.1 节点流</h4><ul><li>节点流可以从一个<strong>特定的数据源（存放数据的地方）</strong>读写数据；<ul><li>如FileReader、FileWriter是从<strong>某个文件</strong>中读写数据；</li></ul></li></ul><h4 id="2-5-2-处理流"><a href="#2-5-2-处理流" class="headerlink" title="2.5.2 处理流"></a>2.5.2 处理流</h4><ul><li>处理流也叫<strong>包装流</strong>，是“连接”在已存在的流（节点流或处理流）之上，为程序提供更为强大的读写功能；<ul><li>如BufferedReader、BufferedWriter；</li></ul></li><li>优点：<ul><li>1.<strong>性能</strong>的提升：主要以<strong>增加缓冲</strong>的方式来提高输入输出的效率；</li><li>2.操作的便捷：处理流 可能提供一系列便捷的方法来一次性输入输出大批量数据，使用更加灵活；</li></ul></li></ul><h4 id="2-5-3-区别和联系"><a href="#2-5-3-区别和联系" class="headerlink" title="2.5.3 区别和联系"></a>2.5.3 区别和联系</h4><ul><li>1.<strong>节点流</strong>是底层（低级）流，<strong>直接跟数据源相接</strong>；</li><li>2.处理流（包装流）包装节点流，既可以消除不同节点流的实现差异，也可以提供更加方便的输入输出方法；</li><li>3.<strong>处理流</strong>对节点流进行包装，<strong>使用了修饰器设计模式</strong>，<strong>不与数据源直接相连</strong>；</li></ul><h4 id="2-5-4-标准输入输出流"><a href="#2-5-4-标准输入输出流" class="headerlink" title="2.5.4 标准输入输出流"></a>2.5.4 标准输入输出流</h4><table><thead><tr><th>流</th><th>类型</th><th>默认设备</th><th>描述</th><th>编译类型</th><th>运行类型</th></tr></thead><tbody><tr><td>System.in</td><td>InputStream</td><td>键盘</td><td>标准输入</td><td>InputStream</td><td>BufferedInputStream</td></tr><tr><td>System.out</td><td>OutputStream</td><td>显示器</td><td>标准输出</td><td>PrintStream</td><td>PrintStream</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/26 20:35</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileIO_System01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(System.in.getClass());<br>        System.out.println(System.out.getClass());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>输出：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/FileIO_System01.png" alt="image-20230426204046080"></p><h4 id="2-5-5-转换流"><a href="#2-5-5-转换流" class="headerlink" title="2.5.5 转换流"></a>2.5.5 转换流</h4><ul><li><p>InputStreamReader</p><ul><li>new InputStreamReader(InputStream)</li><li>new InputStreamReader(InputStream, Charset);&#x2F;&#x2F;可以指定字符集将字节流转换为字符流;</li></ul></li><li><p>OutputStreamWriter</p><ul><li>new OutputStreamWriter(OutputStream)</li><li>new OutputStreamWriter(OutputStream,  Charset)</li></ul></li><li><p>是Reader&#x2F;Writer的子类，是字符流；</p></li><li><p>处理纯文本数据时，使用字符流效率较高，可以有效解决中文乱码问题；</p></li></ul><h4 id="2-5-6-打印流"><a href="#2-5-6-打印流" class="headerlink" title="2.5.6 打印流"></a>2.5.6 打印流</h4><ul><li>PrintStream&#x2F;PrintWriter</li><li>继承关系：<ul><li>PrintStream 继承 FilterOutputStream 继承 OutputStream;</li><li>PrintWriter 继承 Wirter;</li></ul></li><li>字节流，只有输出流，没有输入流；</li></ul><h3 id="2-6-Properties"><a href="#2-6-Properties" class="headerlink" title="2.6 Properties"></a>2.6 Properties</h3><ul><li>例子：读取配置文件中的值</li><li>配置文件如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">ip=<span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>user=root;<br>password=<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><ul><li>不使用Properties类时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/26 21:40</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileIO_Properties01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <br>        <span class="hljs-comment">//不使用Properties类</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch19/testfile/mysql.properties&quot;</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath));<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">while</span>((line = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>            String[] split = line.split(<span class="hljs-string">&quot;=&quot;</span>);<br>            System.out.println(split[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;=&quot;</span> + split[<span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>Properties类介绍</p><ul><li>专门用于读写配置文件的集合类；<ul><li>格式：键&#x3D;值</li></ul></li><li>注意：键值对中不需要空格，值不需要用引号，默认类型是String；</li></ul></li><li><p>使用Properties类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileIO_Properties02</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath_1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch19/testfile/mysql.properties&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch19/testfile/mysql2.properties&quot;</span>;<br>        <span class="hljs-comment">//new一个Propertes对象</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//加载指定的配置文件</span><br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath_1));<br>        <span class="hljs-comment">//将指定配置文件中的配置信息打印到标准输出（显示器）</span><br>        properties.list(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(System.out));<br><br><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties1.setProperty(<span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;123456@163.com&quot;</span>);<br>        properties1.setProperty(<span class="hljs-string">&quot;call&quot;</span>, <span class="hljs-string">&quot;123456789&quot;</span>);<br>        properties1.setProperty(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>);<span class="hljs-comment">//出现中文，将会转换成Unicode编码进行保存</span><br>        properties1.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath_2), <span class="hljs-string">&quot;&quot;</span>);<br><br>        properties1.list(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(System.out));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>IO流</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>IO流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-根据层次遍历序列构建二叉树</title>
    <link href="/2023/09/05/LeetCode-%E6%A0%B9%E6%8D%AE%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2023/09/05/LeetCode-%E6%A0%B9%E6%8D%AE%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-根据层次遍历序列构建二叉树"><a href="#LeetCode-根据层次遍历序列构建二叉树" class="headerlink" title="LeetCode-根据层次遍历序列构建二叉树"></a>LeetCode-根据层次遍历序列构建二叉树</h1><h2 id="一、题目来源"><a href="#一、题目来源" class="headerlink" title="一、题目来源"></a>一、题目来源</h2><ul><li><a href="https://leetcode.cn/problems/serialize-and-deserialize-bst/?envType=daily-question&envId=2023-09-04">449. 序列化和反序列化二叉搜索树 - 力扣（LeetCode）</a></li></ul><h2 id="二、思路分析"><a href="#二、思路分析" class="headerlink" title="二、思路分析"></a>二、思路分析</h2><ul><li><p>今天是2023年09月04日，之所以写这篇文章，是因为今天下午花了两个小时在这道题上面；</p></li><li><p>这道题我的思路是：</p><ul><li>序列化 &#x3D;&#x3D;&gt; 给定一颗二叉搜索树，<strong>返回该树的层次遍历序列</strong>，其中空节点的值为字符串”null”；</li><li>反序列化 &#x3D;&#x3D;&gt; 根据序列化得到的层次遍历序列，<strong>构建一颗二叉搜索树</strong>，返回树的根节点；</li></ul></li><li><p>第一个序列化的过程，我哼哧哼哧，很快就写完了，但是，第二个反序列化的过程，我一直在想怎么使用递归的方式简化代码，然后就陷入了僵局，因为我不会写。。。</p></li></ul><h2 id="三、解法"><a href="#三、解法" class="headerlink" title="三、解法"></a>三、解法</h2><ul><li><p><strong>序列化</strong>：借助队列，每次节点出队，都将该节点的所有孩子节点入队，<strong>空节点需要新建一个值为”-1”的节点入队，该空节点出队时，遍历序列append一个”null”字符串</strong>，直到队列为空，具体实现如下；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        Deque&lt;TreeNode&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<span class="hljs-comment">//队列</span><br>        deque.addLast(root);<br>        <span class="hljs-keyword">while</span> (!deque.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> deque.removeFirst();<br>            <span class="hljs-keyword">if</span> (cur.val != -<span class="hljs-number">1</span>)<br>                s.append(cur.val).append(<span class="hljs-string">&quot;,&quot;</span>);<br>            <span class="hljs-keyword">else</span> &#123;<br>                s.append(<span class="hljs-string">&quot;null&quot;</span>).append(<span class="hljs-string">&quot;,&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cur.left != <span class="hljs-literal">null</span>)<br>                deque.addLast(cur.left);<br>            <span class="hljs-keyword">else</span> &#123;<br>                deque.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(-<span class="hljs-number">1</span>));<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (cur.right != <span class="hljs-literal">null</span>)<br>                deque.addLast(cur.right);<br>            <span class="hljs-keyword">else</span> &#123;<br>                deque.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(-<span class="hljs-number">1</span>));<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> s.toString();<br>        <span class="hljs-comment">//ans = ans.replaceAll(&quot;#&quot;, &quot;&quot;);</span><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>反序列化</strong>：同样借助队列，以及序列化过程的实现逻辑，遍历序列化得到的字符串数组，每次队列中节点出队，都将该节点的孩子节点入队，<strong>对于”null”不进行处理</strong>，直至队列为空；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">deserialize</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        String[] vals = data.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (!vals[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;null&quot;</span>))<br>            root = buildBST(vals);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">buildBST</span><span class="hljs-params">(String[] levelOrder)</span> &#123;<br>        <span class="hljs-keyword">if</span> (levelOrder == <span class="hljs-literal">null</span> || levelOrder.length == <span class="hljs-number">0</span> || levelOrder[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;null&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(Integer.parseInt(levelOrder[<span class="hljs-number">0</span>]));<br>        Deque&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        queue.offer(root);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; levelOrder.length) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> queue.poll();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">leftValue</span> <span class="hljs-operator">=</span> levelOrder[i++];<br>            <span class="hljs-type">String</span> <span class="hljs-variable">rightValue</span> <span class="hljs-operator">=</span> (i &lt; levelOrder.length) ? levelOrder[i++] : <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">if</span> (!leftValue.equals(<span class="hljs-string">&quot;null&quot;</span>)) &#123;<br>                current.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(Integer.parseInt(leftValue));<br>                queue.offer(current.left);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (rightValue != <span class="hljs-literal">null</span> &amp;&amp; !rightValue.equals(<span class="hljs-string">&quot;null&quot;</span>)) &#123;<br>                current.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(Integer.parseInt(rightValue));<br>                queue.offer(current.right);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-链表反转的三种写法</title>
    <link href="/2023/09/05/LeetCode-%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC%E7%9A%84%E4%B8%89%E7%A7%8D%E5%86%99%E6%B3%95/"/>
    <url>/2023/09/05/LeetCode-%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC%E7%9A%84%E4%B8%89%E7%A7%8D%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-链表反转的三种写法"><a href="#LeetCode-链表反转的三种写法" class="headerlink" title="LeetCode-链表反转的三种写法"></a>LeetCode-链表反转的三种写法</h1><h2 id="一、题目来源"><a href="#一、题目来源" class="headerlink" title="一、题目来源"></a>一、题目来源</h2><ul><li><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表 - 力扣（LeetCode）</a></li></ul><h2 id="二、解法总结"><a href="#二、解法总结" class="headerlink" title="二、解法总结"></a>二、解法总结</h2><h3 id="2-1-头插法"><a href="#2-1-头插法" class="headerlink" title="2.1 头插法"></a>2.1 头插法</h3><ul><li><p>这是我学习数据结构的时候经常用的思想，可能有点笨；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//头插法</span><br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">newhead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<span class="hljs-comment">//头节点</span><br>    newhead.next = head;<br>    head = head.next;<br>    <span class="hljs-comment">//断开第一个节点</span><br>    newhead.next.next = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//从第二个节点开始头插法逆置链表</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur_node</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span>(head != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//取下一个节点</span><br>        cur_node = head;<br>        head = head.next;<br>        <span class="hljs-comment">//头插</span><br>        cur_node.next = newhead.next;<br>        newhead.next = cur_node;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> newhead.next;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-2-双指针法"><a href="#2-2-双指针法" class="headerlink" title="2.2 双指针法"></a>2.2 双指针法</h3><ul><li><p>链表的题目一定记得舍得用变量（即指针），会方便很多；</p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.gif" alt="链表反转示意图-来源：代码随想录"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span>&#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head, pre = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> cur.next;<br>        cur.next = pre;<br>        pre = cur;<br>        cur = next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3-递归法"><a href="#2-3-递归法" class="headerlink" title="2.3 递归法"></a>2.3 递归法</h3><ul><li><p>递归法是在双指针法的基础上，将 每次的节点指针反转操作 放在递归中函数中；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverse</span><span class="hljs-params">(ListNode pre, ListNode cur)</span>&#123;<br>    <span class="hljs-keyword">if</span>(cur == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> pre;<br><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> cur.next;<br>    cur.next = pre;<br><br>    <span class="hljs-keyword">return</span> reverse(cur, next);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>链表反转</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-多用户即时通信系统-用户登录</title>
    <link href="/2023/08/28/Java-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/"/>
    <url>/2023/08/28/Java-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-多用户即时通信系统-用户登录"><a href="#Java-多用户即时通信系统-用户登录" class="headerlink" title="Java-多用户即时通信系统-用户登录"></a>Java-多用户即时通信系统-用户登录</h1><ul><li>根据前面的需求分析，实现用户登录功能；</li></ul><h2 id="1-实体类（放在common包下）"><a href="#1-实体类（放在common包下）" class="headerlink" title="1 实体类（放在common包下）"></a>1 实体类（放在common包下）</h2><ul><li>包括用户类（User）、消息类（Message）、消息类型接口（MessageType）</li></ul><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><ul><li>用户类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<span class="hljs-comment">//序列化ID，用来保证序列化和反序列化过程中，User类的一致性</span><br>    <span class="hljs-keyword">private</span> String userID;<span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> String password;<span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String userID, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userID = userID;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getuserID</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setuserID</span><span class="hljs-params">(String userID)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userID = userID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;userID=&#x27;&quot;</span> + userID + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h3><ul><li>消息类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<span class="hljs-comment">//序列化ID，用来保证序列化和反序列化过程中，User类的一致性</span><br>    <span class="hljs-keyword">private</span> String sender_ip;<span class="hljs-comment">//发送方ip</span><br>    <span class="hljs-keyword">private</span> String receiver_ip;<span class="hljs-comment">//接收方ip</span><br>    <span class="hljs-keyword">private</span> String send_data;<span class="hljs-comment">//发送内容</span><br>    <span class="hljs-keyword">private</span> String send_time;<span class="hljs-comment">//发送时间</span><br>    <span class="hljs-keyword">private</span> String message_type;<span class="hljs-comment">//消息类型（如：文本，图片，音频，视频等）</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(String sender_ip, String receiver_ip, String send_data, String send_time, String message_type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sender_ip = sender_ip;<br>        <span class="hljs-built_in">this</span>.receiver_ip = receiver_ip;<br>        <span class="hljs-built_in">this</span>.send_data = send_data;<br>        <span class="hljs-built_in">this</span>.send_time = send_time;<br>        <span class="hljs-built_in">this</span>.message_type = message_type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSender_ip</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sender_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSender_ip</span><span class="hljs-params">(String sender_ip)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sender_ip = sender_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getReceiver_ip</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> receiver_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReceiver_ip</span><span class="hljs-params">(String receiver_ip)</span> &#123;<br>        <span class="hljs-built_in">this</span>.receiver_ip = receiver_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSend_data</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> send_data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSend_data</span><span class="hljs-params">(String send_data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.send_data = send_data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSend_time</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> send_time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSend_time</span><span class="hljs-params">(String send_time)</span> &#123;<br>        <span class="hljs-built_in">this</span>.send_time = send_time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage_type</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message_type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage_type</span><span class="hljs-params">(String message_type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message_type = message_type;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MessageType"><a href="#MessageType" class="headerlink" title="MessageType"></a>MessageType</h3><ul><li>消息类型接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/4 20:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MessageType</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_SUCCEED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>;<span class="hljs-comment">//表示登录成功</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_FAILED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>;<span class="hljs-comment">//表示登录成功</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-功能类（放在service包下）"><a href="#2-功能类（放在service包下）" class="headerlink" title="2 功能类（放在service包下）"></a>2 功能类（放在service包下）</h2><h3 id="UserClientService"><a href="#UserClientService" class="headerlink" title="UserClientService"></a>UserClientService</h3><ul><li>实现用户登录、注册等功能的类；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 该类完成用户登录验证，用户注册等功能</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserClientService</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<span class="hljs-comment">//User对象</span><br>    <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//Socket对象</span><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录验证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userID 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password 密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回登录验证结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkUser</span><span class="hljs-params">(String userID, String password)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><br>        user.setuserID(userID);<br>        user.setPassword(password);<br><br>        <span class="hljs-comment">//向服务器发送User对象，根据服务器返回的结果进行验证</span><br>        socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">9999</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>        <span class="hljs-comment">//发送user对象</span><br>        objectOutputStream.writeObject(user);<br><br>        socket.shutdownOutput();<br><br>        <span class="hljs-comment">//读取服务器端返回的验证结果</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>        <span class="hljs-comment">//读取返回的Message对象</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) objectInputStream.readObject();<br><br>        <span class="hljs-keyword">if</span>(message.getMessage_type().equals(MessageType.MESSAGE_LOGIN_SUCCEED)) &#123;<span class="hljs-comment">//登录成功</span><br>            <span class="hljs-comment">//登录成功，创建一个与服务器端保持通信的线程 -&gt; 创建一个线程类ClientConnectServerThread</span><br>            <span class="hljs-type">ClientConnectServerThread</span> <span class="hljs-variable">clientConnectServerThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientConnectServerThread</span>();<br>            <span class="hljs-comment">//启动客户端与服务器端通信的线程</span><br>            clientConnectServerThread.start();<br>            <span class="hljs-comment">//为了方便拓展，将该线程放在一个集合中进行管理</span><br>            <span class="hljs-comment">//【关于“拓展”】：比如，客户端在私聊另一个客户端的同时，还在与其他客户端发送文件，此时需要同时进行两个任务，使用多线程并发实现</span><br>            ClientConnectServerThreadManage.addClientConnectServerThread(userID, clientConnectServerThread);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//登录失败</span><br>            <span class="hljs-comment">//应该关闭打开的流 和 Socket对象</span><br>            objectInputStream.close();<br>            socket.close();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ClientConnectServerThread"><a href="#ClientConnectServerThread" class="headerlink" title="ClientConnectServerThread"></a>ClientConnectServerThread</h3><ul><li>客户端保持与服务器端通信的线程类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端保持与服务器端通信的线程</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientConnectServerThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-comment">//持有用于网络通信的Socket对象</span><br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientConnectServerThread</span><span class="hljs-params">()</span>&#123; &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientConnectServerThread</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Socket <span class="hljs-title function_">getSocket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> socket;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSocket</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//客户端需要在后台一直保持与服务器端通信，因此使用while循环；</span><br>        <span class="hljs-comment">//【因此这种阻塞式IO的方式，导致效率比较低！】</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-built_in">this</span>.getSocket().getInputStream());<br>                <span class="hljs-comment">//读取服务器端发送的数据，如果没有发送数据，则线程阻塞！</span><br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) objectInputStream.readObject();<br>                System.out.println(<span class="hljs-string">&quot; 处理服务器端发送的消息： &quot;</span> +message.getSend_data());<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ClientConnectServerThreadManage"><a href="#ClientConnectServerThreadManage" class="headerlink" title="ClientConnectServerThreadManage"></a>ClientConnectServerThreadManage</h3><ul><li>管理ClientConnectServerThread线程的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientConnectServerThreadManage</span> &#123;<br>    <span class="hljs-comment">//管理ClientConnectServerThread线程类的集合, 以userID为key；</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HashMap&lt;String, ClientConnectServerThread&gt; clientConnectServerThreads = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientConnectServerThreadManage</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">//向集合添加一个线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addClientConnectServerThread</span><span class="hljs-params">(String userID, ClientConnectServerThread clientConnectServerThread)</span>&#123;<br>        clientConnectServerThreads.put(userID, clientConnectServerThread);<br>    &#125;<br><br>    <span class="hljs-comment">//根据userID获取集合中的某个线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ClientConnectServerThread <span class="hljs-title function_">getClientConnectServerThread</span><span class="hljs-params">(String userID)</span>&#123;<br>        <span class="hljs-keyword">return</span> clientConnectServerThreads.get(userID);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-工具类（放在utils包下）"><a href="#3-工具类（放在utils包下）" class="headerlink" title="3 工具类（放在utils包下）"></a>3 工具类（放在utils包下）</h2><h3 id="Util-KeyBoardInput"><a href="#Util-KeyBoardInput" class="headerlink" title="Util_KeyBoardInput"></a>Util_KeyBoardInput</h3><ul><li>用于处理用户键盘输入的工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Util_KeyBoardInput</span> &#123;<br>    <span class="hljs-comment">//静态属性scanner</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取键盘输入的指定长度的字符串(不能为空串，limit &gt;= 1)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit 限定的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 指定长度的字符串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readString</span><span class="hljs-params">(<span class="hljs-type">int</span> limit)</span>&#123;<br>        <span class="hljs-keyword">return</span> readKeyBoard(limit, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能： 读取一个字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit 读取的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> blankReturn 如果为true ,表示 可以读空字符串。</span><br><span class="hljs-comment">     *   如果为false表示 不能读空字符串。</span><br><span class="hljs-comment">     *如果输入为空，或者输入大于limit的长度，就会提示重新输入。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readKeyBoard</span><span class="hljs-params">(<span class="hljs-type">int</span> limit, <span class="hljs-type">boolean</span> blankReturn)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span>(scanner.hasNextLine())&#123;<br>            line = scanner.nextLine();<br>            <span class="hljs-comment">//如果line.length=0, 即用户没有输入任何内容，直接回车</span><br>            <span class="hljs-keyword">if</span> (line.length() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (blankReturn) <span class="hljs-keyword">return</span> line;<span class="hljs-comment">//如果blankReturn=true,可以返回空串</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//如果blankReturn=false,不接受空串，必须输入内容</span><br>            &#125;<br><br>            <span class="hljs-comment">//如果用户输入的内容大于了 limit，就提示重写输入</span><br>            <span class="hljs-comment">//如果用户如的内容 &gt;0 &lt;= limit ,我就接受</span><br>            <span class="hljs-keyword">if</span> (line.length() &lt; <span class="hljs-number">1</span> || line.length() &gt; limit) &#123;<br>                System.out.print(<span class="hljs-string">&quot;输入长度（不能大于&quot;</span> + limit + <span class="hljs-string">&quot;）错误，请重新输入：&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> line;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-界面类（放在view包下）"><a href="#4-界面类（放在view包下）" class="headerlink" title="4 界面类（放在view包下）"></a>4 界面类（放在view包下）</h2><h3 id="QQClientView"><a href="#QQClientView" class="headerlink" title="QQClientView"></a>QQClientView</h3><ul><li>客户端界面类（目前没有前端，使用命令行输出的方式展示前端）；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QQClientView</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isLoop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//是否退出系统</span><br>    <span class="hljs-keyword">private</span> String userID, password;<span class="hljs-comment">//用户输入的登录信息</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">UserClientService</span> <span class="hljs-variable">userClientService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserClientService</span>();<span class="hljs-comment">//用于用户登录注册等功能的对象</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mainView</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        String selectItem;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span>(isLoop)&#123;<br>            System.out.println(<span class="hljs-string">&quot;=============== 欢迎登录网络通信系统 ===============&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 1 登录系统 \t\t&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 9 退出系统 \t\t&quot;</span>);<br>            System.out.print(<span class="hljs-string">&quot;请输入您的选择：&quot;</span>);<br>            selectItem = Util_KeyBoardInput.readString(<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">switch</span> (selectItem)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;请输入用户名: &quot;</span>);<br>                    userID = Util_KeyBoardInput.readString(<span class="hljs-number">50</span>);<br>                    System.out.print(<span class="hljs-string">&quot;请输入密  码：&quot;</span>);<br>                    password = Util_KeyBoardInput.readString(<span class="hljs-number">50</span>);<br>                    System.out.println(<span class="hljs-string">&quot;登录验证中......&quot;</span>);<br>                    <span class="hljs-keyword">if</span>(userClientService.checkUser(userID, password))&#123;<br>                        System.out.println(<span class="hljs-string">&quot;=============== 欢迎您（&quot;</span>+ userID +<span class="hljs-string">&quot;）登录网络通信系统 ===============&quot;</span>);<br>                        <span class="hljs-comment">//进入二级菜单</span><br>                        <span class="hljs-keyword">while</span>(isLoop)&#123;<br>                            System.out.println(<span class="hljs-string">&quot;=============== 欢迎您（&quot;</span>+ userID +<span class="hljs-string">&quot;），这里是网络通信系统二级菜单 ===============&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 1 显示在线用户列表 \t\t&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 2 群发消息 \t\t&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 3 私聊消息 \t\t&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 4 发送文件 \t\t&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 9 退出系统 \t\t&quot;</span>);<br>                            System.out.print(<span class="hljs-string">&quot;请输入您的选择：&quot;</span>);<br>                            selectItem = Util_KeyBoardInput.readString(<span class="hljs-number">1</span>);<br>                            <span class="hljs-keyword">switch</span> (selectItem)&#123;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;正在显示在线用户列表......&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;群发消息中......&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;私聊消息中......&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;发送文件中......&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>                                    isLoop = <span class="hljs-literal">false</span>;<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">default</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;请输入正确的选项！&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        System.out.println(<span class="hljs-string">&quot;登录失败！请检查用户名和密码是否正确。&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>                    isLoop = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;请输入正确的选项！&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">QQClientView</span> <span class="hljs-variable">qqView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QQClientView</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            qqView.mainView();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>多用户即时通信系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多用户即时通信系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git-常用命令整理</title>
    <link href="/2023/08/28/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <url>/2023/08/28/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Git-常用命令整理"><a href="#Git-常用命令整理" class="headerlink" title="Git-常用命令整理"></a>Git-常用命令整理</h2><h3 id="Git-全局设置"><a href="#Git-全局设置" class="headerlink" title="Git 全局设置"></a>Git 全局设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git config --global user.name &quot;用户名&quot;<br>git config --global user.email &quot;用户邮箱&quot;<br></code></pre></td></tr></table></figure><h3 id="创建新的仓库并提交代码"><a href="#创建新的仓库并提交代码" class="headerlink" title="创建新的仓库并提交代码"></a>创建新的仓库并提交代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone 仓库地址<br>cd 仓库目录<br>git switch -c 新的分支名<br>touch README.md <br>git add README.md<br>git commit -m &quot;本次提交的描述信息&quot;<br>git push -u origin 新的分支名<br></code></pre></td></tr></table></figure><h3 id="推送本地现有文件夹"><a href="#推送本地现有文件夹" class="headerlink" title="推送本地现有文件夹"></a>推送本地现有文件夹</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">cd 文件夹目录<br>git init <br>git remote add origin 远程仓库地址<br>git add .<br>git commit -m &quot;描述信息&quot;<br>git push -u origin 分支名 <br></code></pre></td></tr></table></figure><h3 id="origin-的含义"><a href="#origin-的含义" class="headerlink" title="origin 的含义"></a>origin 的含义</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">“git remote add origin 远程仓库地址”<br><br>origin 是 该远程仓库的别名<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs git">#克隆远程仓库的指定分支到本地<br>git clone -b 远程分支名 远程分支地址<br><br>#pull远程仓库的指定分支<br>git pull origin 远程指定分支<br><br>#push代码【仅第一次需要使用 -u 选项，表示将本地分支关联到远程同名分支】<br>git push -u origin 分支名 <br>git push origin 分支名 <br><br></code></pre></td></tr></table></figure><h3 id="更改远程仓库地址"><a href="#更改远程仓库地址" class="headerlink" title="更改远程仓库地址"></a>更改远程仓库地址</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs git">#1.查看当前远程仓库地址<br>git remote -v<br><br>#2.更改远程仓库值<br>git remote set-url 远程仓库名称[一般是origin] 远程仓库地址<br><br>#例如：<br>git remote set-url origin https://gitee.com/sea-365/sea_2022_2023.git<br><br>#3.再次查看远程仓库地址进行验证<br>git remote -v<br><br>#4.推送一些新的更改...<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-StringBuilder类</title>
    <link href="/2023/08/27/Java-StringBuilder%E7%B1%BB/"/>
    <url>/2023/08/27/Java-StringBuilder%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-StringBuilder类"><a href="#Java-StringBuilder类" class="headerlink" title="Java-StringBuilder类"></a>Java-StringBuilder类</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li><code>StringBuilder</code>类位于<code>java.lang</code>包中；</li><li>用于在内存中构建和操作字符串；</li><li>允许在一个可变的字符序列上执行插入、添加、删除等操作，而不会像使用常规字符串一样每次都创建一个新的字符串对象；</li><li>线程不安全，<code>StringBuffer</code>是线程安全版本的<code>StringBuilder</code>;</li></ul><h2 id="二、特性-x2F-特点"><a href="#二、特性-x2F-特点" class="headerlink" title="二、特性&#x2F;特点"></a>二、特性&#x2F;特点</h2><h3 id="可变性"><a href="#可变性" class="headerlink" title="可变性"></a>可变性</h3><ul><li>与 <code>String</code> 类不同，<code>StringBuilder</code> 允许你修改其内容，而不需要每次都创建一个新的对象。适用于<strong>需要频繁更改字符串内容</strong>的场景；</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><code>StringBuilder</code> 类提供了许多用于操作字符串的方法，如：<ul><li><code>append</code>:</li><li><code>insert</code></li><li><code>delete</code></li><li><code>replace</code></li><li>…</li></ul></li></ul><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ul><li>由于 <code>StringBuilder</code> 具有可变性，它在构建大型字符串时比单纯使用字符串连接操作（如使用 <code>+</code> 操作符）更高效。因为字符串连接操作会创建多个临时对象，而 <code>StringBuilder</code> 则在单个对象中执行所有操作。</li></ul><h3 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h3><ul><li><code>StringBuilder</code> 类不是线程安全的，如果多个线程同时操作同一个 <code>StringBuilder</code> 对象，可能会导致意外的结果。</li><li>如果需要在线程安全的环境中操作字符串，可以考虑使用 <code>StringBuffer</code> 类，它是 <code>StringBuilder</code> 的线程安全版本。</li></ul><h2 id="三、用法"><a href="#三、用法" class="headerlink" title="三、用法"></a>三、用法</h2><ul><li><p>构造方法</p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/StringBuilder%E7%B1%BB.png" alt="StringBuilder类"></p></li><li><p>用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBuilderExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        sb.append(<span class="hljs-string">&quot;Hello, &quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;world!&quot;</span>);<br>        sb.insert(<span class="hljs-number">7</span>, <span class="hljs-string">&quot; beautiful &quot;</span>);<br>        sb.delete(<span class="hljs-number">5</span>, <span class="hljs-number">7</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> sb.toString();<br>        System.out.println(result); <span class="hljs-comment">// Output: Hello beautiful world!</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>一些知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哈希表-理论介绍</title>
    <link href="/2023/06/14/%E5%93%88%E5%B8%8C%E8%A1%A8-%E7%90%86%E8%AE%BA%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/06/14/%E5%93%88%E5%B8%8C%E8%A1%A8-%E7%90%86%E8%AE%BA%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="哈希表-理论介绍"><a href="#哈希表-理论介绍" class="headerlink" title="哈希表-理论介绍"></a>哈希表-理论介绍</h1><h2 id="一、哈希表"><a href="#一、哈希表" class="headerlink" title="一、哈希表"></a>一、哈希表</h2><ul><li>哈希表（Hash table），也叫散列表；</li><li><strong>一般哈希表都是用来快速判断一个元素是否出现集合里。</strong></li></ul><h2 id="二、哈希函数"><a href="#二、哈希函数" class="headerlink" title="二、哈希函数"></a>二、哈希函数</h2><ul><li>以学校学生查询为例，哈希函数如下图所示：【来自代码随想录】</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/%E5%93%88%E5%B8%8C%E8%A1%A8-%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0_1.png" alt="哈希表-哈希函数_1"></p><ul><li>通过hashCode把名字转化为数值；<ul><li>一般hashcode是通过特定编码方式，可以将其他数据格式转化为不同的数值；</li></ul></li><li>这样就可以把学生名字映射为哈希表上的索引数字。</li></ul><h2 id="三、哈希碰撞"><a href="#三、哈希碰撞" class="headerlink" title="三、哈希碰撞"></a>三、哈希碰撞</h2><ul><li>当索引数量小于待映射的学生数量时，就会不可避免地产生哈希碰撞；</li><li>解决方法：1.拉链法；2.线性探测法；</li><li>考研408中学过，不详细整理了；</li></ul>]]></content>
    
    
    <categories>
      
      <category>代码随想录</category>
      
      <category>哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-JDBC知识整理</title>
    <link href="/2023/06/12/Java-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <url>/2023/06/12/Java-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库连接池知识梳理"><a href="#数据库连接池知识梳理" class="headerlink" title="数据库连接池知识梳理"></a>数据库连接池知识梳理</h1><ul><li>还没看。。。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>数据库连接池</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数据库连接池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-Servlet知识梳理</title>
    <link href="/2023/06/09/JavaWeb-Servlet%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/06/09/JavaWeb-Servlet%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb-Servlet知识梳理"><a href="#JavaWeb-Servlet知识梳理" class="headerlink" title="JavaWeb-Servlet知识梳理"></a>JavaWeb-Servlet知识梳理</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><br>Servlet的生命周期由容器（如Tomcat、<span class="hljs-keyword">Jetty等）管理。</span><br><span class="hljs-keyword"></span><br>当服务器接收到一个请求时，容器将根据请求的URL将其路由到相应的Servlet。容器会自动创建Servlet的实例，并调用其初始化方法进行初始化。<br><br>一旦Servlet初始化完成，容器就可以并发地调用Servlet的service方法来处理多个请求。<br><br>最后，当服务器关闭或者Servlet被移除时，容器会调用Servlet的销毁方法来清理资源。<br><br>Servlet可以通过<span class="hljs-keyword">Java编程语言来编写，并且可以使用Java的所有功能和库。</span><br><span class="hljs-keyword"></span><br>它提供了一种可靠、可扩展和安全的方式来开发Web应用程序。<br><br>Servlet还支持会话管理、请求转发、过滤器、Cookie处理等功能，使开发者能够构建复杂的Web应用程序。<br><br>总结起来，Servlet是<span class="hljs-keyword">Java编写的服务器端程序，用于处理客户端请求并生成响应。它是基于Java的Web开发的核心组件之一，提供了许多功能和特性来简化Web应用程序的开发和管理。</span><br></code></pre></td></tr></table></figure><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><ul><li>概念：<ul><li>Servlet是一种<strong>Java</strong>编写的<strong>服务器端程序</strong>，用于<strong>处理客户端发送的请求并生成响应</strong>。它是Java Servlet API的一部分，该API提供了一组类和接口，用于<strong>开发基于Java的Web应用程序</strong>。</li></ul></li><li>特点：<ul><li>Servlet通常用于<strong>动态</strong>生成网页内容，与客户端进行交互，并<strong>访问数据库和其他外部资源</strong>。</li></ul></li></ul><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><ul><li>前置工作<ul><li>创建工程，并为工程添加web application 支持；</li><li>在WEB_INF目录下新建文件夹<code>lib</code>，复制Tomcat解压目录下<code>lib/tomcat-api.jar</code>文件到<code>lib</code>目录下；</li><li>选中上述jar包，右键选择add as library，点击确定即可引入jar包；</li></ul></li></ul><h3 id="2-1-开发一个helloServlet"><a href="#2-1-开发一个helloServlet" class="headerlink" title="2.1 开发一个helloServlet"></a>2.1 开发一个helloServlet</h3><ul><li><p>浏览器 访问<code>http://localhost:8080/Servlet_01_helloServlet/helloServlet</code>时，后台输出 “hi HelloServelt”;</p><ul><li>1.新建HelloServlet类，实现Servlet接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 开发一个HelloServlet：浏览器 访问 http://localhost:8080/Servlet_01_helloServlet/helloServlet 时，后台输出 &quot;hi HelloServelt&quot;;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/6/12 17:20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-comment">//1.实现Servlet接口</span><br>    <span class="hljs-comment">//2.实现接口中定义的方法</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-comment">//初始化Servlet，创建HelloServlet实例时，调用init方法进行初始化【此方法仅调用一次！！】</span><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//返回ServletConfig对象，也就是返回Servlet配置</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//处理浏览器的请求【Get/Post】:</span><br>        <span class="hljs-comment">//    （1）浏览器每次请求Servlet时，都会调用此方法；</span><br>        <span class="hljs-comment">//    （2）tomcat调用此方法时，会把http请求的数据封装成一个实现了ServletRequest接口的request对象；</span><br>        <span class="hljs-comment">//    （3）通过ServletRequest对象可以获取用户提交的数据；</span><br>        <span class="hljs-comment">//    （4）ServletResponse对象用于返回数据给浏览器</span><br>        <span class="hljs-comment">//        【Servlet将待返回的数据封装成ServletResponse对象给tomcat，tomcat从该对象中取出数据，封装成http响应格式返回给浏览器】</span><br>      System.out.println(<span class="hljs-string">&quot;hi HelloServlet！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//返回Servlet的信息，使用较少</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//Servlet实例销毁时调用【仅调用一次！！】</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>2.在web.xml中配置Servlet</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--web.xml主要用于配置该web使用到的Servlet--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        配置HelloServlet</span><br><span class="hljs-comment">            (1)servlet-name:Servlet名称，唯一</span><br><span class="hljs-comment">            (2)servlet-class:Servlet全路径，Tomcat反射生成Servlet时需要使用；【包名.xxxServlet】</span><br><span class="hljs-comment">            (3)url-pattern:访问该Servlet的url路径;【/xxx】</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        配置完成后需要重新发布服务!</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/helloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>3.在浏览器访问<code>http://localhost:8080/Servlet_01_helloServlet/helloServlet</code>时，控制台输出如下信息：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Servlet_%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8_1.png" alt="Servlet_基本使用_1"></p></li></ul><h3 id="2-2-浏览器调用Servlet的流程分析"><a href="#2-2-浏览器调用Servlet的流程分析" class="headerlink" title="2.2 浏览器调用Servlet的流程分析"></a>2.2 浏览器调用Servlet的流程分析</h3><ul><li>当浏览器发送请求到一个Servlet时，以下是请求处理的详细步骤：<ul><li><strong>1.建立连接阶段</strong><ul><li>用户在浏览器中输入URL并按下回车键。</li><li>浏览器解析URL，提取出主机名（如<a href="http://www.example.com)和路径(如/servlet/MyServlet%EF%BC%89%E3%80%82">www.example.com）和路径（如/servlet/MyServlet）。</a></li><li>浏览器尝试建立与主机的TCP连接，使用默认的HTTP端口（通常是80）。</li></ul></li><li><strong>2.封装请求消息</strong><ul><li>一旦TCP连接建立，浏览器会构建一个HTTP请求消息。<ul><li>请求行：包括HTTP方法（GET、POST等），路径和HTTP协议版本。</li><li>请求头：包含与请求相关的附加信息，例如User-Agent（浏览器信息），Accept（可接受的响应内容类型）等。</li><li>请求体（对于POST请求）：包含通过表单提交的数据等。</li></ul></li><li>浏览器将构建的HTTP请求消息发送到服务器。</li></ul></li><li><strong>3.Tomcat服务器接收到请求消息</strong><ul><li>服务器接收到请求后，会根据请求消息中的路径找到对应的Servlet。</li><li>服务器创建一个HTTP请求对象，封装了请求的相关信息，例如HTTP方法、请求头、请求参数等。</li><li>服务器调用Servlet容器（如Tomcat）的相关方法来处理请求，一般是调用doGet()或doPost()等方法。</li><li>Servlet容器根据请求的HTTP方法调用相应的Servlet方法（doGet()或doPost()等）。</li><li>Servlet方法执行业务逻辑，可能包括与数据库交互、生成响应内容等。</li><li>Servlet方法生成一个HTTP响应对象，包含响应的状态码、响应头和响应体等信息。</li><li>Servlet容器将HTTP响应对象返回给服务器。</li><li>服务器将HTTP响应对象封装成HTTP响应消息，并通过TCP连接发送回浏览器。</li><li>浏览器接收到HTTP响应消息后，解析响应消息。</li><li>浏览器根据响应消息中的状态码判断请求的成功与否（例如200表示成功，404表示未找到等）。</li><li>如果请求成功，浏览器会解析响应头和响应体，并根据内容类型进行适当的处理（例如显示网页内容、下载文件等）。</li><li>浏览器渲染响应内容，并显示在用户界面上。</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
      <category>Servlet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
      <tag>Servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-浏览器请求服务器资源过程分析</title>
    <link href="/2023/06/06/JavaWeb-%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B5%84%E6%BA%90%E5%88%86%E6%9E%90/"/>
    <url>/2023/06/06/JavaWeb-%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B5%84%E6%BA%90%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb-浏览器请求服务器资源过程分析"><a href="#JavaWeb-浏览器请求服务器资源过程分析" class="headerlink" title="JavaWeb-浏览器请求服务器资源过程分析"></a>JavaWeb-浏览器请求服务器资源过程分析</h1><ul><li>先给出整体示意图：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B5%84%E6%BA%90%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90_1.png" alt="image-20230606161652332"></p><ul><li>以请求路径<code>http://localhost:8080/test/test.html</code>为例进行分析：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B5%84%E6%BA%90%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90_2.png" alt="浏览器请求服务器资源过程分析_2"></p><ul><li>上述webapp资源如下图：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B5%84%E6%BA%90%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90_3.png" alt="浏览器请求服务器资源过程分析_4"></p><h2 id="一、整体过程分析"><a href="#一、整体过程分析" class="headerlink" title="一、整体过程分析"></a>一、整体过程分析</h2><ul><li><p>1.根据浏览器的请求路径，解析出服务器主机名；</p></li><li><p>2.获得主机名后，先查询本地hosts文件中是否有主机ip和该主机名称的映射；</p><ul><li>例如我本地的hosts文件中是这样的：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B5%84%E6%BA%90%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90_4.png" alt="浏览器请求服务器资源过程分析_4"></p><ul><li>2.1 如果hosts文件中有该映射，则：<ul><li>封装一个http请求发送给该主机ip对应的服务器；</li><li>服务器解析该请求，得到相应的web应用; &#x3D;&#x3D;&gt; <strong>test</strong></li><li>解析出浏览器请求的资源; &#x3D;&#x3D;&gt; <strong>test.html</strong></li><li>获取该资源，并封装成一个http响应，返回给浏览器；</li><li>浏览器获得服务器返回的响应后，进行解析并显示；</li></ul></li><li>2.2 如果本地hosts文件中没有该映射，则：进行DNS域名解析获取服务器主机ip，然后重复2.1；</li></ul></li></ul><h2 id="二、http请求-x2F-响应"><a href="#二、http请求-x2F-响应" class="headerlink" title="二、http请求&#x2F;响应"></a>二、http请求&#x2F;响应</h2><ul><li><p>同样以请求路径<code>http://localhost:8080/test/test.html</code>为例进行分析</p></li><li><p>在浏览器中打开开发人员工具，可以抓取浏览器请求资源过程中发出的所有请求以及相应的响应内容；</p></li><li><p>第一次请求html</p></li><li><p>第二次请求图片</p></li><li><p>后面请求一些其他内容；</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B5%84%E6%BA%90%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90_5.png" alt="浏览器请求服务器资源过程分析_5"></p><h3 id="2-1-http请求"><a href="#2-1-http请求" class="headerlink" title="2.1 http请求"></a>2.1 http请求</h3><ul><li>例如，请求test.html页面时，封装的http请求头如下图所示，包含请求的资源、请求服务器主机地址和端口、请求方式、http协议版本等信息；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B5%84%E6%BA%90%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90_6.png" alt="浏览器请求服务器资源过程分析_6"></p><h3 id="2-2-http响应"><a href="#2-2-http响应" class="headerlink" title="2.2 http响应"></a>2.2 http响应</h3><ul><li>接收到浏览器的请求后，根据http请求的信息，封装一个http响应返回给浏览器，http响应中会包含响应头信息，包括http协议版本、资源内容的类型，长度（字节数）等信息，以及返回的html资源，如下图所示。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B5%84%E6%BA%90%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90_7.png" alt="浏览器请求服务器资源过程分析_7"></p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B5%84%E6%BA%90%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90_8.png" alt="浏览器请求服务器资源过程分析_8"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
      <category>WEB开发前的准备</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-Tomcat的安装和启动（Macbook M1环境）</title>
    <link href="/2023/06/06/JavaWeb-Tomcat%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E5%8A%A8/"/>
    <url>/2023/06/06/JavaWeb-Tomcat%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb-Tomcat的安装和启动（Macbook-M1环境）"><a href="#JavaWeb-Tomcat的安装和启动（Macbook-M1环境）" class="headerlink" title="JavaWeb-Tomcat的安装和启动（Macbook M1环境）"></a>JavaWeb-Tomcat的安装和启动（Macbook M1环境）</h1><h2 id="一、下载Tomcat"><a href="#一、下载Tomcat" class="headerlink" title="一、下载Tomcat"></a>一、下载Tomcat</h2><ul><li>进入Tomcat官网，选择对应的版本，这里我选择的版本是<code>8.5.89</code>;</li><li>如图点击<code>zip</code>下载，并解压即可；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Tomcat%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E5%8A%A8_1.png" alt="Tomcat安装和启动_1"></p><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Tomcat%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E5%8A%A8_2.png" alt="Tomcat安装和启动_2"></p><h2 id="二、配置环境变量并启动Tomcat"><a href="#二、配置环境变量并启动Tomcat" class="headerlink" title="二、配置环境变量并启动Tomcat"></a>二、配置环境变量并启动Tomcat</h2><ul><li><p>在终端输入以下命令，进入系统环境配置所在的文件，打开<code>.zshrc</code>文件进行编辑；</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">open ~/<br></code></pre></td></tr></table></figure></li></ul><p>​<img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Tomcat%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E5%8A%A8_3.png" alt="Tomcat安装和启动_3"></p><ul><li>在该文件中增加以下环境变量，其中第一个变量是上一个步骤中Tomcat解压路径；</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">CATALINA_HOME</span>=<span class="hljs-string">&quot;xxx/xx/xx/Tomcat8.5.89/apache-tomcat-8.5.89&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">Path</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$CATALINA_HOME</span>/bin&quot;</span><br></code></pre></td></tr></table></figure><ul><li>保存并关闭<code>.zshrc</code>文件，然后打开终端，进入Tomcat解压路径下的bin目录：</li></ul><p>​<img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Tomcat%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E5%8A%A8_4.png" alt="Tomcat安装和启动_4"></p><ul><li><p>执行以下命令，获取执行<code>.sh</code>脚本文件的权限，然后执行<code>startup.sh</code>文件；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x *.sh<br><br>./startup.sh<br></code></pre></td></tr></table></figure></li><li><p>最后，命令行出现以下输出并且在浏览器中输入<code>http://localhost:8080</code>，出现经典页面，即表示Tomcat启动成功！</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Tomcat%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E5%8A%A8_5.png" alt="Tomcat安装和启动_5"></p><ul><li><p>如果需要关闭Tomcat服务，执行以下命令即可：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">./shutdown.sh<br></code></pre></td></tr></table></figure><ul><li>注意：关闭后，访问上述地址，就没有经典页面出现了，表示Tomcat服务关闭成功！</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
      <category>WEB开发前的准备</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-概念介绍</title>
    <link href="/2023/06/05/JavaWeb-%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/06/05/JavaWeb-%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb-概念介绍"><a href="#JavaWeb-概念介绍" class="headerlink" title="JavaWeb-概念介绍"></a>JavaWeb-概念介绍</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p>WEB：表示WEB服务器可供浏览器访问的资源，分为以下两种：</p><ul><li>静态资源：web中供浏览器浏览的数据始终不变，如html页面；</li><li>动态资源：如servlet、php等；</li></ul></li><li><p>静态WEB开发技术：html，css；</p></li><li><p>动态WEB开发技术：Servlet，SpringBoot、SpringMVC、PHP、ASP.NET等；</p></li><li><p>B&#x2F;S开发：</p><ul><li>B：Browser（浏览器）</li><li>S：Server（服务器）</li></ul></li><li><p>C&#x2F;S开发：</p><ul><li><p>C：Client（客户端）</p></li><li><p>S：Server（服务器端）</p></li></ul></li><li><p>两种架构存在的问题和优势：</p><ul><li>兼容性：由于浏览器种类较多；</li><li>安全性：B&#x2F;S架构不好控制（相对于C&#x2F;S），数据的发送和返回受浏览器控制；</li><li>易用性：B&#x2F;S架构易用性较好，例如，版本升级时，C&#x2F;S架构两端都需要进行升级；</li></ul></li></ul><h2 id="WEB服务软件介绍"><a href="#WEB服务软件介绍" class="headerlink" title="WEB服务软件介绍"></a>WEB服务软件介绍</h2><ul><li>哪台机器安装了服务软件，就是服务器；<ul><li>如JavaWeb服务器，MySQL服务器；</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
      <category>WEB开发前的准备</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-XML总结</title>
    <link href="/2023/06/05/JavaWeb-XML%E6%80%BB%E7%BB%93/"/>
    <url>/2023/06/05/JavaWeb-XML%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb-XML总结"><a href="#JavaWeb-XML总结" class="headerlink" title="JavaWeb-XML总结"></a>JavaWeb-XML总结</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h3 id="1-1-为什么需要XML"><a href="#1-1-为什么需要XML" class="headerlink" title="1.1 为什么需要XML"></a>1.1 为什么需要XML</h3><ul><li>需求：<ul><li>1.两个程序之间的数据通信<strong>格式</strong>（目前基本都是json格式的数据了）；</li><li>2.作为服务器的<strong>配置文件</strong>；</li><li>3.spring系列框架中的各种<strong>配置文件</strong>；</li></ul></li></ul><h3 id="1-2-XML文件结构"><a href="#1-2-XML文件结构" class="headerlink" title="1.2 XML文件结构"></a>1.2 XML文件结构</h3><ul><li><p>xml声明</p></li><li><p>元素</p></li><li><p>属性</p></li><li><p>注释</p></li><li><p>CDATA区、特殊字符</p></li><li><p>如下：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">students</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>jack<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>bob<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br>  <br>    &lt;![CDATA[<br>        这里的内容将不会被解析引擎解析<br>    ]]&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">students</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    1.xml声明：&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    2.元素：</span><br><span class="hljs-comment">        &lt;students&gt; </span><br><span class="hljs-comment">            ...</span><br><span class="hljs-comment">        &lt;/students&gt;</span><br><span class="hljs-comment">    3.属性</span><br><span class="hljs-comment">        id=&quot;100&quot;</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">    4.注释</span><br><span class="hljs-comment">    5.CDATA区、特殊字符</span><br><span class="hljs-comment">     </span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h2><h3 id="2-1-元素"><a href="#2-1-元素" class="headerlink" title="2.1 元素"></a>2.1 元素</h3><ul><li>注意事项：<ul><li>每一个XML文件有且仅有一个根元素；</li><li>根元素是一个完全包括文档中其他所有元素的元素；</li><li>标签之间允许嵌套，不允许交叉；</li></ul></li></ul><h3 id="2-2-属性"><a href="#2-2-属性" class="headerlink" title="2.2 属性"></a>2.2 属性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">student</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>jack<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><code>id=&quot;100&quot;</code>即为元素<code>student</code>的一个属性；</p></li><li><p>注意事项：</p><ul><li>属性用双引号或单引号分隔，若属性值中含有<code>&quot;</code>，则使用<code>&#39;</code>分隔，反之，用<code>&quot;</code>分隔；</li><li>一个元素可以有多个属性，但是属性名称（区分大小写）不可以重复；</li><li>属性值不能包含<code>&amp;</code>字符；</li></ul></li></ul><h3 id="2-3-CDATA区"><a href="#2-3-CDATA区" class="headerlink" title="2.3 CDATA区"></a>2.3 CDATA区</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <br>&lt;![CDATA[<br>    &lt;script&gt;这里的内容(包括script标签)将不会被解析引擎解析&lt;script&gt;<br>]]&gt;<br></code></pre></td></tr></table></figure><ul><li>CDATA区中所有字符都会被当做简单文本，不被XML解析引擎解析；</li><li>不允许嵌套；</li></ul><h3 id="2-4-转移字符"><a href="#2-4-转移字符" class="headerlink" title="2.4 转移字符"></a>2.4 转移字符</h3><table><thead><tr><th>转义符</th><th>符号</th></tr></thead><tbody><tr><td>&amp;lt;</td><td>&lt;</td></tr><tr><td>&amp;gt;</td><td>&gt;</td></tr><tr><td>&amp;amp;</td><td>&amp;</td></tr><tr><td>&amp;quot;</td><td>“</td></tr><tr><td>&amp;apos;</td><td>‘</td></tr></tbody></table><h2 id="三、XML解析"><a href="#三、XML解析" class="headerlink" title="三、XML解析"></a>三、XML解析</h2><ul><li><p>XML解析技术介绍</p><ul><li>早期：DOM和Sax，都已经过时了；</li><li>当前：jdom &#x3D;&#x3D;&gt; dom4j (在原来的dom基础上进行封装)<ul><li>pull &#x3D;&#x3D;&gt; Android开发中使用；</li></ul></li></ul></li><li><p>主要介绍dom4技术；</p></li></ul><h3 id="3-1-dom4j技术"><a href="#3-1-dom4j技术" class="headerlink" title="3.1 dom4j技术"></a>3.1 dom4j技术</h3><ul><li><p>获取Document对象的方式：</p><ul><li>需要下载dom4j包；</li></ul></li><li><p>1.读取XML文件，获得document对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SAXReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br><span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> reader.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;xxx/xxx.xml&quot;</span>)); <br></code></pre></td></tr></table></figure></li><li><p>2.解析XML形式的文本，得到document对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxxxxx&quot;</span>;<br><span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> DocumentHelper.parse(text);<br></code></pre></td></tr></table></figure></li><li><p>3.手动创建document对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> DocumentHelper.createDocument();<br><span class="hljs-type">Element</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> document.addElement(<span class="hljs-string">&quot;&lt;xxx&gt;&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
      <category>WEB开发前的准备</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
      <tag>XML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>祝小温23岁生日快乐！</title>
    <link href="/2023/06/05/%E7%A5%9D%E5%B0%8F%E6%B8%A923%E5%B2%81%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90%EF%BC%81/"/>
    <url>/2023/06/05/%E7%A5%9D%E5%B0%8F%E6%B8%A923%E5%B2%81%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="444fb29962291a97ef3689a367b28cd2a593a9c9f64999d313760cb9c8dbd491">7ccdbd9a8d189922813fab3f8512bc1ba07a1c23a49e2159bc35f6bdbc2c1d231e6e5dd2dde47c8fed2b3d62b39b36a4fb1f010fb25eb881659331f87e4cfc8cd1340c36249d4cdbd718d8d5ee6c4abb8f35b4b461f42cb6e78abdbe55d0798161998b84b38ad299086ec423810455212ed677a3f7f623e02d0558d3e95c2392761e69c301f9718b34f8854c81b3d98724b815c7d3e3557101c3d3a852280ced688ddde83f1d8c0c74f89438014acd4634c80b324970e1bf84aa9964abd72f037a1f1c2ed98f4332a9dd7fc3222d7c17a1a8e1f0c6359bb0b794e993d6f3fad3615d25673cf64faa4101b281bdafb1b3c5eca6553b8fbf245f4a1681614907a1718ce1c05de5cfe6834415fd3f51e0e41e9fc13b252732317538c7545ce0fc59a4bdc83904481341504b195a99e0c2c4d91e47bbc9f4a445d5390ccf493ed8e609b0a7d4c9e80644242d9af8488f4681faf54f90fcbff3ebbee6aec5bbcb108a8481e4d343cdb86be37fe73e8da0708f1825312f656f6dba49aa69cf5bf1061b80bbe6721d19a7c08b64e6cc7e1fc5e128702e3a8bc685cea16aa0397c4f18d8bc8f133d50906e4d59f56f131455aa8e8261bd1d8ab0199867fa0cf4bb8b72d8bc66e29a03b3106f23f6bea93699999c82f696b727547628546f0605a109bc3456492d16670acc1a0d3655dac5b8d322b698cd26d1e171eb07825e1b15aa55663b6ef9c183b4bf099c393bb042cf6feaa6886d553920797577676924616480027f2d22e9dc4be43120a19207eb33ea5546fc5233145d1f6c20a6c60fa74fb353bc1fec7a6e3614ff779f93618152311825de48e63ff31329b02aca859ae1623dfb4ea58028388836a720d384c77dcbdc183c7ac2470be5308df44860d1d1161b37b340b5da26e25e12981d7251c277fefd13376babe5bf0594c013d32cf9b4ef319fed5f9c4f979e2b55310465489e38dc5d9f3ecf76e4d8690dc4777a2d24482b3b3a16d04786e049d367636f0aab2a0198c129bfc7bf1fb0636d223df6947231e352e9e7237ea6a94f24ec0c6dbb9a9332c43af40b69ee7f76091844ccd8d2eac874a166d69d965f88a7a9be40fbec876f9c0b4b1bfa0b2379377fb2db34ceeb6adbb19c1bd639dd478b274bddecea9909362b1a75fb23f9f7242a72e4b0f771a564138cbbd6aa4c2146aca8bf0fe2206c670e2765adcea797d6bbc37fc268b87922ae99770a5d048d2a502c984319c3dafe40bbaea10cbe7007d85db0512855e76856f885edacfcc95848e08e3afe3f6fe4dcc1ca2fcb82af0c69a01202dcf052061fd775e74431726bae89810b4b957c20cedb1b22d870580d0dab1f643ae2b06c9011fbd0197dad09d19e86b83d3f70185680a1115ffe49d37d52a873d3fa559831674bad87a5016d3fb771769d3b5b4c136a4e4140e88d66872e709f5db40dbafa412aefc8ce6cac961d765eeab1c0e8a2e0cb98dc328796d597c8d62ac18b50a3732883387b16b563474310218aeaa628ae1bdb50c3e078eaf7e58c8d6ef7bdd02f14d0950c00136cbebae44be4f86afadd48879b8647ab1edbc1d4e9f2c727d444301ee96c512cab7616925732734b5fb93480d95aa49a772af8416eb2917fb1e35501dbfc99df0a6d96e4632b0a5322b16e3adf34b92905c816bce92644b8dc8bd5ac5260d99609afee5ad6468d12f2b077a05bd586307964bb1bba275635c07a12bb8c68bedbf554ba8e58e86f71b3b4bf9877f2ba86e674877cb91271c0e5311c8a81d96b3ff3a8101619ef469a6e711db32e9dc14b45aa29104a9ecc6fabcf65fbb75037e67c43f7c5cfc10cc5059f6e525ca99745bc6959c8f8b2198d357946b303ee6dbb89884c9f7d105e9bd2447e912c27a5e9518a32e4bab74f30574b68206ce37e6633bbde5ad7e25c744cdcfc59252925436cad9f9c1fb47c23055fb8599f9037a3223a6422782774251ec8ec819a8157954f1830f535ccc3ef4dc8f9d9dc60affb1653e37250809258dc447bf32197be771ee33ec79fc6ad64720164a64569b1b7ca54751e4aaebbe8911da5da87e86f14898d303797505c45842ac5ea9b9d430818d8ac9c0312bf1b12bb6d91a028bef16c7596dc4eb91891f63f49a83c61c18c7169a8f956cadd4d0e9f01d834a7cb518ab69bd7af181641de90ae24d1b5cd737bf3c6af6cef421aac9ab9e31bea4493ed41b077a797c0469c4dac4a6a7a7605792afc10164d55be6ba5b885bbf8324cf184dd3b16304948b40e8a7681f28bf71352e3540cfc20ed224fcbcbcb5ff3567c61ad12557cdb4022f013bbae716deee36dec3131d33e85923afd968ea35bb1059ec384864b6f727a62e503df89ab9e2b27bcbb75c0628f35074ce2751561228b95a83a573606d77959243d607f6d246d092781e458135e7d5eb5b931eaa539a60a93283e1fc49faa949f855eb9d946463decb0ee671070a2385cccebae18f4f7d46467ad4fa4644ebacec5df792649ee252b9eb5313357ee400885adfe83103b6c9939013a6a19c886bcf745caef7fa31701b75fd870f4b29c1f6c00914366f7cf010d1d142d5f618dcfd089c9967f4952012ce4da0ef6fbca2db287737f47ace1b958f606da6afd37e0b2b45003fcb15a629dd9335b81149ee90785be2087c8d20f1a00d35779c71f2d4193a54ffedbed7584085d05578c8ce1e548a7586afe96c7b17a0a11cf585d45b01fb05bddf44b1f232db0fae33e4dac831e791b5cf4bb6f0d595eb950848d7f5293d7df8746cf01d36e0929a8bca5cb24d2f41c8ec862a09d4401e1cb9fac7518948f53f959172a7a7e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章已加密，请输入密码阅读！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>学习路上的一些记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>生日快乐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS-面向对象总结</title>
    <link href="/2023/06/04/JS-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/"/>
    <url>/2023/06/04/JS-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="JS-面向对象总结"><a href="#JS-面向对象总结" class="headerlink" title="JS-面向对象总结"></a>JS-面向对象总结</h2><h2 id="一、对象"><a href="#一、对象" class="headerlink" title="一、对象"></a>一、对象</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><ul><li><p>一个包含相关数据和方法的集合；</p></li><li><p>看下面的例子：</p></li><li><p>在js文件中定义了一个person对象，包含一些数据和功能；</p><ul><li>html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS面向对象<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../JS/JS_06.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br>    name : [<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Smith&#x27;</span>],<br>    age : <span class="hljs-number">32</span>,<br>    gender : <span class="hljs-string">&#x27;male&#x27;</span>,<br>    interests : [<span class="hljs-string">&#x27;music&#x27;</span>, <span class="hljs-string">&#x27;skiing&#x27;</span>],<br>    bio : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>[<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27; is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old. He likes &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">interests</span>[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27; and &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">interests</span>[<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;.&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">greeting</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hi! I\&#x27;m &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.&#x27;</span>);<br>    &#125;<br>  &#125;;<br></code></pre></td></tr></table></figure><ul><li>在浏览器控制台访问这个对象，以及相应的信息：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/JS-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_01.png" alt="JS-面向对象_01"></p></li><li><p>通过上述例子，可以看到：</p><ul><li>对象成员的值可以是任意的：<ul><li>name是string类型，age是数字，还有两个数组；</li><li>bio和greeting的值是方法；</li></ul></li></ul></li></ul><h3 id="1-2-对象成员表示法"><a href="#1-2-对象成员表示法" class="headerlink" title="1.2 对象成员表示法"></a>1.2 对象成员表示法</h3><ul><li><p>点表示法</p><ul><li>例如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//点表示法</span><br>person.<span class="hljs-property">age</span> = <span class="hljs-number">45</span>;<br>person.<span class="hljs-property">name</span>[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;sjaks&quot;</span>;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;===&#x27;</span> + person.<span class="hljs-property">age</span> + <span class="hljs-string">&quot; === &quot;</span> + person.<span class="hljs-property">name</span>[<span class="hljs-number">0</span>]);<br><br><span class="hljs-keyword">var</span> p1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br>p1.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;===&#x27;</span> + person.<span class="hljs-property">age</span> + <span class="hljs-string">&quot; === &quot;</span> + person.<span class="hljs-property">name</span>[<span class="hljs-number">0</span>];<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(p1);<br></code></pre></td></tr></table></figure></li><li><p>括号表示法</p><ul><li>例如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//括号表示法</span><br>person[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-number">40</span>;<br>person[<span class="hljs-string">&#x27;name&#x27;</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;129yughjvb&quot;</span>;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;===&#x27;</span> + person.<span class="hljs-property">age</span> + <span class="hljs-string">&quot; === &quot;</span> + person.<span class="hljs-property">name</span>[<span class="hljs-number">0</span>]);<br><br><span class="hljs-keyword">var</span> p2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br>p2.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;===&#x27;</span> + person.<span class="hljs-property">age</span> + <span class="hljs-string">&quot; === &quot;</span> + person.<span class="hljs-property">name</span>[<span class="hljs-number">0</span>];<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(p2);<br></code></pre></td></tr></table></figure></li><li><p>通过上面两种方式可以访问对象的成员并设置值，此外，也可以创建新的成员：</p><ul><li>例如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//也可以创建新的成员</span><br>person.<span class="hljs-property">abc</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;12345567890&#x27;</span>)&#125;<br>person.<span class="hljs-title function_">abc</span>();<br><br><span class="hljs-keyword">var</span> p3 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br>p3.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;12345567890&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(p3);<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/JS-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_02.png" alt="JS-面向对象_02"></p><h2 id="二、面向对象"><a href="#二、面向对象" class="headerlink" title="二、面向对象"></a>二、面向对象</h2><ul><li>此处，JS与Java基本一致，跳过；</li><li>私有属性或方法，需要使用<code>#</code>修饰：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span> &#123;<br><br>  #year;<span class="hljs-comment">//私有属性</span><br>  <br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">year</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.#year = year;<br>  &#125;<br>  <br>  <span class="hljs-title function_">somePublicMethod</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.#<span class="hljs-title function_">somePrivateMethod</span>();<br>  &#125;<br><br>  #<span class="hljs-title function_">somePrivateMethod</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">//私有方法</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;You called me?&#x27;</span>);<br>  &#125;<br><br>&#125;<br><br><span class="hljs-keyword">const</span> myExample = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>();<br><br>myExample.<span class="hljs-title function_">somePublicMethod</span>(); <span class="hljs-comment">// &#x27;You called me?&#x27;</span><br><br>myExample.#<span class="hljs-title function_">somePrivateMethod</span>(); <span class="hljs-comment">// SyntaxError</span><br><br></code></pre></td></tr></table></figure><h2 id="三、JSON的使用"><a href="#三、JSON的使用" class="headerlink" title="三、JSON的使用"></a>三、JSON的使用</h2><ul><li>JavaScript 对象表示法（JSON）是用于将<strong>结构化数据</strong>表示为 <strong>JavaScript 对象</strong>的标准格式，通常用于在网站上表示和传输数据（例如从服务器向客户端发送一些数据，因此可以将其显示在网页上）。</li></ul><h3 id="3-1-JSON结构"><a href="#3-1-JSON结构" class="headerlink" title="3.1 JSON结构"></a>3.1 JSON结构</h3><ul><li><p>JSON对象中的数据，可以是字符串、数字、数组、布尔以及其他的字面值对象，例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;squadName&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Super hero squad&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;homeTown&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Metro City&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;formed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2016</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;secretBase&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Super tower&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;active&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;members&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Molecule Man&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">29</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;secretIdentity&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Dan Jukes&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;powers&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;Radiation resistance&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;Turning tiny&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;Radiation blast&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Madame Uppercut&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">39</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;secretIdentity&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Jane Wilson&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;powers&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;Million tonne punch&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;Damage resistance&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;Superhuman reflexes&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Eternal Flame&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1000000</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;secretIdentity&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Unknown&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;powers&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;Immortality&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;Heat Immunity&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;Inferno&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;Teleportation&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;Interdimensional travel&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">//也可以是一个数组对象，[&#123;&#125;, &#123;&#125;, ... , &#123;&#125;]</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-2-注意事项"><a href="#3-2-注意事项" class="headerlink" title="3.2 注意事项"></a>3.2 注意事项</h3><ul><li><p>JSON是一种纯数据格式，只有属性，没有方法；</p></li><li><p>JSON要求在字符串和属性周围使用双引号。<strong>单引号无效！！</strong></p></li><li><p>JSON文件的格式比较严格，一个分号或逗号就可能导致整个文件出错；</p></li></ul><h3 id="3-3-使用案例"><a href="#3-3-使用案例" class="headerlink" title="3.3 使用案例"></a>3.3 使用案例</h3><ul><li>html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport=&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;device-width&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS面向对象02<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../CSS/JS_07.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../JS/JS_07.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>css</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* || general styles */</span><br><br><span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;helvetica neue&#x27;</span>, helvetica, arial, sans-serif;<br>  &#125;<br>  <br>  <span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  &#125;<br>  <br>  <span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-tag">h2</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Faster One&#x27;</span>, cursive;<br>  &#125;<br>  <br>  <span class="hljs-comment">/* header styles */</span><br>  <br>  <span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">4rem</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>  &#125;<br>  <br>  <span class="hljs-selector-tag">header</span> <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.3rem</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">text-align</span>: center;<br>  &#125;<br>  <br>  <span class="hljs-comment">/* section styles */</span><br>  <br>  <span class="hljs-selector-tag">section</span> <span class="hljs-selector-tag">article</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">33%</span>;<br>    <span class="hljs-attribute">float</span>: left;<br>  &#125;<br>  <br>  <span class="hljs-selector-tag">section</span> <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <br>  <span class="hljs-selector-tag">section</span> <span class="hljs-selector-tag">ul</span> &#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>  <br>  <span class="hljs-selector-tag">h2</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.5rem</span>;<br>    <span class="hljs-attribute">letter-spacing</span>: -<span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li>js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">var</span> header = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;header&#x27;</span>);<br><span class="hljs-keyword">var</span> section = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;section&#x27;</span>);<br><br><span class="hljs-comment">//定义请求数据的路径</span><br><span class="hljs-keyword">var</span> requestURL = <span class="hljs-string">&#x27;https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json&#x27;</span>;<br><br><span class="hljs-comment">//创建一个HTTP请求对象</span><br><span class="hljs-keyword">var</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br><br><span class="hljs-comment">//打开一个请求:</span><br><span class="hljs-comment">// 参数1：请求方式，包括GET和POST，其中GET数据长度有限制（2048个字符）；</span><br><span class="hljs-comment">// 参数2：请求路径</span><br>request.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, requestURL);<br><br><span class="hljs-comment">//设定接收的响应对象为JSON类型</span><br>request.<span class="hljs-property">responseType</span> = <span class="hljs-string">&#x27;json&#x27;</span>;<br><br><span class="hljs-comment">//发送请求</span><br>request.<span class="hljs-title function_">send</span>();<br><br>request.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> superheroes = request.<span class="hljs-property">response</span>;<br>    <span class="hljs-title function_">populateHeader</span>(superheroes);<br>    <span class="hljs-title function_">showHeroes</span>(superheroes);<br>&#125;<br><br><span class="hljs-comment">//标题部分</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">populateHeader</span>(<span class="hljs-params">jsonObj</span>) &#123;<br>    <span class="hljs-keyword">var</span> myH1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;h1&#x27;</span>);<br>    myH1.<span class="hljs-property">textContent</span> = jsonObj[<span class="hljs-string">&#x27;squadName&#x27;</span>];<br>    header.<span class="hljs-title function_">appendChild</span>(myH1);<br>  <br>    <span class="hljs-keyword">var</span> myPara = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br>    myPara.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;Hometown: &#x27;</span> + jsonObj[<span class="hljs-string">&#x27;homeTown&#x27;</span>] + <span class="hljs-string">&#x27; // Formed: &#x27;</span> + jsonObj[<span class="hljs-string">&#x27;formed&#x27;</span>];<br>    header.<span class="hljs-title function_">appendChild</span>(myPara);<br>  &#125;<br><br><span class="hljs-comment">//遍历json文件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showHeroes</span>(<span class="hljs-params">jsonObj</span>) &#123;<br>  <span class="hljs-keyword">var</span> heroes = jsonObj[<span class="hljs-string">&#x27;members&#x27;</span>];<br><br>  <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; heroes.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">var</span> myArticle = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;article&#x27;</span>);<br>    <span class="hljs-keyword">var</span> myH2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;h2&#x27;</span>);<br>    <span class="hljs-keyword">var</span> myPara1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br>    <span class="hljs-keyword">var</span> myPara2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br>    <span class="hljs-keyword">var</span> myPara3 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br>    <span class="hljs-keyword">var</span> myList = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);<br><br>    myH2.<span class="hljs-property">textContent</span> = heroes[i].<span class="hljs-property">name</span>;<br>    myPara1.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;Secret identity: &#x27;</span> + heroes[i].<span class="hljs-property">secretIdentity</span>;<br>    myPara2.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;Age: &#x27;</span> + heroes[i].<span class="hljs-property">age</span>;<br>    myPara3.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;Superpowers:&#x27;</span>;<br><br>    <span class="hljs-keyword">var</span> superPowers = heroes[i].<span class="hljs-property">powers</span>;<br>    <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; superPowers.<span class="hljs-property">length</span>; j++) &#123;<br>      <span class="hljs-keyword">var</span> listItem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>      listItem.<span class="hljs-property">textContent</span> = superPowers[j];<br>      myList.<span class="hljs-title function_">appendChild</span>(listItem);<br>    &#125;<br><br>    myArticle.<span class="hljs-title function_">appendChild</span>(myH2);<br>    myArticle.<span class="hljs-title function_">appendChild</span>(myPara1);<br>    myArticle.<span class="hljs-title function_">appendChild</span>(myPara2);<br>    myArticle.<span class="hljs-title function_">appendChild</span>(myPara3);<br>    myArticle.<span class="hljs-title function_">appendChild</span>(myList);<br><br>    section.<span class="hljs-title function_">appendChild</span>(myArticle);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>运行效果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/JS_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_03.png" alt="JS-面向对象_03"></p><ul><li>学到这里，熟悉完js的一些基础，由于工作需要，直接转战JavaWeb。</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库应用系统的设计与实现（MySQL+CentOS7环境）</title>
    <link href="/2023/05/30/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%88MySQL+CentOS7%E7%8E%AF%E5%A2%83%EF%BC%89/"/>
    <url>/2023/05/30/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%88MySQL+CentOS7%E7%8E%AF%E5%A2%83%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库应用系统的设计与实现（MySQL-CentOS7环境）"><a href="#数据库应用系统的设计与实现（MySQL-CentOS7环境）" class="headerlink" title="数据库应用系统的设计与实现（MySQL+CentOS7环境）"></a>数据库应用系统的设计与实现（MySQL+CentOS7环境）</h1><h2 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h2><ul><li><p>收集和分析业务需求，以确定数据库的目标、范围和功能。这包括识别实体、属性和关系，并确定数据的完整性约束。</p></li><li><p>需求如下：</p></li><li><p>某银行准备开发一个银行业务管理系统，通过调查，得到以下的主要需求：</p><ul><li><p>这家<strong>银行</strong>在多个<strong>城市</strong>都有支行（即各个支行位于某个城市），每个支行有<strong>唯一的</strong><br><strong>名字</strong>。银行要监控<strong>每个支行的资产</strong>。</p><ul><li>支行(<strong>名字</strong>， 所在城市， 资产)</li></ul></li><li><p>银行的<strong>客户</strong>通过其<strong>身份证号</strong>来标识。银行存储每个客户的<strong>姓名</strong>及其<strong>居住的街</strong><br><strong>道和城市</strong>。客户都有<strong>帐户</strong>，并且可以<strong>存款和贷款</strong>。客户可能和某个银行员工发生<br>联系，该员工是此客户的<strong>贷款负责人</strong>或<strong>银行帐户负责人</strong>。</p><ul><li>客户(<strong>身份证号</strong>， 银行账户负责人&#x2F;贷款账户负责人-员工身份证号， 姓名， 居住的街道及城市)</li><li>存款(<strong>存款号，账户号（外键）</strong>，存款金额， 存款时间， <strong>开户支行名字（外键）</strong>， 利率)</li></ul></li><li><p>银行<strong>员工</strong>也通过<strong>身份证号</strong>来标识。员工分为<strong>部门经理和普通员工（职位）</strong>，每个部门<br>经理都负责领导其<strong>所在部门</strong>的员工，并且每个员工只允许在一个部门内工作。每<br>个支行的管理机构存储每个员工的<strong>姓名</strong>、 <strong>电话号码</strong>、 <strong>家庭地址</strong>及其<strong>经理的身份证号</strong>。</p><p>银行还需知道每个员工<strong>开始工作的日期</strong>，由此日期可以推知员工的雇佣期。</p><ul><li>员工(<strong>身份证号</strong>，<strong>支行名字（外键）, 部门id（外键）</strong>， 所属经理的身份证号， 职位， 姓名， 电话号码， 家庭地址， 开始工作的日期)</li><li>部门(<strong>部门id</strong>， 部门名称， 部门经理身份证号)</li></ul></li><li><p>银行提供两类帐户——<strong>储蓄帐户和支票帐户(账户类别)<strong>。一个客户可有多个帐户， 每个帐户被赋以唯一的</strong>帐户号</strong>。银行记录每个帐户的<strong>余额</strong> 、<strong>开户的支行</strong>以及每个<br>帐户所有者<strong>访问该帐户的最近日期</strong>。另外，每个<strong>储蓄帐户有其利率</strong>，且每个<strong>支票帐户有其透支额</strong>。 </p><ul><li>账户(<strong>账户号</strong>，<strong>客户身份证号（外键）</strong>， 账户类别， 余额， <strong>开户支行名字（外键）</strong>， 最近访问日期， 利率， 透支额)</li></ul></li><li><p>每笔<strong>贷款</strong>由<strong>某个分支机构发放</strong>。每笔贷款用唯一的<strong>贷款号</strong>标识。银行需要知道每笔贷款<strong>所贷金额</strong>以及<strong>逐次支付的情况</strong>（银行将贷款分几次付<br>给客户）。虽然贷款号不能唯一标识银行所有为贷款所付的款项，但可以唯一标识<strong>总贷款额</strong>。对每次的付款需要记录日期和金额；</p><ul><li>贷款(<strong>贷款号</strong>，<strong>支行名字（外键）</strong>，<strong>账户号（外键）</strong>，贷款申请时间， 贷款金额， 逐次支付的次数)</li><li>付款记录(<strong>记录id</strong>， <strong>贷款号（外键）</strong>，付款金额， 付款日期)</li></ul></li></ul></li></ul><h2 id="二、数据库概念设计"><a href="#二、数据库概念设计" class="headerlink" title="二、数据库概念设计"></a>二、数据库概念设计</h2><ul><li>用实体-关系图（ERD）来表示数据模型，包括实体、属性和关系之间的联系。</li><li>如下图所示：</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/%E9%93%B6%E8%A1%8C%E4%B8%9A%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-%E5%AE%9E%E4%BD%93%E8%81%94%E7%B3%BB%E5%9B%BE.png" alt="银行业务管理系统-实体联系图"></p><h2 id="三、数据库逻辑设计"><a href="#三、数据库逻辑设计" class="headerlink" title="三、数据库逻辑设计"></a>三、数据库逻辑设计</h2><ul><li><p>逻辑设计：把概念设计转换为关系模式，也就是数据库表的结构。这包括确定表格、列、主键、外键等等。</p></li><li><p>如下：</p><ul><li><p>支行表（whm_BankBranch）</p><ul><li>bankBranch_name：支行名字，<strong>主键</strong>；</li><li>city：支行所在城市；</li><li>asset：资产；</li></ul></li><li><p>客户表（whm_Custom）</p><ul><li>custom_id：客户身份证号，<strong>主键</strong>；</li><li>employee_id：员工身份证号，<strong>外键</strong>；</li><li>custom_name：客户姓名；</li><li>custom_address：居住地址；</li></ul></li><li><p>员工表（whm_Employee）</p><ul><li>employee_id：员工身份证号，<strong>主键</strong>；</li><li>bankBranch_name：支行名字，<strong>外键</strong>；</li><li>dept_id：部门id，<strong>外键</strong>；</li><li>job：职位；</li><li>employee_name：员工姓名；</li><li>call_number：电话号码；</li><li>employee_address：员工家庭住址；</li><li>JoinDate：开始工作日期；</li></ul></li><li><p>部门表（whm_Dept）</p><ul><li>dept_id：部门id，<strong>主键</strong>；</li><li>dept_name：部门名称；</li><li>dept_leaderID：部门经理身份证号；</li></ul></li><li><p>账户表（whm_Account）</p><ul><li>account_no：账户号，<strong>主键</strong>；</li><li>custom_id：客户身份证号，<strong>外键</strong>；</li><li>account_type：账户类别；</li><li>account_balance：账户余额；</li><li>bankBranch_name：开户支行名字，<strong>外键</strong>；</li><li>last_access：最近访问日期；</li><li>rate：利率；</li><li>overdraft：透支额；</li></ul></li><li><p>存款表（whm_Deposit）</p><ul><li>deposit_no：存款号，<strong>主键</strong>；</li><li>bankBranch_name：支行名字，<strong>外键</strong>；</li><li>account_no：账户号，<strong>外键；</strong></li><li>deposit_money：存款金额；</li><li>deposit_date：存款时间；</li><li>rate：存款利率；</li></ul></li><li><p>贷款表（whm_Loan）</p><ul><li>loan_no：贷款号，<strong>主键</strong>；</li><li>bankBranch_name：支行名字，<strong>外键</strong>；</li><li>account_no：账户号，<strong>外键；</strong></li><li>loan_money：贷款金额；</li><li>loan_createTime：贷款申请时间；</li><li>pay_times：逐次支付次数；</li></ul></li><li><p>付款记录（whm_PayRecord）</p><ul><li>payRecord_id：记录id，<strong>主键</strong>；</li><li>loan_no：贷款号，<strong>外键</strong>；</li><li>pay_money：付款金额；</li><li>pay_date：付款日期；</li></ul></li></ul></li></ul><h2 id="四、数据库物理设计"><a href="#四、数据库物理设计" class="headerlink" title="四、数据库物理设计"></a>四、数据库物理设计</h2><ul><li>物理设计：选择适当的数据类型、索引、分区等等；</li></ul><h3 id="4-1-表结构设计"><a href="#4-1-表结构设计" class="headerlink" title="4.1 表结构设计"></a>4.1 表结构设计</h3><ul><li><p>具体设计如下：</p><ul><li><p>支行表（whm_BankBranch）</p><table><thead><tr><th>字段名</th><th>描述</th><th>类型</th><th>主&#x2F;外键</th></tr></thead><tbody><tr><td>bankBranch_name</td><td>支行名字</td><td>varchar(100)</td><td>主键</td></tr><tr><td>city</td><td>支行所在城市</td><td>varchar(100)</td><td>&#x2F;</td></tr><tr><td>asset</td><td>资产</td><td>bigint</td><td>&#x2F;</td></tr></tbody></table></li><li><p>客户表（whm_Custom）</p><table><thead><tr><th>字段名</th><th>描述</th><th>类型</th><th>主&#x2F;外键</th></tr></thead><tbody><tr><td>custom_id</td><td>客户身份证号</td><td>char(30)</td><td>主键</td></tr><tr><td>employee_id</td><td>员工身份证号</td><td>char(30)</td><td>外键，参考员工表（whm_Employee）中的employee_id字段</td></tr><tr><td>custom_name</td><td>客户姓名</td><td>char(50)</td><td>&#x2F;</td></tr><tr><td>custom_address</td><td>居住地址</td><td>varchar(100)</td><td>&#x2F;</td></tr></tbody></table></li><li><p>员工表（whm_Employee）</p><table><thead><tr><th>字段名</th><th>描述</th><th>类型</th><th>主&#x2F;外键</th></tr></thead><tbody><tr><td>employee_id</td><td>员工身份证号</td><td>char(30)</td><td>主键</td></tr><tr><td>bankBranch_name</td><td>支行名字</td><td>char(50)</td><td>外键，参考支行表（whm_BankBranch）中的bankBranch_name字段</td></tr><tr><td>dept_id</td><td>部门id</td><td>char(10)</td><td>外键，参考部门表（whm_Dept）中的dept_id字段</td></tr><tr><td>job</td><td>职位</td><td>char(50)</td><td>&#x2F;</td></tr><tr><td>employee_name</td><td>员工姓名</td><td>char(50)</td><td>&#x2F;</td></tr><tr><td>call_number</td><td>电话号码</td><td>char(50)</td><td>&#x2F;</td></tr><tr><td>employee_address</td><td>员工家庭住址</td><td>varchar(100)</td><td>&#x2F;</td></tr><tr><td>joinDate</td><td>开始工作日期</td><td>timestamp</td><td>&#x2F;</td></tr></tbody></table></li><li><p>部门表（whm_Dept）</p><table><thead><tr><th>字段名</th><th>描述</th><th>类型</th><th>主&#x2F;外键</th></tr></thead><tbody><tr><td>dept_id</td><td>部门id</td><td>char(10)</td><td>主键</td></tr><tr><td>dept_name</td><td>部门名称</td><td>char(50)</td><td>&#x2F;</td></tr><tr><td>dept_leaderID</td><td>部门经理身份证号</td><td>char(30)</td><td>&#x2F;</td></tr></tbody></table></li><li><p>账户表（whm_Account）</p><table><thead><tr><th>字段名</th><th>描述</th><th>类型</th><th>主&#x2F;外键</th></tr></thead><tbody><tr><td>account_no</td><td>账户号</td><td>char(50)</td><td>主键</td></tr><tr><td>custom_id</td><td>客户身份证号</td><td>char(30)</td><td>外键，参考客户表（whm_Custom）中的custom_id字段</td></tr><tr><td>account_type</td><td>账户类别</td><td>char(20)</td><td>&#x2F;</td></tr><tr><td>account_balance</td><td>账户余额</td><td>bigint</td><td>&#x2F;</td></tr><tr><td>bankBranch_name</td><td>开户支行名字</td><td>varchar(100)</td><td>外键，参考支行表（whm_BankBranch）中的bankBranch_name字段</td></tr><tr><td>last_access</td><td>最近访问日期</td><td>timestamp</td><td>&#x2F;</td></tr><tr><td>rate</td><td>利率，范围：0.00% ~ 100.00%</td><td>decimal(5,2)</td><td>&#x2F;</td></tr><tr><td>overdraft</td><td>透支额</td><td>bigint</td><td>&#x2F;</td></tr></tbody></table></li><li><p>存款表（whm_Deposit）</p><table><thead><tr><th>字段名</th><th>描述</th><th>类型</th><th>主&#x2F;外键</th></tr></thead><tbody><tr><td>deposit_no</td><td>存款号</td><td>char(50)</td><td>主键</td></tr><tr><td>bankBranch_name</td><td>支行名字</td><td>varchar(100)</td><td>外键，参考支行表（whm_BankBranch）中的bankBranch_name字段</td></tr><tr><td>account_no</td><td>账户号</td><td>char(50)</td><td>外键，参考账户表（whm_Account）中的account_no字段</td></tr><tr><td>deposit_money</td><td>存款金额</td><td>bigint</td><td>&#x2F;</td></tr><tr><td>deposit_date</td><td>存款时间</td><td>timestamp</td><td>&#x2F;</td></tr><tr><td>rate</td><td>存款利率,范围：0.00% ~ 100.00%</td><td>decimal(5,2)</td><td>&#x2F;</td></tr></tbody></table></li><li><p>贷款表（whm_Loan）</p><table><thead><tr><th>字段名</th><th>描述</th><th>类型</th><th>主&#x2F;外键</th></tr></thead><tbody><tr><td>loan_no</td><td>贷款号</td><td>char(50)</td><td>主键</td></tr><tr><td>bankBranch_name</td><td>支行名字</td><td>varchar(100)</td><td>外键，参考支行表（whm_BankBranch）中的bankBranch_name字段</td></tr><tr><td>account_no</td><td>账户号</td><td>char(50)</td><td>外键，参考账户表（whm_Account）中的account_no字段</td></tr><tr><td>loan_money</td><td>贷款金额</td><td>bigint</td><td>&#x2F;</td></tr><tr><td>loan_createTime</td><td>贷款申请时间</td><td>timestamp</td><td>&#x2F;</td></tr><tr><td>pay_times</td><td>逐次支付次数</td><td>int</td><td>&#x2F;</td></tr></tbody></table></li><li><p>付款记录（whm_PayRecord）</p><table><thead><tr><th>字段名</th><th>描述</th><th>类型</th><th>主&#x2F;外键</th></tr></thead><tbody><tr><td>payRecord_id</td><td>记录id</td><td>char(50)</td><td>主键</td></tr><tr><td>loan_no</td><td>贷款号</td><td>char(50)</td><td>外键，参考贷款表（whm_Loan）中的loan_no字段</td></tr><tr><td>pay_money</td><td>付款金额</td><td>bigint</td><td>&#x2F;</td></tr><tr><td>pay_date</td><td>付款日期</td><td>timestamp</td><td>&#x2F;</td></tr></tbody></table></li></ul></li></ul><h3 id="4-2-MySQL中建库建表"><a href="#4-2-MySQL中建库建表" class="headerlink" title="4.2 MySQL中建库建表"></a>4.2 MySQL中建库建表</h3><ul><li><p>在Navicat中进行建库建表。</p></li><li><p>SQL代码如下：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 新建数据库whmdb_bank<br>CREATE DATABASE IF NOT EXISTS whmdb_bank;<br>-- 使用数据库whmdb_bank<br>USE whmdb_bank;<br><br>-- 创建支行表（whm_BankBranch）<br>CREATE TABLE whm_BankBranch(<br>bankBranch_name VARCHAR(100) NOT NULL PRIMARY KEY COMMENT &#x27;支行名字&#x27;, <br>city VARCHAR(100) COMMENT &#x27;支行所在城市&#x27;,<br>assert BIGINT COMMENT &#x27;资产&#x27;<br>) COMMENT &#x27;支行表（whm_BankBranch）&#x27;;<br><br><br>-- 创建部门表（whm_Dept）<br>CREATE TABLE whm_Dept(<br>dept_id CHAR(10) NOT NULL PRIMARY KEY COMMENT &#x27;部门id&#x27;, <br>dept_name CHAR(50) COMMENT &#x27;部门名称&#x27;,<br>dept_leaderID CHAR(30) COMMENT &#x27;部门经理身份证号&#x27;<br>) COMMENT &#x27;部门表（whm_Dept）&#x27;;<br><br><br>-- 创建账户表（whm_Account）<br>CREATE TABLE whm_Account(<br>account_no CHAR(50) NOT NULL PRIMARY KEY COMMENT &#x27;账户号&#x27;, <br>account_type CHAR(20) COMMENT &#x27;账户类别&#x27;,<br>account_balance BIGINT COMMENT &#x27;账户余额&#x27;,<br>bankBranch_name CHAR(100) COMMENT &#x27;开户支行名字&#x27;,<br>last_access TIMESTAMP COMMENT &#x27;最近访问日期&#x27;,<br>rate DECIMAL(5, 2) COMMENT &#x27;利率，范围：0.00% ~ 100.00%&#x27;,<br>overdraft BIGINT COMMENT &#x27;透支额&#x27;,<br>CONSTRAINT fK_account_branch FOREIGN KEY (bankBranch_name) REFERENCES whm_BankBranch(bankBranch_name)<br>) COMMENT &#x27;账户表（whm_Account）&#x27;;<br><br><br>-- 创建存款表（whm_Deposit）<br>CREATE TABLE whm_Deposit(<br>deposit_no CHAR(50) NOT NULL PRIMARY KEY COMMENT &#x27;存款号&#x27;, <br>bankBranch_name CHAR(100) COMMENT &#x27;开户支行名字&#x27;,<br>deposit_money BIGINT COMMENT &#x27;存款金额&#x27;,<br>deposit_date TIMESTAMP COMMENT &#x27;存款时间&#x27;,<br>rate DECIMAL(5, 2) COMMENT &#x27;利率，范围：0.00% ~ 100.00%&#x27;,<br>account_no CHAR(50) COMMENT &#x27;账户号&#x27;, <br>CONSTRAINT fK_deposit_branch FOREIGN KEY (bankBranch_name) REFERENCES whm_BankBranch(bankBranch_name),<br>CONSTRAINT fK_deposit_account FOREIGN KEY (account_no) REFERENCES whm_Account(account_no)<br>) COMMENT &#x27;存款表（whm_Deposit）&#x27;;<br><br><br>-- 创建贷款表（whm_Loan）<br>CREATE TABLE whm_Loan(<br>loan_no CHAR(50) NOT NULL PRIMARY KEY COMMENT &#x27;贷款号&#x27;, <br>bankBranch_name CHAR(100) COMMENT &#x27;开户支行名字&#x27;,<br>loan_money BIGINT COMMENT &#x27;贷款金额&#x27;,<br>loan_createTime TIMESTAMP COMMENT &#x27;贷款申请时间&#x27;,<br>pay_times DECIMAL(5, 2) COMMENT &#x27;逐次支付次数&#x27;,<br>account_no CHAR(50) COMMENT &#x27;账户号&#x27;,<br>CONSTRAINT fK_loan_branch FOREIGN KEY (bankBranch_name) REFERENCES whm_BankBranch(bankBranch_name),<br>CONSTRAINT fK_loan_account FOREIGN KEY (account_no) REFERENCES whm_Account(account_no)<br>) COMMENT &#x27;贷款表（whm_Loan）&#x27;;<br><br>-- 创建付款记录表表（whm_PayRecord）<br>CREATE TABLE whm_PayRecord(<br>payRecord_id CHAR(50) NOT NULL PRIMARY KEY COMMENT &#x27;记录id&#x27;, <br>loan_no CHAR(50) COMMENT &#x27;贷款号&#x27;,<br>pay_money BIGINT COMMENT &#x27;付款金额&#x27;,<br>pay_date TIMESTAMP COMMENT &#x27;付款日期&#x27;,<br>CONSTRAINT fK_payrecored_loan FOREIGN KEY (loan_no) REFERENCES whm_Loan(loan_no)<br>) COMMENT &#x27;付款记录表表（whm_PayRecord）&#x27;;<br><br>-- 创建员工表（whm_Employee）<br>CREATE TABLE whm_Employee(<br>employee_id CHAR(30) NOT NULL PRIMARY KEY COMMENT &#x27;员工身份证号&#x27;, <br>bankBranch_name CHAR(50) COMMENT &#x27;支行名字&#x27;,<br>dept_id CHAR(10) COMMENT &#x27;部门id&#x27;,<br>job CHAR(50) COMMENT &#x27;居住地址&#x27;,<br>employee_name CHAR(50) COMMENT &#x27;员工姓名&#x27;,<br>call_number CHAR(50) COMMENT &#x27;电话号码&#x27;,<br>employee_address VARCHAR(100) COMMENT &#x27;员工家庭住址&#x27;,<br>joinDate TIMESTAMP COMMENT &#x27;开始工作日期&#x27;,<br>CONSTRAINT fK_employee_branch FOREIGN KEY (bankBranch_name) REFERENCES whm_BankBranch(bankBranch_name),<br>CONSTRAINT fK_employee_dept FOREIGN KEY (dept_id) REFERENCES whm_Dept(dept_id)<br>) COMMENT &#x27;员工表（whm_Employee）&#x27;;<br><br><br><br>-- 创建客户表（whm_Custom）<br>CREATE TABLE whm_Custom(<br>custom_id CHAR(30) NOT NULL PRIMARY KEY COMMENT &#x27;客户身份证号&#x27;, <br>employee_id CHAR(30) COMMENT &#x27;员工身份证号&#x27;,<br>custom_name CHAR(50) COMMENT &#x27;客户姓名&#x27;,<br>custom_address CHAR(100) COMMENT &#x27;居住地址&#x27;,<br>CONSTRAINT fK_custom_employee FOREIGN KEY (employee_id) REFERENCES whm_Employee(employee_id)<br>) COMMENT &#x27;客户表（whm_Custom）&#x27;;<br></code></pre></td></tr></table></figure><h3 id="4-3-数据库whmdb-bank效果图"><a href="#4-3-数据库whmdb-bank效果图" class="headerlink" title="4.3 数据库whmdb_bank效果图"></a>4.3 数据库whmdb_bank效果图</h3><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/%E9%93%B6%E8%A1%8C%E4%B8%9A%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%BA%93whmdb_bank%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="银行业务管理系统-数据库whmdb_bank效果图"></p><h2 id="五、生成业务数据"><a href="#五、生成业务数据" class="headerlink" title="五、生成业务数据"></a>五、生成业务数据</h2><h3 id="5-1-业务数据量需求"><a href="#5-1-业务数据量需求" class="headerlink" title="5.1 业务数据量需求"></a>5.1 业务数据量需求</h3><ul><li>业务数据量需求：<ul><li>支行表：10条；（手动输入）</li><li>部门表：10条；（手动输入）</li><li>存款表：10000条；（存储过程生成）</li><li>贷款表：10000条（存储过程生成）</li><li>付款记录表：10000条（存储过程生成）</li><li>员工表：10000条（存储过程生成）</li><li>账户表：10000条；（存储过程生成）</li><li>客户表：10000条；（存储过程生成）</li></ul></li></ul><h3 id="5-2-编写脚本生成（或者手动输入）"><a href="#5-2-编写脚本生成（或者手动输入）" class="headerlink" title="5.2 编写脚本生成（或者手动输入）"></a>5.2 编写脚本生成（或者手动输入）</h3><h4 id="5-2-1-支行表"><a href="#5-2-1-支行表" class="headerlink" title="5.2.1 支行表"></a>5.2.1 支行表</h4><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/%E9%93%B6%E8%A1%8C%E4%B8%9A%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-BankBranch%E8%A1%A8.png" alt="银行业务管理系统-BankBranch表"></p><h4 id="5-2-2-部门表"><a href="#5-2-2-部门表" class="headerlink" title="5.2.2 部门表"></a>5.2.2 部门表</h4><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/%E9%93%B6%E8%A1%8C%E4%B8%9A%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-dept%E8%A1%A8.png" alt="银行业务管理系统-dept表"></p><h4 id="5-2-3-存款表"><a href="#5-2-3-存款表" class="headerlink" title="5.2.3 存款表"></a>5.2.3 存款表</h4><ul><li>脚本代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 编写存储过程，生成10000条存款记录；<br><br>DELIMITER //<br><br>-- IN 关键字表示输入参数，在存储过程内部不允许修改<br>CREATE PROCEDURE generate_deposit_records(IN start_index INT, IN end_index INT)<br>BEGIN<br>    DECLARE counter INT DEFAULT start_index;<br>    DECLARE branch_name CHAR(100);<br>    DECLARE account_no_1 CHAR(50);<br><br>    WHILE counter &lt;= end_index DO<br>        -- 从另一个表中获取一个随机的bankBranch_name<br>-- 执行过程：<br>--  1.SELECT bankBranch_name FROM whm_BankBranch：从 whm_BankBranch 表中选择所有的 bankBranch_name 列的值。<br>--   2.ORDER BY RAND()：对选取的 bankBranch_name 值进行随机排序。RAND() 函数会生成一个 0 到 1 之间的随机数，根据这个随机数来排序，使结果随机化。<br>--   3.LIMIT 1：返回随机后的支行名字列的第一行<br>        SET branch_name = (SELECT bankBranch_name FROM whm_BankBranch ORDER BY RAND() LIMIT 1);<br>        SET account_no_1 = (SELECT account_no FROM whm_Account WHERE account_type = &#x27;存款账户&#x27; ORDER BY RAND() LIMIT 1);<br><br>        INSERT INTO whm_Deposit (deposit_no, bankBranch_name, deposit_money, deposit_date, rate, account_no)<br>        VALUES (<br>-- LPAD(counter, 5, &#x27;0&#x27;)：counter和左边填充的0加起来一共5位<br>            CONCAT(&#x27;DEP&#x27;, LPAD(counter, 5, &#x27;0&#x27;)),<br>            branch_name,<br>            FLOOR(RAND() * 1000000),<br>-- INTERVAL FLOOR(RAND() * 365) DAY：指定一个以随机（0-365）天为时间间隔；<br>-- 用当前时间减去随机天数作为随机存款时间；<br>            DATE_SUB(NOW(), INTERVAL FLOOR(RAND() * 365) DAY),<br>            ROUND(RAND() * 100, 2),<br>account_no_1<br>        );<br><br>        SET counter = counter + 1;<br>    END WHILE;<br>END //<br><br>DELIMITER ;<br><br>DROP PROCEDURE generate_deposit_records;<br><br><br>CALL generate_deposit_records(1, 10000);<br><br><br>DELETE FROM whm_Deposit;<br><br></code></pre></td></tr></table></figure><ul><li>生成结果</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/%E9%93%B6%E8%A1%8C%E4%B8%9A%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-Deposit%E8%A1%A8%E7%9A%84%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90_1.png" alt="银行业务管理系统-Deposit表的业务数据生成_1"></p><h4 id="5-2-4-贷款表"><a href="#5-2-4-贷款表" class="headerlink" title="5.2.4 贷款表"></a>5.2.4 贷款表</h4><ul><li>脚本代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 编写存储过程，生成10000条贷款记录；<br><br>DELIMITER //<br><br>CREATE PROCEDURE generate_loan_records(IN start_index INT, IN end_index INT)<br>BEGIN<br>-- 循环起始下标<br>  DECLARE counter INT DEFAULT start_index;<br>-- 定义用于保存 当前记录支行名字 的变量<br>DECLARE branch_name char(100);<br>DECLARE account_no_1 CHAR(50);<br><br>WHILE counter &lt;= end_index DO<br>  SET branch_name = (SELECT bankBranch_name FROM whm_BankBranch ORDER BY RAND() LIMIT 1);<br>SET account_no_1 = (SELECT account_no FROM whm_Account WHERE account_type = &#x27;贷款账户&#x27; ORDER BY RAND() LIMIT 1);<br><br>INSERT INTO whm_Loan(loan_no, bankBranch_name, loan_money, loan_createTime, pay_times, account_no)<br>  VALUES(<br>  CONCAT(&#x27;LOAN&#x27;, LPAD(counter, 5,&#x27;0&#x27;)),<br>branch_name,<br>FLOOR(RAND() * 10000000),<br>DATE_SUB(NOW(),INTERVAL FLOOR(RAND() * 365) DAY),<br>  ROUND(RAND() * 360, 0),<br>account_no_1<br>);<br><br>SET counter = counter + 1;<br>END WHILE;<br><br>END //<br><br>DELIMITER ;<br><br>CALL generate_loan_records(1, 10000);<br><br>DROP PROCEDURE generate_loan_records;<br><br>DELETE FROM whm_Loan;<br><br></code></pre></td></tr></table></figure><ul><li>生成结果</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/%E9%93%B6%E8%A1%8C%E4%B8%9A%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-Loan%E8%A1%A8%E7%9A%84%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90_1.png" alt="银行业务管理系统-Loan表的业务数据生成_1"></p><h4 id="5-2-5-付款记录表"><a href="#5-2-5-付款记录表" class="headerlink" title="5.2.5 付款记录表"></a>5.2.5 付款记录表</h4><ul><li>脚本代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建存储过程，生成付款记录数据<br><br>DELIMITER //<br><br>CREATE PROCEDURE generate_payrecord_records(IN start_index INT, IN end_index INT)<br>BEGIN <br>DECLARE counter INT DEFAULT start_index;<br>DECLARE loan_no_1 CHAR(50);<br><br>WHILE counter &lt;= end_index DO<br>SET loan_no_1 = (SELECT loan_no FROM whm_Loan ORDER BY RAND() LIMIT 1);<br><br>INSERT INTO whm_PayRecord(payRecord_id, loan_no, pay_money, pay_date)<br>VALUES(<br>CONCAT(&#x27;PAYRE&#x27;,LPAD(counter, 5, &#x27;0&#x27;)),<br>loan_no_1,<br>FlOOR(RAND() * 1000000),<br>DATE_SUB(NOW(),INTERVAL FLOOR(RAND() * 365) DAY)<br>);<br>SET counter = counter + 1;<br>END WHILE;<br>END  //<br><br>DELIMITER ;<br><br>DROP PROCEDURE generate_payrecord_records; -- 删除该存储过程<br><br>CALL generate_payrecord_records(1, 10000);<br></code></pre></td></tr></table></figure><ul><li>生成结果</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/%E9%93%B6%E8%A1%8C%E4%B8%9A%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-PayRecord%E8%A1%A8%E7%9A%84%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90_1.png" alt="银行业务管理系统-PayRecord表的业务数据生成_1"></p><h4 id="5-2-6-员工表"><a href="#5-2-6-员工表" class="headerlink" title="5.2.6 员工表"></a>5.2.6 员工表</h4><ul><li>脚本代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建存储过程，生成员工表业务数据<br><br>DELIMITER //<br><br>CREATE PROCEDURE generate_employee_records(IN start_index INT, IN end_index INT)<br>BEGIN <br>DECLARE counter INT DEFAULT start_index; <br>DECLARE branch_name CHAR(100);<br>DECLARE dept_id_1 CHAR(10);<br><br>DECLARE _surname VARCHAR(1024);<br>DECLARE _name VARCHAR(1024);<br><br>DECLARE _provinces VARCHAR(1024);<br>    DECLARE _cities VARCHAR(1024);<br>    DECLARE _districts VARCHAR(1024);<br><br>DECLARE province VARCHAR(50);<br>DECLARE city VARCHAR(50);<br>    DECLARE district VARCHAR(50);<br><br>DECLARE address VARCHAR(200);<br><br>DECLARE job_1 VARCHAR(20);<br><br><br><br><br>WHILE counter &lt;= end_index DO<br>SET branch_name = (SELECT bankBranch_name FROM whm_BankBranch ORDER BY RAND() LIMIT 1);<br>SET dept_id_1 = (SELECT dept_id FROM whm_Dept ORDER BY RAND() LIMIT 1);<br><br>-- 定义姓氏列表<br>set _surname = &#x27;王李张刘陈杨黄赵吴周徐孙马朱胡郭何高林罗郑梁谢宋唐位许韩冯邓曹彭曾萧田董潘袁于蒋蔡余杜叶程苏魏吕丁任沈姚卢姜崔钟谭陆汪范金石廖贾夏韦傅方白邹孟熊秦邱江尹薛阎段雷侯龙史陶黎贺顾毛郝龚邵万钱严覃武戴莫孔向汤&#x27;;<br><br>-- 定义名字列表<br>set _name =&#x27;丹举义之乐书乾云亦从代以伟佑俊修健傲儿元光兰冬冰冷凌凝凡凯初力勤千卉半华南博又友同向君听和哲嘉国坚城夏夜天奇奥如妙子存季孤宇安宛宸寒寻尔尧山岚峻巧平幼康建开弘强彤彦彬彭心忆志念怀怜恨惜慕成擎敏文新旋旭昊明易昕映春昱晋晓晗晟景晴智曼朋朗杰松枫柏柔柳格桃梦楷槐正水沛波泽洁洋济浦浩海涛润涵渊源溥濮瀚灵灿炎烟烨然煊煜熙熠玉珊珍理琪琴瑜瑞瑶瑾璞痴皓盼真睿碧磊祥祺秉程立竹笑紫绍经绿群翠翰致航良芙芷苍苑若茂荣莲菡菱萱蓉蓝蕊蕾薇蝶觅访诚语谷豪赋超越轩辉达远邃醉金鑫锦问雁雅雨雪霖霜露青靖静风飞香驰骞高鸿鹏鹤黎&#x27;;<br>    <br>-- 定义省份列表<br>SET _provinces = &#x27;广东省,浙江省,江苏省,湖南省,福建省,湖北省,河南省,山东省&#x27;;<br><br>-- 定义城市列表<br>SET _cities = &#x27;广州市,深圳市,杭州市,宁波市,苏州市,南京市,长沙市,厦门市,武汉市,郑州市,青岛市&#x27;;<br><br>-- 定义区/县列表<br>SET _districts = &#x27;天河区,越秀区,萧山区,海曙区,姑苏区,鼓楼区,岳麓区,思明区,武昌区,金水区,黄岛区&#x27;;<br><br>-- 随机选择省份<br>SET province = SUBSTRING_INDEX(SUBSTRING_INDEX(_provinces, &#x27;,&#x27;, FLOOR(1 + RAND() * (LENGTH(_provinces) - LENGTH(REPLACE(_provinces, &#x27;,&#x27;, &#x27;&#x27;))))), &#x27;,&#x27;, -1);<br><br>-- 随机选择城市<br>SET city = SUBSTRING_INDEX(SUBSTRING_INDEX(_cities, &#x27;,&#x27;, FLOOR(1 + RAND() * (LENGTH(_cities) - LENGTH(REPLACE(_cities, &#x27;,&#x27;, &#x27;&#x27;))))), &#x27;,&#x27;, -1);<br><br>-- 随机选择区/县<br>SET district = SUBSTRING_INDEX(SUBSTRING_INDEX(_districts, &#x27;,&#x27;, FLOOR(1 + RAND() * (LENGTH(_districts) - LENGTH(REPLACE(_districts, &#x27;,&#x27;, &#x27;&#x27;))))), &#x27;,&#x27;, -1);<br><br>-- 生成完整地址<br>SET address = CONCAT(province, city, district);<br><br>IF counter &lt;= 10 THEN<br>SET job_1 = &#x27;经理&#x27;;<br>ELSE<br>SET job_1 = &#x27;普通职工&#x27;;<br>END IF;<br><br>INSERT INTO whm_Employee(employee_id, bankBranch_name, dept_id, job, employee_name, call_number, employee_address, joinDate)<br>VALUES(<br>CONCAT(&#x27;EMP&#x27;, LPAD(counter, 5, &#x27;0&#x27;)),<br>branch_name,<br>dept_id_1,<br>job_1,<br>CONCAT(<br> SUBSTR(_surname, FLOOR(RAND() * CHAR_LENGTH(_surname) + 1), 1),<br> SUBSTR(_name, FLOOR(RAND() * CHAR_LENGTH(_name) + 1), 1),<br> SUBSTR(_name, FLOOR(RAND() * CHAR_LENGTH(_name) + 1), 1)<br>),<br>CONCAT(&#x27;1&#x27;, ROUND(RAND() * 10000000000)),<br>address,<br>DATE_SUB(NOW(),INTERVAL FLOOR(RAND() * 3650) DAY)<br>);<br>SET counter = counter + 1;<br>END WHILE;<br>END //<br><br>DELIMITER ;<br><br>CALL generate_employee_records(1, 10000);<br><br></code></pre></td></tr></table></figure><ul><li>生成结果</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/%E9%93%B6%E8%A1%8C%E4%B8%9A%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-Employee%E8%A1%A8%E7%9A%84%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90_1.png" alt="银行业务管理系统-Employee表的业务数据生成_1"></p><h4 id="5-2-7-账户表"><a href="#5-2-7-账户表" class="headerlink" title="5.2.7 账户表"></a>5.2.7 账户表</h4><ul><li>脚本代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建存储过程，生成账户表业务数据<br><br>DELIMITER //<br><br>CREATE PROCEDURE generate_account_records(IN start_index INT, IN end_index INT)<br>BEGIN <br>DECLARE counter INT DEFAULT start_index;<br>    DECLARE branch_name CHAR(100);<br>    DECLARE custom_id_1 CHAR(30);<br>DECLARE account_type_1 CHAR(50);<br><br><br>WHILE counter &lt;= end_index DO<br>SET branch_name = (SELECT bankBranch_name FROM whm_BankBranch ORDER BY RAND() LIMIT 1);<br>SET custom_id_1 = (SELECT custom_id FROM whm_Custom ORDER BY RAND() LIMIT 1);<br>IF counter &lt;= 10000 THEN<br>SET account_type_1 = &#x27;贷款账户&#x27;;<br>ELSE<br>SET account_type_1 = &#x27;存款账户&#x27;;<br>END IF;<br><br>INSERT INTO whm_Account(account_no, account_type, account_balance, bankBranch_name, last_access, rate, overdraft, custom_id)<br><br>VALUES(<br>CONCAT(&#x27;AC&#x27;, LPAD(counter, 5, &#x27;0&#x27;)),<br>account_type_1,<br>FLOOR(RAND() * 1000000),<br>branch_name,<br>DATE_SUB(NOW(),INTERVAL FLOOR(RAND() * 3650) DAY),<br>ROUND(RAND() * 100, 2),<br>FLOOR(RAND() * 1000000),<br>custom_id_1<br>);<br>SET counter = counter + 1;<br>END WHILE;<br>END;<br><br>CALL generate_account_records(1, 20000);<br><br>DROP PROCEDURE generate_account_records;<br><br>DELETE FROM whm_Account;<br></code></pre></td></tr></table></figure><ul><li>生成结果</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/%E9%93%B6%E8%A1%8C%E4%B8%9A%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-Account%E8%A1%A8%E7%9A%84%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90_1.png" alt="银行业务管理系统-Account表的业务数据生成_1"></p><h4 id="5-2-8-客户表"><a href="#5-2-8-客户表" class="headerlink" title="5.2.8 客户表"></a>5.2.8 客户表</h4><ul><li>脚本代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建存储过程，生成10000条客户数据<br><br>CREATE PROCEDURE generate_custom_records(IN start_index INT, IN end_index INT)<br>BEGIN <br>DECLARE counter INT DEFAULT start_index;<br>DECLARE employee_id_1 CHAR(50);<br>DECLARE _surname VARCHAR(1024);<br>DECLARE _name VARCHAR(1024);<br><br>DECLARE _provinces VARCHAR(1024);<br>    DECLARE _cities VARCHAR(1024);<br>    DECLARE _districts VARCHAR(1024);<br><br>DECLARE province VARCHAR(50);<br>DECLARE city VARCHAR(50);<br>    DECLARE district VARCHAR(50);<br><br>DECLARE address VARCHAR(200);<br><br>WHILE counter &lt;= end_index DO<br>SET employee_id_1 = (SELECT employee_id FROM whm_Employee ORDER BY RAND() LIMIT 1);<br><br>-- 定义姓氏列表<br>set _surname = &#x27;王李张刘陈杨黄赵吴周徐孙马朱胡郭何高林罗郑梁谢宋唐位许韩冯邓曹彭曾萧田董潘袁于蒋蔡余杜叶程苏魏吕丁任沈姚卢姜崔钟谭陆汪范金石廖贾夏韦傅方白邹孟熊秦邱江尹薛阎段雷侯龙史陶黎贺顾毛郝龚邵万钱严覃武戴莫孔向汤&#x27;;<br><br>-- 定义名字列表<br>set _name =&#x27;丹举义之乐书乾云亦从代以伟佑俊修健傲儿元光兰冬冰冷凌凝凡凯初力勤千卉半华南博又友同向君听和哲嘉国坚城夏夜天奇奥如妙子存季孤宇安宛宸寒寻尔尧山岚峻巧平幼康建开弘强彤彦彬彭心忆志念怀怜恨惜慕成擎敏文新旋旭昊明易昕映春昱晋晓晗晟景晴智曼朋朗杰松枫柏柔柳格桃梦楷槐正水沛波泽洁洋济浦浩海涛润涵渊源溥濮瀚灵灿炎烟烨然煊煜熙熠玉珊珍理琪琴瑜瑞瑶瑾璞痴皓盼真睿碧磊祥祺秉程立竹笑紫绍经绿群翠翰致航良芙芷苍苑若茂荣莲菡菱萱蓉蓝蕊蕾薇蝶觅访诚语谷豪赋超越轩辉达远邃醉金鑫锦问雁雅雨雪霖霜露青靖静风飞香驰骞高鸿鹏鹤黎&#x27;;<br>    <br>-- 定义省份列表<br>SET _provinces = &#x27;广东省,浙江省,江苏省,湖南省,福建省,湖北省,河南省,山东省&#x27;;<br><br>-- 定义城市列表<br>SET _cities = &#x27;广州市,深圳市,杭州市,宁波市,苏州市,南京市,长沙市,厦门市,武汉市,郑州市,青岛市&#x27;;<br><br>-- 定义区/县列表<br>SET _districts = &#x27;天河区,越秀区,萧山区,海曙区,姑苏区,鼓楼区,岳麓区,思明区,武昌区,金水区,黄岛区&#x27;;<br><br>-- 随机选择省份<br>SET province = SUBSTRING_INDEX(SUBSTRING_INDEX(_provinces, &#x27;,&#x27;, FLOOR(1 + RAND() * (LENGTH(_provinces) - LENGTH(REPLACE(_provinces, &#x27;,&#x27;, &#x27;&#x27;))))), &#x27;,&#x27;, -1);<br><br>-- 随机选择城市<br>SET city = SUBSTRING_INDEX(SUBSTRING_INDEX(_cities, &#x27;,&#x27;, FLOOR(1 + RAND() * (LENGTH(_cities) - LENGTH(REPLACE(_cities, &#x27;,&#x27;, &#x27;&#x27;))))), &#x27;,&#x27;, -1);<br><br>-- 随机选择区/县<br>SET district = SUBSTRING_INDEX(SUBSTRING_INDEX(_districts, &#x27;,&#x27;, FLOOR(1 + RAND() * (LENGTH(_districts) - LENGTH(REPLACE(_districts, &#x27;,&#x27;, &#x27;&#x27;))))), &#x27;,&#x27;, -1);<br><br>-- 生成完整地址<br>SET address = CONCAT(province, city, district);<br><br><br><br>INSERT INTO whm_Custom(custom_id, employee_id, custom_name, custom_address)<br>VALUES(<br>CONCAT(&#x27;CUS&#x27;, LPAD(counter, 5, &#x27;0&#x27;)),<br>employee_id_1,<br>CONCAT(<br> SUBSTR(_surname, FLOOR(RAND() * CHAR_LENGTH(_surname) + 1), 1),<br> SUBSTR(_name, FLOOR(RAND() * CHAR_LENGTH(_name) + 1), 1),<br> SUBSTR(_name, FLOOR(RAND() * CHAR_LENGTH(_name) + 1), 1)<br>),<br>address<br>);<br>SET counter = counter + 1;<br>END WHILE;<br>END;<br><br>CALL generate_custom_records(1, 10000);<br><br>DROP PROCEDURE generate_custom_records;<br><br>DELETE FROM whm_Custom;<br></code></pre></td></tr></table></figure><ul><li>生成结果</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/%E9%93%B6%E8%A1%8C%E4%B8%9A%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-Custom%E8%A1%A8%E7%9A%84%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90_1.png" alt="银行业务管理系统-Custom表的业务数据生成_1"></p><h2 id="六、客户等级评分"><a href="#六、客户等级评分" class="headerlink" title="六、客户等级评分"></a>六、客户等级评分</h2><ul><li>根据贷款和存款信息，评定客户的等级，直接上mysql代码；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建评级结果表（whm_Rating）<br>CREATE TABLE whm_Rating (<br>    custom_id CHAR(30) NOT NULL PRIMARY KEY COMMENT &#x27;客户身份证号&#x27;,<br>    rating INT COMMENT &#x27;客户评级&#x27;<br>) COMMENT &#x27;评级结果表（whm_Rating）&#x27;;<br><br>-- 分析银行优质客户并进行评级<br>INSERT INTO whm_Rating (custom_id, rating)<br>SELECT c.custom_id, <br>    CASE <br>        WHEN total_deposit &gt;= 1000000 AND total_loan = 0 THEN 5<br>        WHEN total_deposit &gt;= 500000 AND total_loan = 0 THEN 4<br>        WHEN total_deposit &gt;= 100000 AND total_loan = 0 THEN 3<br>        WHEN total_deposit &gt;= 50000 AND total_loan = 0 THEN 2<br>        ELSE 1<br>    END AS rating<br>FROM (<br>    SELECT c.custom_id, <br>        IFNULL(SUM(d.deposit_money), 0) AS total_deposit, <br>IFNULL(SUM(l.loan_money), 0) AS total_loan<br>    FROM whm_Custom AS c<br>    LEFT JOIN whm_Account AS a ON c.custom_id = a.custom_id<br>    LEFT JOIN whm_Deposit AS d ON a.account_no = d.account_no<br>LEFT JOIN whm_Loan AS l ON a.account_no = l.account_no<br>    GROUP BY c.custom_id<br>) AS c;<br></code></pre></td></tr></table></figure><ul><li>客户等级表（whm_Rating）数据如下:</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/%E9%93%B6%E8%A1%8C%E4%B8%9A%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-%E5%AE%A2%E6%88%B7%E7%AD%89%E7%BA%A7%E8%A1%A8%EF%BC%88whm_Rating%EF%BC%89%E7%9A%84%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90_1.png" alt="银行业务管理系统-客户等级表（whm_Rating）的业务数据生成_1"></p><ul><li>至此，whmdb_bank数据库从需求分析到设计，再到实现，数据生成等全部完成！</li><li>下一篇，主题：数据库的性能演示及优化、并发、备份等操作；</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>高级数据库技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>高级数据库技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-Software Development Effort Estimation Based on a New Fuzzy Logic Model</title>
    <link href="/2023/05/28/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Software%20Development%20Effort%20Estimation%20Based%20on%20a%20New%20Fuzzy%20Logic%20Model/"/>
    <url>/2023/05/28/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Software%20Development%20Effort%20Estimation%20Based%20on%20a%20New%20Fuzzy%20Logic%20Model/</url>
    
    <content type="html"><![CDATA[<h1 id="论文阅读笔记-Software-Development-Effort-Estimation-Based-on-a-New-Fuzzy-Logic-Model"><a href="#论文阅读笔记-Software-Development-Effort-Estimation-Based-on-a-New-Fuzzy-Logic-Model" class="headerlink" title="论文阅读笔记-Software Development Effort Estimation Based on a New Fuzzy Logic Model"></a>论文阅读笔记-Software Development Effort Estimation Based on a New Fuzzy Logic Model</h1><ul><li>中文标题：基于新的模糊逻辑模型的软件开发工作量估计</li><li>来源：International Journal of Computer Theory and Engineering（国际计算机理论与工程期刊）</li></ul><h2 id="一、论文结构"><a href="#一、论文结构" class="headerlink" title="一、论文结构"></a>一、论文结构</h2><ul><li>1.摘要（Abstruct）</li><li>2.引言（Introduction）</li><li>3.方法论（Methodology）</li><li>4.结果（Result）</li><li>5.结论（Conclusion）</li><li>6.参考文献（Reference）</li></ul><h2 id="二、摘要"><a href="#二、摘要" class="headerlink" title="二、摘要"></a>二、摘要</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">软件开发一直以来都有一些衡量指标。在这个领域中，对软件开发人员来说，根据开发者的能力、规模、复杂度和其他指标预测软件系统的开发工作量是最大的挑战之一。项目经理需要能够对软件开发工作量进行准确的估计。大多数传统的技术，如功能点、回归模型、COCOMO等，需要进行长期的估计过程。模糊逻辑等新范式可能为这一挑战提供了一种替代方法。许多现有工作量估计模型的问题可以通过引入模糊逻辑来解决。本文描述了一个增强的模糊逻辑模型，用于估计软件开发工作量，并提出了一种应用模糊逻辑进行软件工作量估计的新方法。结果显示，应用模糊逻辑的相对误差幅度的平均值（MMRE）明显低于其他模糊逻辑模型应用时的MMRE值。<br></code></pre></td></tr></table></figure><ul><li><p><strong>研究背景</strong>：</p></li><li><p>1.研究人员认为，传统的工作量估计技术需要进行长期的估计过程，而模糊逻辑可以提供一种替代方法来解决现有模型存在的问题。</p></li><li><p>2.这篇论文描述了一个增强的模糊逻辑模型，用于估计软件开发工作量，并提出了一种应用模糊逻辑进行软件工作量估计的新方法。</p></li><li><p><strong>研究结论：</strong></p><ul><li>研究结果表明，应用模糊逻辑的相对误差幅度的平均值（MMRE）明显低于其他模糊逻辑模型。这意味着使用增强的模糊逻辑模型进行软件工作量估计可以提供更准确的结果。</li></ul></li></ul><h2 id="三、引言"><a href="#三、引言" class="headerlink" title="三、引言"></a>三、引言</h2><ul><li>引言中分为三个部分：<ul><li>1.软件开发工作量估算（Software development effort estimation）</li><li>2.模糊逻辑方法（Fuzzy logic approach）</li><li>3.参数分析（Parameter&#96;s analysis）</li></ul></li></ul><h3 id="3-1-软件开发工作量估算（Software-development-effort-estimation）"><a href="#3-1-软件开发工作量估算（Software-development-effort-estimation）" class="headerlink" title="3.1 软件开发工作量估算（Software development effort estimation）"></a>3.1 软件开发工作量估算（Software development effort estimation）</h3><ul><li><p><strong>软件度量</strong>：软件度量，尤其是软件估计，是基于对软件属性的测量，这些属性通常与软件开发的产品、过程和资源有关。</p><ul><li>这些测量的数据可以在项目管理的过程用作参考，以免成本超支和进度滞后等问题。</li><li>软件工作量估计 是 软件度量 研究最广泛的领域之一.</li></ul></li><li><p><strong>软件工作量估计</strong>：</p><ul><li><p>软件工作量估算模型主要分为两个大类：</p><ul><li><p>(1)算法型：使用数学公式和统计方法来计算软件工作量。</p><ul><li><p>特点：这些模型通常基于历史数据和经验规则，通过输入软件项目的特征和属性，如代码行数、复杂性等，来计算预期的工作量。</p></li><li><p>著名的算法型估算模型有：</p><ul><li>Boehm的COCOMO（Constructive Cost Model）</li><li>Putnam的SLIM（Software Lifecycle Management）</li><li>Albrecht的功能点法</li></ul></li><li><p>适用场景：算法型估算模型提供了一种较为精确和可靠的估算方法，适用于有足够历史数据和准确输入参数的情况。</p></li><li><p>局限性： 算法型模型提供了一种定量的估算方法，能够在一定程度上准确地估计软件工作量。然而，这些模型需要准确的输入参数，而在软件项目早期阶段往往难以获取准确的数据，因此存在一定的局限性。</p></li><li><p>算法型估算模型的局限性 导致了对基于软计算的非算法技术的探索。</p></li></ul></li><li><p>(2)非算法型：采用软计算（soft computing）方法，如模糊逻辑、神经网络和遗传算法等，来进行软件工作量估计。</p><ul><li>特点（优势）：通过处理模糊和不确定性的信息，能够更灵活地处理复杂的关系和处理非精确的输入数据。例如，人工神经网络在软件工作量估计中的应用，它能够学习先前的数据，建模复杂的关系，并对未见过的数据产生可接受的结果。</li><li>适用场景：非算法型模型则更加灵活，能够处理不确定性和复杂关系，适用于数据不完全和环境不确定的情况。</li></ul></li></ul></li></ul></li></ul><h3 id="3-2-模糊逻辑方法"><a href="#3-2-模糊逻辑方法" class="headerlink" title="3.2 模糊逻辑方法"></a>3.2 模糊逻辑方法</h3><ul><li><p>模糊逻辑是什么？</p><ul><li>一种处理不确定性的<strong>数学工具</strong>，也提供了一种处理非精确性和信息粒度的技术</li></ul></li><li><p>模糊逻辑模型使用了Lotfi Zadeh引入的模糊逻辑概念，这是模糊逻辑研究的重要里程碑。</p></li><li><p>模糊推理由以下三个过程组成：</p><ul><li>模糊化过程  【模糊化】<ul><li>将客观术语转化为模糊概念的过程。</li><li>将隶属函数应用于变量的实际值，以确定置信因子或隶属函数（MF）。</li><li>模糊化使得输入和输出可以用语言术语来表达。</li><li><strong>例如，如果我们有一个表示温度的变量，我们可以使用隶属函数将实际温度值模糊化为”冷”、”温暖”或”炎热”等模糊术语。</strong></li></ul></li><li>模糊规则推理 【推理出模糊规则，根据模糊规则得到模糊结果】<ul><li>根据规则条件的模糊化和置信因子传播，推导出规则的结论。</li><li>多个规则可能被触发，推理引擎会为特定结果分配最大成员值的所有已触发规则。</li></ul></li><li>去模糊化过程 【将模糊结果进行去模糊化，得到具体的目标值】<ul><li>将模糊输出转化为具体的目标值。</li><li><strong>目的</strong>是从模糊的结果中提取出一个确定性的、可理解的值。</li><li>常用的方法包括计算模糊输出的重心或使用模糊积分等数学运算来计算清晰值。</li></ul></li></ul></li><li><p>其他学者在模糊逻辑方面的研究：</p><ul><li>Gray 和 MacDonell：比较了<strong>功能点分析</strong>、<strong>回归技术</strong>、<strong>前馈神经网络</strong>和<strong>模糊逻辑</strong>在软件工作量估计中的应用。<ul><li>他们的<strong>结果表明</strong>，模糊逻辑模型取得了良好的性能，在准确性方面仅次于具有相当多输入变量的神经网络模型。</li></ul></li><li>Fei 和 Liu：介绍了f-COCOMO模型，该模型将<strong>模糊逻辑（fuzzy logic）</strong>应用于软件工作量估计的COCOMO模式。<ul><li>由于在他们的研究中<strong>没有将f-COCOMO和其他努力估计模型之间的结果进行比较</strong>，因此前者的估计能力是未知的。</li></ul></li><li>Roger：提出了一种模糊COCOMO模型，该模型采用模糊逻辑方法对软件努力驱动因素的不确定性进行建模；<ul><li>但<strong>没有提及所提出模型的有效性</strong>。</li></ul></li></ul></li></ul><h3 id="3-3-参数分析"><a href="#3-3-参数分析" class="headerlink" title="3.3 参数分析"></a>3.3 参数分析</h3><ul><li><p>主要介绍了用于评估成本估算模型的主要参数——<strong>相对误差幅度</strong>（Magnitude of Relative Error，简称MRE）</p><ul><li><p><strong>MRE</strong>（Magnitude of Relative Error）：</p><ul><li>MRE是用于评估成本估算模型的关键指标之一。</li><li>对于每个被预测出的观测样本i，计算其MRE值。MRE的计算公式如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/%E8%BD%AF%E4%BB%B6%E4%BC%B0%E7%AE%97%E6%8A%80%E6%9C%AF%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB_1.png" alt="image-20230610100335786"></p><p>其中，Predicted Effort(i)表示对样本i的预测工作量，Actual Effort(i)表示实际工作量。MRE用于衡量预测值与实际值之间的相对误差。</p></li><li><p><strong>MMRE</strong>（Mean MRE）：</p><ul><li>对于多个样本观测（N），可以通过计算平均MRE（MMRE）来对MRE进行聚合。</li><li>MMRE的计算公式如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/%E8%BD%AF%E4%BB%B6%E4%BC%B0%E7%AE%97%E6%8A%80%E6%9C%AF%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB_2.png" alt="软件估算技术论文_MRE"></p><p>其中，Σ表示对所有样本的MRE求和。</p></li><li><p>**Pred(l)**：Pred(l)是另一个衡量预测准确度的指标。它表示MRE小于或等于l的观测样本数k占总观测样本数N的比例。</p></li></ul></li><li><p>综合来看，对于成本估算模型的评估，可以使用MRE、MMRE和Pred(l)这三个指标。</p></li><li><p>MRE用于计算单个样本的相对误差，MMRE用于计算所有样本的平均相对误差，而Pred(l)则表示预测值与实际值之间的误差在某个阈值（l）内的样本所占的比例。</p></li><li><p>一般而言，预测技术的准确度与Pred(l)成正比，与MMRE成反比。</p></li></ul><h2 id="四、方法论"><a href="#四、方法论" class="headerlink" title="四、方法论"></a>四、方法论</h2><ul><li>使用了系统开发项目集。对于系统的41个模块，记录了每个模块的开发时间。同时，还记录了每个模块的耦合度（Dhama）、复杂度（McCabe）和代码行数等度量指标用于统计和分析。</li></ul><h2 id="五、结果"><a href="#五、结果" class="headerlink" title="五、结果"></a>五、结果</h2><ul><li>作者通过：</li><li>选择项目的子集，即10个项目；</li><li>分别统计了 <strong>实际开发时间（Actual DT）</strong> 和 <strong>使用模糊逻辑估算的开发时间（Fuzzy Logic）</strong>；</li><li>计算了每一个项目的<strong>相对误差幅度[Magnitude of Relative Error (MRE) ]</strong></li><li>最后计算出<strong>平均相对误差幅度（MMRE）</strong>；</li><li>在这个过程中，使用了双侧高斯隶属函数进行模糊数据的处理，得出实验结果：<strong>应用该模糊逻辑的相对误差均值（MMRE）明显低于其他模糊逻辑模型</strong>。</li></ul><h2 id="六、结论"><a href="#六、结论" class="headerlink" title="六、结论"></a>六、结论</h2><ul><li>本文提出了一种估算软件开发时间的新方法，关键点在于：<strong>模糊技术中的双侧高斯隶属函数用于软件开发时间的估计；</strong></li><li>作者通过收集数据对该方法的有效性进行了验证，得出模糊逻辑的优点和良好的推广性。</li><li>主要优点：<ul><li>使用的模糊规则具有很好的可解释性；</li><li>可以将专家知识（模糊规则）项目数据组合成一个通用框架，在软件评估中具有广泛的适用性。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>论文阅读笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>论文阅读笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习--约束的使用</title>
    <link href="/2023/05/22/MySQL--%E7%BA%A6%E6%9D%9F%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/05/22/MySQL--%E7%BA%A6%E6%9D%9F%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL学习–约束的使用"><a href="#MySQL学习–约束的使用" class="headerlink" title="MySQL学习–约束的使用"></a>MySQL学习–约束的使用</h1><h2 id="常见约束的使用"><a href="#常见约束的使用" class="headerlink" title="常见约束的使用"></a>常见约束的使用</h2><ul><li>案例</li></ul><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/MySQL_constraint01.jpg?raw=true"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br>CREATE TABLE STU_INFO(<br>ID INT PRIMARY KEY AUTO_INCREMENT  COMMENT &#x27;id，主键，自动增长&#x27;, <br>STU_NAME VARCHAR(10) NOT NULL UNIQUE COMMENT &#x27;不为空，并且唯一&#x27;,<br>AGE INT CHECK(AGE &gt; 0 &amp;&amp; AGE &lt;= 120) COMMENT &#x27;大于0，小于等于120&#x27;,<br>STU_STATUS CHAR(1) DEFAULT &#x27;1&#x27; COMMENT &#x27;没有指定则默认为1&#x27;,<br>GENDER CHAR(1) COMMENT &#x27;性别&#x27;<br>) COMMENT &#x27;学生信息表&#x27;;<br><br><br>INSERT INTO STU_INFO(STU_NAME, AGE, GENDER) VALUES <br>(&#x27;张三&#x27;, 12, &#x27;男&#x27;),<br>(&#x27;李四&#x27;, 17, &#x27;女&#x27;),<br>(&#x27;张三1&#x27;, 13, &#x27;女&#x27;);<br>-- ID 字段会自动填充和增长<br>-- NAME 字段不能为空，且不能重复<br>-- STU_STATUS 字段会自动填充为‘1’<br><br>INSERT INTO STU_INFO(STU_NAME, AGE, GENDER) VALUES <br>(&#x27;张三2&#x27;, 130, &#x27;女&#x27;);<br>-- 年龄不能小于0， 大于120<br></code></pre></td></tr></table></figure><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><h3 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建表时添加外键<br>create table 表名(<br>字段名 数据类型,<br>    ...<br>    <br>    constraint 外键名称 foreign key(外键字段名) references 主表名（主表列名）;<br>)<br><br>-- 已创建表，增加外键<br>alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表（主表列名）;<br></code></pre></td></tr></table></figure><h3 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名 drop foreign key 外键名称;<br></code></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br>    id   int auto_increment comment &#x27;ID&#x27; primary key,<br>    name varchar(50) not null comment &#x27;部门名称&#x27;<br>)comment &#x27;部门表&#x27;;<br><br>INSERT INTO dept (id, name) VALUES <br>(1, &#x27;研发部&#x27;), <br>(2, &#x27;市场部&#x27;),<br>(3, &#x27;财务部&#x27;), <br>(4, &#x27;销售部&#x27;), <br>(5, &#x27;总经办&#x27;);<br><br><br>create table emp(<br>    id  int auto_increment comment &#x27;ID&#x27; primary key,<br>    name varchar(50) not null comment &#x27;姓名&#x27;,<br>    age  int comment &#x27;年龄&#x27;,<br>job varchar(20) comment &#x27;职位&#x27;,<br>salary int comment &#x27;薪资&#x27;,<br>entrydate date comment &#x27;入职时间&#x27;,<br>managerid int comment &#x27;直属领导id&#x27;,<br>    dept_id int comment &#x27;部门ID&#x27;<br>)comment &#x27;员工表&#x27;;<br><br>INSERT INTO emp (id, name, age, job, salary, entrydate, managerid, dept_id) VALUES <br>(1, &#x27;张无忌&#x27;, 20, &#x27;总裁&#x27;, 20000, &#x27;2000-01-01&#x27;, null, 5),<br>(2, &#x27;杨逍&#x27;, 33, &#x27;总裁&#x27;, 12500, &#x27;2005-12-05&#x27;, null, 1),<br>(3, &#x27;赵敏&#x27;, 18, &#x27;总裁&#x27;, 8400, &#x27;2000-11-03&#x27;, null, 2),<br>(4, &#x27;常遇春&#x27;, 43, &#x27;总裁&#x27;, 11000, &#x27;2002-02-05&#x27;, null, 2),<br>(5, &#x27;小昭&#x27;, 19, &#x27;总裁&#x27;, 10500, &#x27;2004-09-07&#x27;, null, 3),<br>(6, &#x27;韦一笑&#x27;, 48, &#x27;总裁&#x27;, 6600, &#x27;2004-10-12&#x27;, null, 3);<br><br><br><br>-- 已创建表，增加外键<br>alter table emp add constraint fk_emp_dept_id foreign key (dept_id) references dept(id);<br><br>-- 删除外键<br>alter table emp drop foreign key fk_emp_dept_id;<br><br><br><br><br>-- 案例2<br><br>-- 创建银行表（whm_Bank）<br>CREATE TABLE whm_Bank(<br>bank_name VARCHAR(100) NOT NULL PRIMARY KEY COMMENT &#x27;银行名字&#x27;, <br>bankBranch_name VARCHAR(100) NOT NULL COMMENT &#x27;支行名字&#x27;,<br>CONSTRAINT fK_bank_branch FOREIGN KEY (bankBranch_name) REFERENCES whm_BankBranch(bankBranch_name)<br>) COMMENT &#x27;银行表（whm_Bank）&#x27;;<br>-- 设置外键时，MySQL的建表语句中CONSTRAINT不要省略！<br><br>-- 创建支行表（whm_BankBranch）<br>CREATE TABLE whm_BankBranch(<br>bankBranch_name VARCHAR(100) NOT NULL PRIMARY KEY COMMENT &#x27;支行名字&#x27;, <br>city VARCHAR(100) COMMENT &#x27;支行所在城市&#x27;,<br>assert BIGINT COMMENT &#x27;资产&#x27;<br>) COMMENT &#x27;支行表（whm_BankBranch）&#x27;;<br><br></code></pre></td></tr></table></figure><h3 id="删除-x2F-更新记录时的行为"><a href="#删除-x2F-更新记录时的行为" class="headerlink" title="删除&#x2F;更新记录时的行为"></a>删除&#x2F;更新记录时的行为</h3><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>在当父表中更新&#x2F;删除对应记录时，首先检查该记录是否有对应外键，如果有则<strong>不允许</strong>删除&#x2F;更新(与RESTRICT一致)。</td></tr><tr><td>RESTRICT</td><td>在当父表中更新&#x2F;删除对应记录时，首先检查该记录是否有对应外键，如果有则<strong>不允许</strong>删除&#x2F;更新(与NO ACTION一致)。</td></tr><tr><td>CASCADE</td><td>在当父表中更新&#x2F;删除对应记录时，首先检查该记录是否有对应外键，如果有则<strong>也删除&#x2F;更新</strong>外键所在子表中的记录。（<strong>也叫级联更新</strong>）</td></tr><tr><td>SET NULL</td><td>在当父表中更新&#x2F;删除对应记录时，首先检查该记录是否有对应外键，如果有则<strong>设置子表中该外键的值为NULL</strong>(要求外键允许为NULL)。</td></tr><tr><td>SET DEFAULT</td><td>在当父表中更新&#x2F;删除对应记录时，首先检查该记录是否有对应外键，如果有则<strong>设置子表中该外键的值为一个默认的值</strong>(Innodb不支持)。</td></tr></tbody></table><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 设置级联删除/更新<br>alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表（主表列名） on update cascade on delete cascade;<br></code></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 设置级联更新/删除<br>alter table emp add constraint fk_emp_dept_id foreign key (dept_id) references dept(id) on update cascade on delete cascade;<br><br>-- 注意：此处为设置emp表的外键为dept表的id字段，父表指的是dept，子表指的是emp；<br>-- 修改dept表中的id字段，会级联修改emp中的数据。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>约束</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>约束</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-多用户即时通信系统-用户注册、退出系统以及拉取在线用户列表</title>
    <link href="/2023/05/20/Java-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E3%80%81%E9%80%80%E5%87%BA%E7%B3%BB%E7%BB%9F%E4%BB%A5%E5%8F%8A%E6%8B%89%E5%8F%96%E5%9C%A8%E7%BA%BF%E7%94%A8%E6%88%B7%E5%88%97%E8%A1%A8/"/>
    <url>/2023/05/20/Java-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E3%80%81%E9%80%80%E5%87%BA%E7%B3%BB%E7%BB%9F%E4%BB%A5%E5%8F%8A%E6%8B%89%E5%8F%96%E5%9C%A8%E7%BA%BF%E7%94%A8%E6%88%B7%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-多用户即时通信系统-用户注册、退出系统以及拉取在线用户列表"><a href="#Java-多用户即时通信系统-用户注册、退出系统以及拉取在线用户列表" class="headerlink" title="Java-多用户即时通信系统-用户注册、退出系统以及拉取在线用户列表"></a>Java-多用户即时通信系统-用户注册、退出系统以及拉取在线用户列表</h1><h2 id="一、思路分析"><a href="#一、思路分析" class="headerlink" title="一、思路分析"></a>一、思路分析</h2><h3 id="1-1-用户注册功能"><a href="#1-1-用户注册功能" class="headerlink" title="1.1 用户注册功能"></a>1.1 用户注册功能</h3><ul><li>客户端：<ul><li>1.用户选择”用户注册“选项，输入账户名和密码；</li><li>2.将输入的信息封装成一个User对象；</li><li>3.通过新建的另一个Socket将该User对象发送给服务器端；</li><li>4.并不断监听服务器端返回的结果。</li></ul></li><li>服务器端：<ul><li>1.通过监听对应的端口获取socket；</li><li>2.读取客户端发送的User对象；</li><li>3.验证该用户是否存在，存在则返回注册失败，否则在用户集合中添加该用户并返回注册结果。</li></ul></li></ul><h3 id="1-2-用户退出功能"><a href="#1-2-用户退出功能" class="headerlink" title="1.2 用户退出功能"></a>1.2 用户退出功能</h3><ul><li><p>客户端：</p><ul><li>1.用户选择”退出系统”选项；</li><li>2.封装一个请求退出系统的Message消息对象，包括消息类型，请求退出用户的userID等</li><li>3.将该Message对象通过对应的Socket发送给服务器端；</li><li>4.退出打印菜单界面的while循环；</li><li>5.调用System.exit(0)无异常退出系统。</li></ul></li><li><p>服务器端：</p><ul><li>1.读取对应socket通道的Message对象；</li><li>2.判断该Message对象是否为用户退出类型；</li><li>3.如果是，根据该Message对象携带的userID获取到对应的socket，并从客户端连接服务器端的线程集合类中移除该userID对应的线程以及关闭该socket；</li><li>4.停止当前客户端连接服务器端通信的线程。</li></ul></li></ul><h3 id="1-3-拉取在线用户列表"><a href="#1-3-拉取在线用户列表" class="headerlink" title="1.3 拉取在线用户列表"></a>1.3 拉取在线用户列表</h3><ul><li>客户端：<ul><li>1.封装一个请求用户列表类型的Message对象，并通过socket数据通道发送给服务器端；</li><li>2.在对应的客户端连接服务器端的线程中，监听服务器端返回的 <strong>特定格式</strong> 的用户列表，解析并打印该列表；</li></ul></li><li>服务器端：<ul><li>1.读取socket数据通道中的Message对象;</li><li>2.若为请求在线用户列表类型的Message对象，则通过<strong>客户端连接服务器线程管理类</strong>获取<strong>所有正在与服务器端通信的客户端的userID</strong>；</li><li>3.将所有获取到的在线用户的userID<strong>封装成特定格式</strong>返回给Message对象的发送方；</li></ul></li></ul><h2 id="二、具体实现"><a href="#二、具体实现" class="headerlink" title="二、具体实现"></a>二、具体实现</h2><h4 id="2-1-客户端"><a href="#2-1-客户端" class="headerlink" title="2.1 客户端"></a>2.1 客户端</h4><h5 id="1-实体类（放在common包下）"><a href="#1-实体类（放在common包下）" class="headerlink" title="1 实体类（放在common包下）"></a>1 实体类（放在common包下）</h5><ul><li>包括用户类（User）、消息类（Message）、消息类型接口（MessageType）</li></ul><h6 id="User"><a href="#User" class="headerlink" title="User"></a>User</h6><ul><li>用户类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<span class="hljs-comment">//序列化ID，用来保证序列化和反序列化过程中，User类的一致性</span><br>    <span class="hljs-keyword">private</span> String userID;<span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> String password;<span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String userID, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userID = userID;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getuserID</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setuserID</span><span class="hljs-params">(String userID)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userID = userID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;userID=&#x27;&quot;</span> + userID + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h6><ul><li>消息类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<span class="hljs-comment">//序列化ID，用来保证序列化和反序列化过程中，User类的一致性</span><br>    <span class="hljs-keyword">private</span> String sender_ip;<span class="hljs-comment">//发送方ip</span><br>    <span class="hljs-keyword">private</span> String receiver_ip;<span class="hljs-comment">//接收方ip</span><br>    <span class="hljs-keyword">private</span> String send_data;<span class="hljs-comment">//发送内容</span><br>    <span class="hljs-keyword">private</span> String send_time;<span class="hljs-comment">//发送时间</span><br>    <span class="hljs-keyword">private</span> String message_type;<span class="hljs-comment">//消息类型（如：文本，图片，音频，视频等）</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(String sender_ip, String receiver_ip, String send_data, String send_time, String message_type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sender_ip = sender_ip;<br>        <span class="hljs-built_in">this</span>.receiver_ip = receiver_ip;<br>        <span class="hljs-built_in">this</span>.send_data = send_data;<br>        <span class="hljs-built_in">this</span>.send_time = send_time;<br>        <span class="hljs-built_in">this</span>.message_type = message_type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSender_ip</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sender_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSender_ip</span><span class="hljs-params">(String sender_ip)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sender_ip = sender_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getReceiver_ip</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> receiver_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReceiver_ip</span><span class="hljs-params">(String receiver_ip)</span> &#123;<br>        <span class="hljs-built_in">this</span>.receiver_ip = receiver_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSend_data</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> send_data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSend_data</span><span class="hljs-params">(String send_data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.send_data = send_data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSend_time</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> send_time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSend_time</span><span class="hljs-params">(String send_time)</span> &#123;<br>        <span class="hljs-built_in">this</span>.send_time = send_time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage_type</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message_type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage_type</span><span class="hljs-params">(String message_type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message_type = message_type;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="MessageType"><a href="#MessageType" class="headerlink" title="MessageType"></a>MessageType</h6><ul><li>消息类型接口</li><li>增加：<ul><li>注册消息类型；</li><li>聊天消息类型；</li><li>请求在线用户列表消息类型；</li><li>客户端请求退出消息类型；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/4 20:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MessageType</span> &#123;<br>    <span class="hljs-comment">//表示消息状态的常量</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_FAILED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0&quot;</span>;<span class="hljs-comment">//表示登录失败</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_SUCCEED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>;<span class="hljs-comment">//表示登录成功</span><br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_REGISTER_FAILED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span>;<span class="hljs-comment">//表示注册失败</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_REGISTER_SUCCEED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3&quot;</span>;<span class="hljs-comment">//表示注册成功</span><br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_COMMON_MSG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;4&quot;</span>;<span class="hljs-comment">//普通信息包，即聊天文本消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_REQUEST_ONLINE_USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;5&quot;</span>;<span class="hljs-comment">//请求 在线用户列表 的消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_RESPONSE_ONLINE_USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;6&quot;</span>;<span class="hljs-comment">//返回 持有在线用户列表 的消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_CLIENT_EXIT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;7&quot;</span>;<span class="hljs-comment">//客户端请求退出</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-功能类（放在service包下）"><a href="#2-功能类（放在service包下）" class="headerlink" title="2 功能类（放在service包下）"></a>2 功能类（放在service包下）</h5><h6 id="UserClientService"><a href="#UserClientService" class="headerlink" title="UserClientService"></a>UserClientService</h6><ul><li>实现用户登录、注册等功能的类；</li><li>增加：<ul><li>用户注册功能；</li><li>向服务器端请求在线用户列表；</li><li>客户端请求退出功能；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 该类完成用户登录验证，用户注册等功能</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserClientService</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<span class="hljs-comment">//User对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">regUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<span class="hljs-comment">//User对象</span><br>    <span class="hljs-type">Socket</span> <span class="hljs-variable">loginSocket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//Socket对象</span><br>    <span class="hljs-type">Socket</span> <span class="hljs-variable">regSocket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//Socket对象</span><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录验证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userID 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password 密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回登录验证结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkUser</span><span class="hljs-params">(String userID, String password)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><br>        loginUser.setuserID(userID);<br>        loginUser.setPassword(password);<br><br>        <span class="hljs-comment">//向服务器发送User对象，根据服务器返回的结果进行验证</span><br>        loginSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">9999</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(loginSocket.getOutputStream());<br>        <span class="hljs-comment">//发送user对象</span><br>        objectOutputStream.writeObject(loginUser);<br><br>        <span class="hljs-comment">//socket.shutdownOutput();</span><br><br>        <span class="hljs-comment">//读取服务器端返回的验证结果</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(loginSocket.getInputStream());<br>        <span class="hljs-comment">//读取返回的Message对象</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) objectInputStream.readObject();<br><br>        <span class="hljs-keyword">if</span>(message.getMessage_type().equals(MessageType.MESSAGE_LOGIN_SUCCEED)) &#123;<span class="hljs-comment">//登录成功</span><br>            <span class="hljs-comment">//登录成功，创建一个与服务器端保持通信的线程 -&gt; 创建一个线程类ClientConnectServerThread</span><br>            <span class="hljs-type">ClientConnectServerThread</span> <span class="hljs-variable">clientConnectServerThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientConnectServerThread</span>(loginSocket);<br>            <span class="hljs-comment">//启动客户端与服务器端通信的线程</span><br>            clientConnectServerThread.start();<br>            <span class="hljs-comment">//为了方便拓展，将该线程放在一个集合中进行管理</span><br>            <span class="hljs-comment">//【关于“拓展”】：比如，客户端在私聊另一个客户端的同时，还在与其他客户端发送文件，此时需要同时进行两个任务，使用多线程并发实现</span><br>            ClientConnectServerThreadManage.addClientConnectServerThread(userID, clientConnectServerThread);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//登录失败</span><br><br>            System.out.println(message.getSend_data());<br><br>            <span class="hljs-comment">//应该关闭打开的流 和 Socket对象</span><br>            objectInputStream.close();<br>            loginSocket.close();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户注册功能</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> regUserID 注册用户ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> regPassword 注册用户密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 注册是否成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">registerUser</span><span class="hljs-params">(String regUserID, String regPassword)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        regUser.setuserID(regUserID);<br>        regUser.setPassword(regPassword);<br><br>        <span class="hljs-comment">//向服务器发送User对象，根据服务器返回的结果进行验证</span><br>        regSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">10000</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(regSocket.getOutputStream());<br>        <span class="hljs-comment">//发送user对象</span><br>        objectOutputStream.writeObject(regUser);<br><br>        <span class="hljs-comment">//socket.shutdownOutput();</span><br><br>        <span class="hljs-comment">//读取服务器端返回的验证结果</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(regSocket.getInputStream());<br>        <span class="hljs-comment">//读取返回的Message对象</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) objectInputStream.readObject();<br><br>        <span class="hljs-keyword">if</span>(message.getMessage_type().equals(MessageType.MESSAGE_REGISTER_SUCCEED)) &#123;<span class="hljs-comment">//注册成功</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//登录失败</span><br><br>            System.out.println(message.getSend_data());<br><br>            <span class="hljs-comment">//应该关闭打开的流 和 Socket对象</span><br>            objectInputStream.close();<br>            objectOutputStream.close();<br>            regSocket.close();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向服务器端请求在线用户列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userID 用户ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestOnlineUserList</span><span class="hljs-params">(String userID)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//封装请求在线用户列表的Message对象</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setMessage_type(MessageType.MESSAGE_REQUEST_ONLINE_USER);<br>        message.setSender_ip(userID);<br>        <span class="hljs-comment">//发送该对象</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">cur_socket</span> <span class="hljs-operator">=</span> ClientConnectServerThreadManage.getClientConnectServerThread(userID).getSocket();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(cur_socket.getOutputStream());<br>        objectOutputStream.writeObject(message);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 客户端请求退出</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userID 请求退出的客户端userID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clientExit</span><span class="hljs-params">(String userID)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//封装请求退出的message对象</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setMessage_type(MessageType.MESSAGE_CLIENT_EXIT);<br>        message.setSender_ip(userID);<br><br>        <span class="hljs-comment">//获取对象输出流</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ClientConnectServerThreadManage.getClientConnectServerThread(userID).getSocket();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br><br>        <span class="hljs-comment">//发送Message对象</span><br>        objectOutputStream.writeObject(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="ClientConnectServerThread"><a href="#ClientConnectServerThread" class="headerlink" title="ClientConnectServerThread"></a>ClientConnectServerThread</h6><ul><li>客户端保持与服务器端通信的线程类</li><li>增加：<ul><li>处理 请求用户列表 类型的消息；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端保持与服务器端通信的线程</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientConnectServerThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-comment">//持有用于网络通信的Socket对象</span><br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientConnectServerThread</span><span class="hljs-params">()</span>&#123; &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientConnectServerThread</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Socket <span class="hljs-title function_">getSocket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> socket;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSocket</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//客户端需要在后台一直保持与服务器端通信，因此使用while循环；</span><br>        <span class="hljs-comment">//【因此这种阻塞式IO的方式，导致效率比较低！】</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-built_in">this</span>.getSocket().getInputStream());<br>                <span class="hljs-comment">//读取服务器端发送的数据，如果没有发送数据，则线程阻塞！</span><br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) objectInputStream.readObject();<br><br>                <span class="hljs-keyword">if</span>(message.getMessage_type().equals(MessageType.MESSAGE_RESPONSE_ONLINE_USER))&#123;<br>                    <span class="hljs-comment">//规定服务器端返回的在线用户列表以&quot;,&quot;分隔</span><br>                    String[] onlineUser = message.getSend_data().split(<span class="hljs-string">&quot;,&quot;</span>);<br>                    System.out.println(<span class="hljs-string">&quot;===================== 在线用户 =====================&quot;</span>);<br>                    <span class="hljs-keyword">for</span> (String s : onlineUser) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;\t\t\t用户：&quot;</span> + s);<br>                    &#125;<br>                    System.out.println(<span class="hljs-string">&quot;==================================================\n&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;其他类型的消息暂时不处理！&quot;</span>);<br>                &#125;<br><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="ClientConnectServerThreadManage"><a href="#ClientConnectServerThreadManage" class="headerlink" title="ClientConnectServerThreadManage"></a>ClientConnectServerThreadManage</h6><ul><li>管理ClientConnectServerThread线程的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientConnectServerThreadManage</span> &#123;<br>    <span class="hljs-comment">//管理ClientConnectServerThread线程类的集合, 以userID为key；</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HashMap&lt;String, ClientConnectServerThread&gt; clientConnectServerThreads = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientConnectServerThreadManage</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">//向集合添加一个线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addClientConnectServerThread</span><span class="hljs-params">(String userID, ClientConnectServerThread clientConnectServerThread)</span>&#123;<br>        clientConnectServerThreads.put(userID, clientConnectServerThread);<br>    &#125;<br><br>    <span class="hljs-comment">//根据userID获取集合中的某个线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ClientConnectServerThread <span class="hljs-title function_">getClientConnectServerThread</span><span class="hljs-params">(String userID)</span>&#123;<br>        <span class="hljs-keyword">return</span> clientConnectServerThreads.get(userID);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-工具类（放在utils包下）"><a href="#3-工具类（放在utils包下）" class="headerlink" title="3 工具类（放在utils包下）"></a>3 工具类（放在utils包下）</h5><h6 id="Util-KeyBoardInput"><a href="#Util-KeyBoardInput" class="headerlink" title="Util_KeyBoardInput"></a>Util_KeyBoardInput</h6><ul><li>用于处理用户键盘输入的工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Util_KeyBoardInput</span> &#123;<br>    <span class="hljs-comment">//静态属性scanner</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取键盘输入的指定长度的字符串(不能为空串，limit &gt;= 1)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit 限定的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 指定长度的字符串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readString</span><span class="hljs-params">(<span class="hljs-type">int</span> limit)</span>&#123;<br>        <span class="hljs-keyword">return</span> readKeyBoard(limit, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能： 读取一个字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit 读取的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> blankReturn 如果为true ,表示 可以读空字符串。</span><br><span class="hljs-comment">     *   如果为false表示 不能读空字符串。</span><br><span class="hljs-comment">     *如果输入为空，或者输入大于limit的长度，就会提示重新输入。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readKeyBoard</span><span class="hljs-params">(<span class="hljs-type">int</span> limit, <span class="hljs-type">boolean</span> blankReturn)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span>(scanner.hasNextLine())&#123;<br>            line = scanner.nextLine();<br>            <span class="hljs-comment">//如果line.length=0, 即用户没有输入任何内容，直接回车</span><br>            <span class="hljs-keyword">if</span> (line.length() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (blankReturn) <span class="hljs-keyword">return</span> line;<span class="hljs-comment">//如果blankReturn=true,可以返回空串</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//如果blankReturn=false,不接受空串，必须输入内容</span><br>            &#125;<br><br>            <span class="hljs-comment">//如果用户输入的内容大于了 limit，就提示重写输入</span><br>            <span class="hljs-comment">//如果用户如的内容 &gt;0 &lt;= limit ,我就接受</span><br>            <span class="hljs-keyword">if</span> (line.length() &lt; <span class="hljs-number">1</span> || line.length() &gt; limit) &#123;<br>                System.out.print(<span class="hljs-string">&quot;输入长度（不能大于&quot;</span> + limit + <span class="hljs-string">&quot;）错误，请重新输入：&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> line;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-界面类（放在view包下）"><a href="#4-界面类（放在view包下）" class="headerlink" title="4 界面类（放在view包下）"></a>4 界面类（放在view包下）</h5><h6 id="QQClientView"><a href="#QQClientView" class="headerlink" title="QQClientView"></a>QQClientView</h6><ul><li>客户端界面类（目前没有前端，使用命令行输出的方式展示前端）；</li><li>增加用户注册、退出系统，拉取在线用户列表功能；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QQClientView</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isLoop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//是否退出系统</span><br>    <span class="hljs-keyword">private</span> String userID, password;<span class="hljs-comment">//用户输入的登录信息</span><br>    <span class="hljs-keyword">private</span> String regUserID, regPassword;<span class="hljs-comment">//用户输入的注册信息</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">UserClientService</span> <span class="hljs-variable">userClientService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserClientService</span>();<span class="hljs-comment">//用于用户登录注册等功能的对象</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mainView</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        String selectItem;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span>(isLoop)&#123;<br>            System.out.println(<span class="hljs-string">&quot;=============== 欢迎登录网络通信系统 ===============&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 1 登录系统 \t\t&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 2 注册账号 \t\t&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 9 退出系统 \t\t&quot;</span>);<br>            System.out.print(<span class="hljs-string">&quot;请输入您的选择：&quot;</span>);<br>            selectItem = Util_KeyBoardInput.readString(<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">switch</span> (selectItem)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;请输入用户名: &quot;</span>);<br>                    userID = Util_KeyBoardInput.readString(<span class="hljs-number">50</span>);<br>                    System.out.print(<span class="hljs-string">&quot;请输入密  码：&quot;</span>);<br>                    password = Util_KeyBoardInput.readString(<span class="hljs-number">50</span>);<br>                    System.out.println(<span class="hljs-string">&quot;登录验证中......&quot;</span>);<br>                    <span class="hljs-keyword">if</span>(userClientService.checkUser(userID, password))&#123;<br>                        System.out.println(<span class="hljs-string">&quot;=============== 欢迎您（&quot;</span>+ userID +<span class="hljs-string">&quot;）登录网络通信系统 ===============&quot;</span>);<br>                        <span class="hljs-comment">//进入二级菜单</span><br>                        <span class="hljs-keyword">while</span>(isLoop)&#123;<br>                            System.out.println(<span class="hljs-string">&quot;=============== 欢迎您（&quot;</span>+ userID +<span class="hljs-string">&quot;），这里是网络通信系统二级菜单 ===============&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 1 显示在线用户列表 \t\t&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 2 群发消息 \t\t&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 3 私聊消息 \t\t&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 4 发送文件 \t\t&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 9 退出系统 \t\t&quot;</span>);<br>                            System.out.print(<span class="hljs-string">&quot;请输入您的选择：&quot;</span>);<br>                            selectItem = Util_KeyBoardInput.readString(<span class="hljs-number">1</span>);<br>                            <span class="hljs-keyword">switch</span> (selectItem)&#123;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;正在显示在线用户列表......&quot;</span>);<br>                                    userClientService.requestOnlineUserList(userID);<br>                                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;群发消息中......&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;私聊消息中......&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;发送文件中......&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>                                    userClientService.clientExit(userID);<br>                                    isLoop = <span class="hljs-literal">false</span>;<br>                                    System.exit(<span class="hljs-number">0</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">default</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;请输入正确的选项！&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        System.out.println(<span class="hljs-string">&quot;登录失败！请检查用户名和密码是否正确。&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;=============== 欢迎您注册，请输入注册信息！ ===============&quot;</span>);<br>                    System.out.print(<span class="hljs-string">&quot;请输入用户名: &quot;</span>);<br>                    regUserID = Util_KeyBoardInput.readString(<span class="hljs-number">50</span>);<br>                    System.out.print(<span class="hljs-string">&quot;请输入密  码：&quot;</span>);<br>                    regPassword = Util_KeyBoardInput.readString(<span class="hljs-number">50</span>);<br>                    System.out.println(<span class="hljs-string">&quot;注册中......&quot;</span>);<br>                    <span class="hljs-keyword">if</span>(userClientService.registerUser(regUserID, regPassword))&#123;<br>                        System.out.println(<span class="hljs-string">&quot;注册成功，请登录您的账号！&quot;</span>);<br>                        System.out.print(<span class="hljs-string">&quot;请输入用户名: &quot;</span>);<br>                        userID = Util_KeyBoardInput.readString(<span class="hljs-number">50</span>);<br>                        System.out.print(<span class="hljs-string">&quot;请输入密  码：&quot;</span>);<br>                        password = Util_KeyBoardInput.readString(<span class="hljs-number">50</span>);<br>                        System.out.println(<span class="hljs-string">&quot;登录验证中......&quot;</span>);<br>                        <span class="hljs-keyword">if</span>(userClientService.checkUser(userID, password))&#123;<br>                            System.out.println(<span class="hljs-string">&quot;=============== 欢迎您（&quot;</span>+ userID +<span class="hljs-string">&quot;）登录网络通信系统 ===============&quot;</span>);<br>                            <span class="hljs-comment">//进入二级菜单</span><br>                            <span class="hljs-keyword">while</span>(isLoop)&#123;<br>                                System.out.println(<span class="hljs-string">&quot;=============== 欢迎您（&quot;</span>+ userID +<span class="hljs-string">&quot;），这里是网络通信系统二级菜单 ===============&quot;</span>);<br>                                System.out.println(<span class="hljs-string">&quot;\t\t\t\t 1 显示在线用户列表 \t\t&quot;</span>);<br>                                System.out.println(<span class="hljs-string">&quot;\t\t\t\t 2 群发消息 \t\t&quot;</span>);<br>                                System.out.println(<span class="hljs-string">&quot;\t\t\t\t 3 私聊消息 \t\t&quot;</span>);<br>                                System.out.println(<span class="hljs-string">&quot;\t\t\t\t 4 发送文件 \t\t&quot;</span>);<br>                                System.out.println(<span class="hljs-string">&quot;\t\t\t\t 9 退出系统 \t\t&quot;</span>);<br>                                System.out.print(<span class="hljs-string">&quot;请输入您的选择：&quot;</span>);<br>                                selectItem = Util_KeyBoardInput.readString(<span class="hljs-number">1</span>);<br>                                <span class="hljs-keyword">switch</span> (selectItem)&#123;<br>                                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                                        System.out.println(<span class="hljs-string">&quot;正在显示在线用户列表......&quot;</span>);<br>                                        <span class="hljs-keyword">break</span>;<br>                                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                                        System.out.println(<span class="hljs-string">&quot;群发消息中......&quot;</span>);<br>                                        <span class="hljs-keyword">break</span>;<br>                                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                                        System.out.println(<span class="hljs-string">&quot;私聊消息中......&quot;</span>);<br>                                        <span class="hljs-keyword">break</span>;<br>                                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>                                        System.out.println(<span class="hljs-string">&quot;发送文件中......&quot;</span>);<br>                                        <span class="hljs-keyword">break</span>;<br>                                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>                                        userClientService.clientExit(userID);<br>                                        isLoop = <span class="hljs-literal">false</span>;<br>                                        System.exit(<span class="hljs-number">0</span>);<br>                                        <span class="hljs-keyword">break</span>;<br>                                    <span class="hljs-keyword">default</span>:<br>                                        System.out.println(<span class="hljs-string">&quot;请输入正确的选项！&quot;</span>);<br>                                        <span class="hljs-keyword">break</span>;<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span>&#123;<br>                            System.out.println(<span class="hljs-string">&quot;登录失败！请检查用户名和密码是否正确。&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        System.out.println(<span class="hljs-string">&quot;注册失败！该用户已存在。&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>                    isLoop = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;请输入正确的选项！&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">QQClientView</span> <span class="hljs-variable">qqView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QQClientView</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            qqView.mainView();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-服务器端"><a href="#2-2-服务器端" class="headerlink" title="2.2 服务器端"></a>2.2 服务器端</h4><h5 id="1-实体类（放在common包下）-1"><a href="#1-实体类（放在common包下）-1" class="headerlink" title="1 实体类（放在common包下）"></a>1 实体类（放在common包下）</h5><ul><li>也包括用户类（User）、消息类（Message）、消息类型接口（MessageType）</li></ul><h6 id="User-1"><a href="#User-1" class="headerlink" title="User"></a>User</h6><ul><li>用户类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<span class="hljs-comment">//序列化ID，用来保证序列化和反序列化过程中，User类的一致性</span><br>    <span class="hljs-keyword">private</span> String userID;<span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> String password;<span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String userID, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userID = userID;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getuserID</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setuserID</span><span class="hljs-params">(String userID)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userID = userID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;userID=&#x27;&quot;</span> + userID + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="Message-1"><a href="#Message-1" class="headerlink" title="Message"></a>Message</h6><ul><li>消息类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<span class="hljs-comment">//序列化ID，用来保证序列化和反序列化过程中，User类的一致性</span><br>    <span class="hljs-keyword">private</span> String sender_ip;<span class="hljs-comment">//发送方ip</span><br>    <span class="hljs-keyword">private</span> String receiver_ip;<span class="hljs-comment">//接收方ip</span><br>    <span class="hljs-keyword">private</span> String send_data;<span class="hljs-comment">//发送内容</span><br>    <span class="hljs-keyword">private</span> String send_time;<span class="hljs-comment">//发送时间</span><br>    <span class="hljs-keyword">private</span> String message_type;<span class="hljs-comment">//消息类型（如：文本，图片，音频，视频等）</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(String sender_ip, String receiver_ip, String send_data, String send_time, String message_type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sender_ip = sender_ip;<br>        <span class="hljs-built_in">this</span>.receiver_ip = receiver_ip;<br>        <span class="hljs-built_in">this</span>.send_data = send_data;<br>        <span class="hljs-built_in">this</span>.send_time = send_time;<br>        <span class="hljs-built_in">this</span>.message_type = message_type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSender_ip</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sender_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSender_ip</span><span class="hljs-params">(String sender_ip)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sender_ip = sender_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getReceiver_ip</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> receiver_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReceiver_ip</span><span class="hljs-params">(String receiver_ip)</span> &#123;<br>        <span class="hljs-built_in">this</span>.receiver_ip = receiver_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSend_data</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> send_data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSend_data</span><span class="hljs-params">(String send_data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.send_data = send_data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSend_time</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> send_time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSend_time</span><span class="hljs-params">(String send_time)</span> &#123;<br>        <span class="hljs-built_in">this</span>.send_time = send_time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage_type</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message_type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage_type</span><span class="hljs-params">(String message_type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message_type = message_type;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Message&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;sender_ip=&#x27;&quot;</span> + sender_ip + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, receiver_ip=&#x27;&quot;</span> + receiver_ip + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, send_data=&#x27;&quot;</span> + send_data + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, send_time=&#x27;&quot;</span> + send_time + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, message_type=&#x27;&quot;</span> + message_type + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="MessageType-1"><a href="#MessageType-1" class="headerlink" title="MessageType"></a>MessageType</h6><ul><li>消息类型接口</li><li>增加：<ul><li>注册消息类型；</li><li>聊天消息类型；</li><li>请求在线用户列表消息类型；</li><li>客户端请求退出消息类型；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/4 20:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MessageType</span> &#123;<br>    <span class="hljs-comment">//表示消息状态的常量</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_FAILED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0&quot;</span>;<span class="hljs-comment">//表示登录失败</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_SUCCEED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>;<span class="hljs-comment">//表示登录成功</span><br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_REGISTER_FAILED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span>;<span class="hljs-comment">//表示注册失败</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_REGISTER_SUCCEED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3&quot;</span>;<span class="hljs-comment">//表示注册成功</span><br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_COMMON_MSG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;4&quot;</span>;<span class="hljs-comment">//普通信息包，即聊天文本消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_REQUEST_ONLINE_USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;5&quot;</span>;<span class="hljs-comment">//请求 在线用户列表 的消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_RESPONSE_ONLINE_USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;6&quot;</span>;<span class="hljs-comment">//返回 持有在线用户列表 的消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_CLIENT_EXIT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;7&quot;</span>;<span class="hljs-comment">//客户端请求退出</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-功能类（放在service包下）-1"><a href="#2-功能类（放在service包下）-1" class="headerlink" title="2 功能类（放在service包下）"></a>2 功能类（放在service包下）</h5><h6 id="QQServer"><a href="#QQServer" class="headerlink" title="QQServer"></a>QQServer</h6><ul><li>QQ服务器端，监听9999端口；</li><li>增加：<ul><li>1.使用HashMap&#x2F;ConcurrentMap模拟数据库；</li><li>2.使用静态代码块初始化用户数据库；</li><li>3.将用户登录验证功能与用户注册功能分离，分别监听9999端口和10000端口进行实现；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * QQ服务器端，监听9999端口，等待客户端连接，客户端连接成功后，保持该连接的通信</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5 20:23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QQServer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//考虑高并发，使用ConcurrentHashMap；</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConcurrentMap&lt;String, User&gt; UserDB = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<span class="hljs-comment">//使用HashMap模拟数据库</span><br><br>    <span class="hljs-comment">//这里要想到使用静态代码块，静态代码块在类加载时会执行一次</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        UserDB.put(<span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>));<br>        UserDB.put(<span class="hljs-string">&quot;200&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;200&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>));<br>        UserDB.put(<span class="hljs-string">&quot;300&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;300&quot;</span>, <span class="hljs-string">&quot;1234&quot;</span>));<br>        UserDB.put(<span class="hljs-string">&quot;400&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;400&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>));<br>        UserDB.put(<span class="hljs-string">&quot;500&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;500&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>));<br>        UserDB.put(<span class="hljs-string">&quot;600&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;600&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>));<br>        UserDB.put(<span class="hljs-string">&quot;700&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;700&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//验证用户是否有效</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkLoginUser</span><span class="hljs-params">(String userID, String password)</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserDB.get(userID);<br>        <span class="hljs-keyword">return</span> user != <span class="hljs-literal">null</span> &amp;&amp; user.getPassword().equals(password);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkRegUser</span><span class="hljs-params">(String userID, String password)</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserDB.get(userID);<br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">QQServer</span><span class="hljs-params">()</span>&#123;<br>        loginUser();<br>        registerUser();<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登录线程</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">loginThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverLoginSocket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    <span class="hljs-comment">//端口可以写在配置文件中，方便后续修改</span><br>                    serverLoginSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>                    System.out.println(<span class="hljs-string">&quot;监听9999端口，等待登录...&quot;</span>);<br>                    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>                        <span class="hljs-comment">//有客户端连接则获取到Socket对象，否则阻塞</span><br>                        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverLoginSocket.accept();<br>                        System.out.println(<span class="hljs-string">&quot;连接成功，正在验证登录信息...&quot;</span>);<br>                        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>                        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>                        <span class="hljs-comment">//获取客户端发送的User对象</span><br>                        <span class="hljs-type">User</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> (User) objectInputStream.readObject();<br>                        <span class="hljs-comment">//message用于回复该客户端，是否登录成功</span><br>                        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>                        <span class="hljs-comment">//这里需要连接数据库进行验证，但是目前没有增加数据库这一块，暂时先假设只有一个用户（100，123456）可以登录成功</span><br>                        <span class="hljs-comment">//这里需要连接数据库进行验证，但是目前没有增加数据库这一块，暂时使用HashMap模拟数据库</span><br><span class="hljs-comment">//                if (user.getuserID().equals(&quot;100&quot;) &amp;&amp; user.getPassword().equals(&quot;123456&quot;)) &#123;//登录成功</span><br><br>                        <span class="hljs-keyword">if</span> (checkLoginUser(loginUser.getuserID(), loginUser.getPassword())) &#123;<span class="hljs-comment">//登录成功</span><br>                            System.out.println(<span class="hljs-string">&quot;用户(&quot;</span> + loginUser.getuserID() + <span class="hljs-string">&quot;)登录成功！&quot;</span>);<br>                            <span class="hljs-comment">//返回登录成功message</span><br>                            message.setMessage_type(MessageType.MESSAGE_LOGIN_SUCCEED);<br>                            objectOutputStream.writeObject(message);<br><br><span class="hljs-comment">//                    socket.shutdownOutput();</span><br><br>                            <span class="hljs-comment">//登录成功，创建一个线程，用于保持该连接的通信</span><br>                            <span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">serverConnectClientThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerConnectClientThread</span>(socket, loginUser.getuserID());<br>                            serverConnectClientThread.start();<br>                            <span class="hljs-comment">//加入集合方便管理</span><br>                            ServerConnectClientThreadManage.addServerConnectClientThread(loginUser.getuserID(), serverConnectClientThread);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//登录失败</span><br>                            System.out.println(<span class="hljs-string">&quot;用户(&quot;</span> + loginUser.getuserID() + <span class="hljs-string">&quot;)登录失败，取消连接&quot;</span>);<br>                            message.setMessage_type(MessageType.MESSAGE_LOGIN_FAILED);<br>                            objectOutputStream.writeObject(message);<br>                            socket.shutdownOutput();<br><br>                            objectOutputStream.close();<br>                            objectInputStream.close();<br>                            socket.close();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">if</span>(serverLoginSocket != <span class="hljs-literal">null</span>)<br>                            serverLoginSocket.close();<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br>        loginThread.start();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册线程</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">registerThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverRegisterSocket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    <span class="hljs-comment">//端口可以写在配置文件中，方便后续修改</span><br>                    serverRegisterSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">10000</span>);<br>                    System.out.println(<span class="hljs-string">&quot;监听10000端口，等待注册...&quot;</span>);<br>                    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>                        <span class="hljs-comment">//有客户端连接则获取到Socket对象，否则阻塞</span><br>                        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverRegisterSocket.accept();<br>                        System.out.println(<span class="hljs-string">&quot;连接成功，正在验证注册信息...&quot;</span>);<br>                        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>                        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>                        <span class="hljs-comment">//获取客户端发送的User对象</span><br>                        <span class="hljs-type">User</span> <span class="hljs-variable">regUser</span> <span class="hljs-operator">=</span> (User) objectInputStream.readObject();<br>                        <span class="hljs-comment">//回复该客户端，是否注册成功</span><br>                        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br><br>                        <span class="hljs-keyword">if</span> (checkRegUser(regUser.getuserID(), regUser.getPassword())) &#123;<span class="hljs-comment">//注册成功</span><br>                            System.out.println(<span class="hljs-string">&quot;用户(&quot;</span> + regUser.getuserID() + <span class="hljs-string">&quot;)注册成功！&quot;</span>);<br>                            UserDB.put(regUser.getuserID(), regUser);<br>                            <span class="hljs-comment">//返回注册成功message</span><br>                            message.setMessage_type(MessageType.MESSAGE_REGISTER_SUCCEED);<br>                            objectOutputStream.writeObject(message);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//注册失败</span><br>                            System.out.println(<span class="hljs-string">&quot;用户(&quot;</span> + regUser.getuserID() + <span class="hljs-string">&quot;)注册失败！&quot;</span>);<br>                            message.setMessage_type(MessageType.MESSAGE_REGISTER_FAILED);<br>                            objectOutputStream.writeObject(message);<br>                            socket.shutdownOutput();<br><br>                            objectOutputStream.close();<br>                            objectInputStream.close();<br>                            socket.close();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">if</span>(serverRegisterSocket != <span class="hljs-literal">null</span>)<br>                            serverRegisterSocket.close();<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br>        registerThread.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="ServerConnectClientThread"><a href="#ServerConnectClientThread" class="headerlink" title="ServerConnectClientThread"></a>ServerConnectClientThread</h6><ul><li>用于保持服务器端与某一个客户端通信的线程类</li><li>增加：<ul><li>1.增加 拉取在线用户列表 类型的消息处理；</li><li>2.增加 用于请求退出系统 类型的消息处理；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5 20:48</span><br><span class="hljs-comment"> * 用于保持服务器端与某一个客户端通信的线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerConnectClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">private</span> String userID;<span class="hljs-comment">//与某个用户（客户端）通信</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerConnectClientThread</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerConnectClientThread</span><span class="hljs-params">(Socket socket, String userID)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>        <span class="hljs-built_in">this</span>.userID = userID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Socket <span class="hljs-title function_">getSocket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> socket;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSocket</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserID</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserID</span><span class="hljs-params">(String userID)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userID = userID;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//与客户端一样，服务器端也需要不断接收客户端发送的数据，并且还可以向客户端发送数据</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLoop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span>(isLoop)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;与用户&quot;</span> + userID + <span class="hljs-string">&quot;保持连接，正在读取数据...&quot;</span>);<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-built_in">this</span>.socket.getInputStream());<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) objectInputStream.readObject();<br>                <span class="hljs-keyword">if</span>(message.getMessage_type().equals(MessageType.MESSAGE_REQUEST_ONLINE_USER))&#123;<br>                    <span class="hljs-comment">//规定返回的在线用户列表以&quot;,&quot;分隔</span><br>                    <span class="hljs-comment">//此处需要思考：从哪里可以拿到所有的在线用户呢？</span><br>                    <span class="hljs-comment">//我一开始想的是：给User实体类增加属性status，用于表示用户的登录状态</span><br>                    <span class="hljs-comment">//由于目前没有使用数据库，因此，此处只需要获取线程类集合中所有关联userID的线程即可得到所有在线用户</span><br>                    <span class="hljs-comment">//使用的是HashMap，获取所有的在线用户只需获取keySet；</span><br><br>                    System.out.println(<span class="hljs-string">&quot;当前用户（&quot;</span> + message.getSender_ip() + <span class="hljs-string">&quot;）正在请求在线用户列表&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">onlineUserList</span> <span class="hljs-operator">=</span> ServerConnectClientThreadManage.getOnlineUserList();<br><br>                    <span class="hljs-comment">//构建一个Message对象返回在线用户列表</span><br>                    <span class="hljs-type">Message</span> <span class="hljs-variable">respond_msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>                    respond_msg.setMessage_type(MessageType.MESSAGE_RESPONSE_ONLINE_USER);<br>                    respond_msg.setSend_data(onlineUserList);<br>                    respond_msg.setReceiver_ip(message.getSender_ip());<span class="hljs-comment">//设置当前message的接收方</span><br><br>                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-built_in">this</span>.socket.getOutputStream());<br>                    objectOutputStream.writeObject(respond_msg);<br><br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (message.getMessage_type().equals(MessageType.MESSAGE_CLIENT_EXIT)) &#123;<br>                    <span class="hljs-comment">//客户端请求退出：</span><br>                    <span class="hljs-comment">//1.移除集合中的线程</span><br>                    <span class="hljs-comment">//1.关闭对应的socket；</span><br>                    <span class="hljs-comment">//2.停止线程</span><br>                    ServerConnectClientThreadManage.removeServerConnectClientThread(<span class="hljs-built_in">this</span>.userID);<br>                    System.out.println(<span class="hljs-string">&quot;用户（&quot;</span> + <span class="hljs-built_in">this</span>.userID + <span class="hljs-string">&quot;）退出系统！&quot;</span>) ;<br>                    <span class="hljs-built_in">this</span>.socket.close();<br>                    isLoop = <span class="hljs-literal">false</span>;<br>                &#125; <span class="hljs-keyword">else</span>&#123;<br>                    System.out.println(<span class="hljs-string">&quot;其他类型的消息暂时不处理！&quot;</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="ServerConnectClientThreadManage"><a href="#ServerConnectClientThreadManage" class="headerlink" title="ServerConnectClientThreadManage"></a>ServerConnectClientThreadManage</h6><ul><li>管理ServerConnectClientThread线程的类</li><li>增加：<ul><li>1.在增加服务器与客户端通信线程的方法中，由put()替换为使用putIfAbsent()方法实现，能够保证线程安全；</li><li>2.增加removeServerConnectClientThread()方法；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5 20:59</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerConnectClientThreadManage</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HashMap&lt;String, ServerConnectClientThread&gt; serverConnectClientThreads = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerConnectClientThreadManage</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addServerConnectClientThread</span><span class="hljs-params">(String userID, ServerConnectClientThread serverConnectClientThread)</span>&#123;<br>        <span class="hljs-comment">//putIfAbsent 方法是一个原子操作，是线程安全的，多线程环境下可以安全地使用它来更新 Map 集合。</span><br>        <span class="hljs-comment">// 仅当Map中不存在具有相同键的映射时才会添加。</span><br>        <span class="hljs-comment">//此处，用于当该userID已经存在时，不创建新的线程与其交互；</span><br>        serverConnectClientThreads.putIfAbsent(userID, serverConnectClientThread);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeServerConnectClientThread</span><span class="hljs-params">(String userID)</span>&#123;<br>        serverConnectClientThreads.remove(userID);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ServerConnectClientThread <span class="hljs-title function_">getserverConnectClientThread</span><span class="hljs-params">(String userID)</span>&#123;<br>        <span class="hljs-keyword">return</span> serverConnectClientThreads.get(userID);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getOnlineUserList</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">onlineUserlist</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-keyword">for</span> (String s : serverConnectClientThreads.keySet()) &#123;<br>            onlineUserlist.append(s).append(<span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> onlineUserlist.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-框架类（放在frame包下）"><a href="#3-框架类（放在frame包下）" class="headerlink" title="3 框架类（放在frame包下）"></a>3 框架类（放在frame包下）</h5><h6 id="QQFrame"><a href="#QQFrame" class="headerlink" title="QQFrame"></a>QQFrame</h6><ul><li>服务器端启动框架；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5 21:22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QQFrame</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">QQServer</span> <span class="hljs-variable">qqServer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QQServer</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>多用户即时通信系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多用户即时通信系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS-基础总结</title>
    <link href="/2023/05/13/JS-%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <url>/2023/05/13/JS-%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="JS-基础总结"><a href="#JS-基础总结" class="headerlink" title="JS-基础总结"></a>JS-基础总结</h2><h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><h4 id="1-1-与Html、CSS的关系"><a href="#1-1-与Html、CSS的关系" class="headerlink" title="1.1 与Html、CSS的关系"></a>1.1 与Html、CSS的关系</h4><ul><li>HTML：构建web页面</li><li>CSS：设计web页面</li><li>JavaScript：用户端动态脚本</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">JavaScript 是一种脚本，一门编程语言，它可以在网页上实现复杂的功能，网页展现给你的不再是简单的静态信息，而是实时的内容更新，交互式的地图，<span class="hljs-number">2</span>D/<span class="hljs-number">3</span>D 动画，滚动播放的视频等等。<br><br>JavaScript 最普遍的用处是通过 DOM API 动态修改 HTML 和 CSS 来更新用户界面（user <span class="hljs-keyword">interface</span>）。如果 <span class="hljs-symbol">JavaScript</span> 在 <span class="hljs-symbol">HTML</span> 和 <span class="hljs-symbol">CSS</span> 就位之前加载运行，就会引发错误。<br></code></pre></td></tr></table></figure><h4 id="1-2-JavaScript特点"><a href="#1-2-JavaScript特点" class="headerlink" title="1.2 JavaScript特点"></a>1.2 JavaScript特点</h4><ul><li><p>执行顺序：自上而下，顺序执行；</p></li><li><p>解释型语言：JavaScript 是轻量级解释型语言；</p><ul><li>解释型语言</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">（<span class="hljs-number">1</span>）在解释型语言中，代码自上而下运行，且实时返回运行结果。<br>（<span class="hljs-number">2</span>）代码在由浏览器执行前，不需要将其转化为其他形式。<br>（<span class="hljs-number">3</span>）代码将直接以文本格式（<span class="hljs-built_in">text</span> form）被接收和处理。<br></code></pre></td></tr></table></figure><ul><li>编译型语言</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">编译型语言需要先将代码转化（编译）成另一种形式才能运行。<br>比如 <span class="hljs-built_in">C</span><span class="hljs-operator">/</span><span class="hljs-built_in">C</span><span class="hljs-operator">++</span> 先被编译成汇编语言，然后才能由计算机运行。<br>程序将以二进制的格式运行，这些二进制内容是由程序源代码产生的。<br></code></pre></td></tr></table></figure></li><li><p><strong>JavaScript也会进行编译</strong>，但是编译过程在代码执行过程中：</p></li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">（<span class="hljs-number">1</span>）技术上，几乎所有 <span class="hljs-keyword">JavaScript </span>转换器都运用了一种叫做即时编译（<span class="hljs-keyword">just-in-time </span>compiling）的技术；<br>（<span class="hljs-number">2</span>）当 <span class="hljs-keyword">JavaScript </span>源代码被执行时，它会被编译成二进制的格式，使代码运行速度更快。尽管如此，<span class="hljs-keyword">JavaScript </span>仍然是一门解释型语言，因为编译过程发生在代码运行中，而非之前。<br></code></pre></td></tr></table></figure><h4 id="1-3-内部JavaScript"><a href="#1-3-内部JavaScript" class="headerlink" title="1.3 内部JavaScript"></a>1.3 内部JavaScript</h4><ul><li><p>在&lt;script&gt; &lt;&#x2F;script&gt;标签对中编写js脚本代码；</p></li><li><p>如下：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS_02.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;DOMContentLoaded&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">function</span> <span class="hljs-title function_">createParagraph</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">let</span> para = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;p&quot;</span>);</span><br><span class="language-javascript">                    para.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;点击了按钮！&quot;</span>;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(para);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> button_ = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;button&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; button_.<span class="hljs-property">length</span>; i++)&#123;</span><br><span class="language-javascript">                    button_[i].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, createParagraph);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>运行效果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/JS_02.png" alt="内部JavaScript"></p><ul><li>每点击一次按钮，生成一个&lt;p&gt;&lt;&#x2F;p&gt;段落；</li></ul><h4 id="1-4-外部JavaScript"><a href="#1-4-外部JavaScript" class="headerlink" title="1.4 外部JavaScript"></a>1.4 外部JavaScript</h4><ul><li>将JavaScript脚本代码写在单独的js文件中，方便维护和复用；</li><li>内部JavaScript改为外部：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/JS_03.png" alt="外部JavaScript"></p><h3 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h3><ul><li>变量是存储值的容器。</li><li>要声明一个变量，先输入关键字 <code>let</code> 或 <code>var</code>，然后输入合适的名称，如下所示：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myVariable1;<br><span class="hljs-keyword">var</span> myVariable2;<br></code></pre></td></tr></table></figure><ul><li><p>注意：</p><ul><li>1.行末的分号表示当前语句结束，不过只有在<strong>单行内需要分割多条语句</strong>时，这个分号才是必须的。（为了代码的规范，建议使用分号结束一条语句）</li><li>2.JavaScript中变量的命名规则：</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crystal">在 JavaScript 中，变量命名需要遵循以下规则：<br><span class="hljs-number">1</span>.变量名只能包含字母、数字、美元符号(<span class="hljs-variable">$)</span>和下划线(_)<br><span class="hljs-number">2</span>.变量名不能以数字开头<br><span class="hljs-number">3</span>.变量名区分大小写<br><span class="hljs-number">4</span>.变量名应该使用有意义的名称，以便于代码的阅读和维护<br><span class="hljs-number">5</span>.变量名不应该使用 JavaScript 的保留关键字，例如<span class="hljs-keyword">if</span>、<span class="hljs-keyword">else</span>、<span class="hljs-keyword">while</span>等<br><span class="hljs-number">6</span>.变量名应该使用驼峰式命名法，即首单词小写，后面每个单词的首字母大写（例如：firstName）<br><span class="hljs-number">7</span>.对于常量，使用全部大写字母，并使用下划线分隔单词（例如：MAX_LENGTH）<br>总之，变量名应该为易于理解和可读性强的名称，同时符合规范和语言特点。<br></code></pre></td></tr></table></figure><ul><li>3.let和var定义变量的区别：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">（<span class="hljs-number">1</span>）作用域：使用 <span class="hljs-keyword">var</span> 声明的变量在函数和全局范围内都可以访问，而使用 <span class="hljs-keyword">let</span> 声明的变量只能在其声明的块级作用域内访问。<br><br>（<span class="hljs-number">2</span>）变量提升：使用 <span class="hljs-keyword">var</span> 声明的变量会在代码执行前被预处理，并在整个作用域可见。这意味着即使变量位于其定义之后，它也可以在该作用域中使用。然而，使用 <span class="hljs-keyword">let</span> 声明的变量不会被提升，只有在变量声明后才能使用它。<br><br>（<span class="hljs-number">3</span>）重复定义：使用 <span class="hljs-keyword">var</span> 声明的变量可以被多次定义，这将覆盖先前的定义。然而，如果在同一个作用域内使用 <span class="hljs-keyword">let</span> 定义相同的变量名，则会导致错误。<br></code></pre></td></tr></table></figure></li></ul><h3 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h3><ul><li>将一个值赋给变量时，JavaScript会自动确定该变量的数据类型，并为其分配相应的内存空间。</li><li>如下：</li></ul><table><thead><tr><th>变量</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/String">String</a></td><td>字符串（一串文本）：字符串的值必须用引号（单双均可，必须成对）括起来。</td><td><code>let myVariable = &#39;李雷&#39;;</code></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Number">Number</a></td><td>数字：无需引号。</td><td><code>let myVariable = 10;</code></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Boolean">Boolean</a></td><td>布尔值（真 &#x2F; 假）： <code>true</code>&#x2F;<code>false</code> 是 JS 里的特殊关键字，无需引号。</td><td><code>let myVariable = true;</code></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Array">Array</a></td><td>数组：用于在单一引用中存储多个值的结构。</td><td><code>let myVariable = [1, &#39;李雷&#39;, &#39;韩梅梅&#39;, 10];</code> 元素引用方法：<code>myVariable[0]</code>, <code>myVariable[1]</code> ……</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Object">Object</a></td><td>对象：JavaScript 里一切皆对象，一切皆可储存在变量里。这一点要牢记于心。</td><td><code>let myVariable = document.querySelector(&#39;h1&#39;);</code> 以及上面所有示例都是对象。</td></tr></tbody></table><ul><li>注意：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">尽管变量的数据类型是由它们的值来确定的，但数据类型本身并不是存储在变量中的，在JavaScript中，对象、数组和函数都是引用类型，它们实际上是指向内存中实际数据的指针。<br></code></pre></td></tr></table></figure><h3 id="四、运算符"><a href="#四、运算符" class="headerlink" title="四、运算符"></a>四、运算符</h3><ul><li>一类数学符号，可以根据两个值（或变量）产生结果。</li><li>JavaScript中常用的运算符如下：</li></ul><table><thead><tr><th>运算符</th><th>解释</th><th>符号</th><th>示例</th></tr></thead><tbody><tr><td>加</td><td>将两个数字相加，或拼接两个字符串。</td><td><code>+</code></td><td><code>6 + 9;&quot;Hello &quot; + &quot;world!&quot;;</code></td></tr><tr><td>减、乘、除</td><td>这些运算符操作与基础算术一致。只是乘法写作星号，除法写作斜杠。</td><td><code>-</code>, <code>*</code>, <code>/</code></td><td><code>9 - 3;8 * 2; //乘法在 JS 中是一个星号9 / 3;</code></td></tr><tr><td>赋值运算符</td><td>为变量赋值（你之前已经见过这个符号了）</td><td><code>=</code></td><td><code>let myVariable = &#39;李雷&#39;;</code></td></tr><tr><td>等于</td><td>测试两个值是否相等，并返回一个 <code>true</code>&#x2F;<code>false</code> （布尔）值。</td><td><code>===</code></td><td><code>let myVariable = 3;myVariable === 4; // false</code></td></tr><tr><td>不等于</td><td>和等于运算符相反，测试两个值是否不相等，并返回一个 <code>true</code>&#x2F;<code>false</code> （布尔）值。</td><td><code>!==</code></td><td><code>let myVariable = 3;myVariable !== 3; // false</code></td></tr><tr><td>取非</td><td>返回逻辑相反的值，比如当前值为真，则返回 <code>false</code>。</td><td><code>!</code></td><td>原式为真，但经取非后值为 <code>false</code>： <code>let myVariable = 3;!(myVariable === 3); // false</code></td></tr><tr><td>幂</td><td>取底数的指数次方，即指数所指定的底数相乘。它在 EcmaScript 2016 中首次引入。</td><td><code>**</code></td><td><code>5 ** 5</code> (返回 3125，相当于 <code>5 * 5 * 5 * 5 * 5</code> 。)</td></tr></tbody></table><ul><li>注意：<ul><li>不同类型数据之间的计算可能出现奇怪的结果，因此必须正确引用变量，才能得出预期结果。</li><li>比如：”25” + “35”或者25 + “35”的结果并不是60，而是字符串”25”与”35”进行拼接而成的”2535”。</li></ul></li></ul><h3 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h3><ul><li><p>函数一般用于用来封装可复用的功能。</p></li><li><p>函数分为浏览器内置函数和自定义函数；</p><ul><li>注意：函数内部定义的变量只能在该函数内部有效，即该变量的作用域仅限于该函数；</li></ul></li></ul><h4 id="5-1-浏览器内置函数"><a href="#5-1-浏览器内置函数" class="headerlink" title="5.1 浏览器内置函数"></a>5.1 浏览器内置函数</h4><ul><li>浏览器内置函数，例如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myVariable = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;h1&#x27;</span>);<span class="hljs-comment">//获取页面中的第一个一级标题；</span><br><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<span class="hljs-comment">//页面弹出警告窗；</span><br></code></pre></td></tr></table></figure><ul><li>JavaScript函数的底层实现是由C&#x2F;C++编写的；</li></ul><h4 id="5-2-自定义函数"><a href="#5-2-自定义函数" class="headerlink" title="5.2 自定义函数"></a>5.2 自定义函数</h4><ul><li><p>自定义函数，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//返回两数之积</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">multiply</span>(<span class="hljs-params">num1, num2</span>) &#123;<br>  <span class="hljs-keyword">let</span> result = num1 * num2;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="5-3-调用函数"><a href="#5-3-调用函数" class="headerlink" title="5.3 调用函数"></a>5.3 调用函数</h4><ul><li>通过将函数名包含在代码的某个地方，后跟圆括号来完成的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_">myFunction</span>()<br><span class="hljs-comment">// 调用一次该函数</span><br></code></pre></td></tr></table></figure><h4 id="5-4-匿名函数"><a href="#5-4-匿名函数" class="headerlink" title="5.4 匿名函数"></a>5.4 匿名函数</h4><ul><li>非匿名函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>匿名函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>匿名函数的用法</p><ul><li>1.用于绑定给按钮的点击事件：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myButton = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br><br>myButton.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>2.将函数赋值给变量：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myGreeting = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">//使用以下方式调用此函数</span><br><span class="hljs-title function_">myGreeting</span>();<br></code></pre></td></tr></table></figure></li></ul><h4 id="5-5-函数的作用域和冲突"><a href="#5-5-函数的作用域和冲突" class="headerlink" title="5.5 函数的作用域和冲突"></a>5.5 函数的作用域和冲突</h4><ul><li>所有函数的最外层被称为全局作用域。在全局作用域内定义的值可以在任意地方访问。</li><li>示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Excerpt from my HTML --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;first.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;second.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>  greeting();<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// first.js</span><br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;Chris&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">greeting</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello &#x27;</span> + name + <span class="hljs-string">&#x27;: welcome to our company.&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// second.js</span><br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;Zaptec&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">greeting</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Our company is called &#x27;</span> + name + <span class="hljs-string">&#x27;.&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>上述示例中：</p><ul><li>html引入了两个js脚本first和second，二者内部定义了相同名称的变量和函数；<ul><li>（1）只能访问到 first.js 文件的<code>greeting()</code>函数（第二个文件被忽视了）；</li><li>（2）第二次尝试使用 <code>let</code> 关键字定义 <code>name</code> 变量导致了一个错误。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/JS_scope_01.png" alt="JS_scope函数作用域"></p></li></ul><h5 id="5-5-1-let、var和const"><a href="#5-5-1-let、var和const" class="headerlink" title="5.5.1 let、var和const"></a>5.5.1 let、var和const</h5><table><thead><tr><th></th><th>作用域</th><th>变量提升</th><th>重复定义</th></tr></thead><tbody><tr><td>let</td><td>块级，仅在定义的函数内可被访问</td><td>使用 let 声明的变量不会被提升，只有在变量声明后才能使用它</td><td>如果在同一个作用域内使用 let 定义相同的变量名，则会导致错误。</td></tr><tr><td>var</td><td>全局，在全局均可访问</td><td>var 声明的变量会在代码执行前被预处理，并在整个作用域可见</td><td>使用 var 声明的变量可以被多次定义，这将覆盖先前的定义。</td></tr><tr><td>const</td><td>也是块级，与let的区别在于：const修饰的变量是一个常量，不可更改；</td><td>与let一致</td><td>与let一致</td></tr></tbody></table><h3 id="六、事件"><a href="#六、事件" class="headerlink" title="六、事件"></a>六、事件</h3><ul><li><p>事件能为网页添加真实的交互能力。它可以捕捉浏览器操作并运行一些代码做为响应。</p></li><li><p>例如，单击函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- JS_01.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS_01.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是一个小帅比<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;../JS/JS_01.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//JS_01.js</span><br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;html&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;别点了！！！&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>1.将事件与元素绑定有许多方法。</p><ul><li>在这里选用了 html元素，然后调用了它的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener"><code>addEventListener()</code></a> 方法，将事件名称（<code>&#39;click&#39;</code>）以及其回调函数（当事件发生时，调用该函数）传入该函数中作为调用参数。</li><li>此处实现的效果为：每当鼠标点击html页面，都会弹出一个警告窗”别点了！！！”；</li></ul></li><li><p>2.传递给 <code>addEventListener()</code> 的函数被称为<em>匿名函数</em>，因为它没有名字。</p><ul><li>匿名函数还有另一种我们称之为<em>箭头函数</em>的写法，箭头函数使用 <code>() =&gt;</code> 代替 <code>function ()</code>，如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//JS_01.js</span><br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;html&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;别点了！！！&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h3 id="七、字符串函数"><a href="#七、字符串函数" class="headerlink" title="七、字符串函数"></a>七、字符串函数</h3><ul><li>常用的字符串函数如下：</li></ul><table><thead><tr><th>函数</th><th>描述</th><th>示例（<code>let browserType = &#39;mozilla&#39;; </code>  ）</th></tr></thead><tbody><tr><td>length</td><td>获取字符串的长度</td><td><code>browserType.length;</code></td></tr><tr><td>indexOf(‘子串’)</td><td>在字符串中查找子字符串并提取它,找不到该子字符串则返回-1；</td><td><code>browserType.indexOf(&#39;zilla&#39;);</code></td></tr><tr><td>slice(start, end)</td><td>已知字符串中的子字符串开始的位置，以及想要结束的字符时，<code>slice()</code>可以用来提取它。注意：范围是[start, end)区间；若只指定start，则返回的子字符串是下标从start开始的所有剩余字符。</td><td><code>browserType.slice(0,3);</code></td></tr><tr><td>toLowerCase()&#x2F;toUpperCase()</td><td>大小写转换</td><td><code>let radData = &#39;My NaMe Is MuD&#39;; </code> <code>radData.toLowerCase(); </code> <code>radData.toUpperCase();</code></td></tr><tr><td>Replace()</td><td>字符串替换</td><td><code>browserType.replace(&#39;moz&#39;,&#39;van&#39;);</code></td></tr></tbody></table><h3 id="八、数组"><a href="#八、数组" class="headerlink" title="八、数组"></a>八、数组</h3><ul><li>像列表一样的对象；</li></ul><h4 id="8-1-创建数组"><a href="#8-1-创建数组" class="headerlink" title="8.1 创建数组"></a>8.1 创建数组</h4><ul><li>数组由方括号构成，其中包含用逗号分隔的元素列表；</li><li>与Java等语言不同的是，数组中可以保存不同类型的元素；</li><li>通过下标对数组元素进行访问；</li><li>示例如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> sequence = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>];<span class="hljs-comment">//保存的都是number</span><br><span class="hljs-keyword">let</span> random = [<span class="hljs-string">&#x27;tree&#x27;</span>, <span class="hljs-number">795</span>, [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]];<span class="hljs-comment">//保存的有string，number，数组类型等；</span><br>random[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<span class="hljs-comment">//多维数组</span><br></code></pre></td></tr></table></figure><h4 id="8-2-常用函数"><a href="#8-2-常用函数" class="headerlink" title="8.2 常用函数"></a>8.2 常用函数</h4><ul><li>如下：<ul><li><code>let sequence = [1, 1, 2, 3, 5, 8, 13];</code></li><li><code>let myData = &#39;Manchester,London,Liverpool,Birmingham,Leeds,Carlisle&#39;;</code></li></ul></li></ul><table><thead><tr><th>函数</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>length</td><td>获取数组长度</td><td>sequence.length; &#x2F;&#x2F; should return 7</td></tr><tr><td>split(‘分隔符’)</td><td>以指定分隔符分隔字符串返回分割后的数组</td><td>let myArray &#x3D; myData.split(‘,’); &#x2F;&#x2F;得到的myArray是一个长度为6的数组;</td></tr><tr><td>join(‘待插入分隔符’)</td><td>以指定待插入分隔符连接数组中的元素形成字符串</td><td>let myString &#x3D; myArray.join(‘,’);&#x2F;&#x2F;得到以待插入分隔符分隔的字符串；</td></tr><tr><td>toString()</td><td>连接数组中的元素形成字符串</td><td>let myString &#x3D; myArray.toString()&#x2F;&#x2F;直接连接起来，没有分隔符</td></tr><tr><td>push()</td><td>添加一个或多个要添加到<strong>数组末尾</strong>的元素。</td><td><code>myArray.push(&#39;Cardiff&#39;);</code> <code>myArray.push(&#39;Bradford&#39;, &#39;Brighton&#39;);</code></td></tr><tr><td>pop()</td><td>从数组中删除<strong>最后</strong>一个元素</td><td><code>let removedItem = myArray.pop();</code></td></tr><tr><td>unshift()</td><td>添加一个或多个要添加到<strong>数组开头</strong>的元素。</td><td><code>myArray.unshift(&#39;Edinburgh&#39;);</code></td></tr><tr><td>shift()</td><td>从数组中删除<strong>开头的第一个元素</strong></td><td><code>let removedItem = myArray.shift();</code></td></tr></tbody></table><ul><li>split() 和 join()函数运行效果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/JS_split_join_01.png" alt="split() 和 join()函数运行效果"></p><ul><li>unshift() 和 shift() 运行效果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/JS_unshift_shift_01.png" alt="unshift() 和 shift() 运行效果"></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS-defer和async属性的作用</title>
    <link href="/2023/05/13/JS-defer%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <url>/2023/05/13/JS-defer%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="JS-defer和async属性的作用"><a href="#JS-defer和async属性的作用" class="headerlink" title="JS-defer和async属性的作用"></a>JS-defer和async属性的作用</h1><h2 id="引入：-lt-script-gt-lt-x2F-script-gt-标签"><a href="#引入：-lt-script-gt-lt-x2F-script-gt-标签" class="headerlink" title="引入：&lt;script&gt; &lt;&#x2F;script&gt; 标签"></a>引入：&lt;script&gt; &lt;&#x2F;script&gt; 标签</h2><ul><li>&lt;script&gt;标签可以放在HTML文档的任何位置，但是根据放置的位置不同，可能会对页面渲染和脚本执行产生影响。<ul><li><code>&lt;script&gt;</code>标签放在HTML文档的<code>&lt;head&gt;</code>部分中：脚本将在<strong>页面渲染之前加载并执行</strong>。这可能会<strong>导致页面加载速度变慢</strong>，因为浏览器必须等待脚本加载和执行完成才能继续渲染页面内容。</li><li><code>&lt;script&gt;</code>标签放在HTML文档的<code>&lt;body&gt;</code>部分的底部：脚本将在<strong>页面渲染完成后加载和执行</strong>。这将使<strong>页面更快地呈现</strong>给用户，并且不会阻止页面的渲染过程。</li></ul></li><li>在某些情况下，可能需要将脚本放在页面的特定位置，以便它们在渲染页面的同时加载和执行。在这种情况下，可以使用<strong>异步</strong>（async）或deferred（defer）属性来控制脚本的加载行为，以确保它们不会影响页面的渲染。</li></ul><h2 id="defer属性"><a href="#defer属性" class="headerlink" title="defer属性"></a>defer属性</h2><ul><li>将<code>defer</code>属性添加到<code>&lt;script&gt;</code>标记中时，它告诉浏览器要延迟加载该脚本，并且不会阻止页面的渲染。这意味着，在整个页面加载完成之后才会运行该脚本。</li><li>使用<code>defer</code>属性<strong>能够保证脚本之间的运行顺序 按照 引入脚本的顺序执行</strong>；</li><li>如下：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>first js<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./script/main.js&quot;</span> <span class="hljs-attr">defer</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <br>      <span class="hljs-comment">&lt;!-- &lt;script src=&quot;./script/main.js&quot; defer&gt; &lt;/script&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* main.js */</span><br><br><span class="hljs-keyword">let</span> myHeading = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;h1&#x27;</span>);<span class="hljs-comment">//获取页面中的第一个h1元素</span><br>myHeading.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;Hello world!&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>先渲染html页面，然后执行js脚本；</li></ul><h3 id="async属性"><a href="#async属性" class="headerlink" title="async属性"></a>async属性</h3><ul><li><p>将<code>async</code>属性添加到<code>&lt;script&gt;</code>标记中时，它告诉浏览器遇到<code>&lt;script&gt;</code>标签时不要中断html页面的加载；</p></li><li><p>当页面的各个脚本之间不存在依赖关系时，使用<code>async</code>属性是最理想的；</p></li><li><p><strong>异步执行各个脚本，各个脚本的执行顺序无法确定</strong>；</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins学习笔记-0509</title>
    <link href="/2023/05/11/Jenkins%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-0509/"/>
    <url>/2023/05/11/Jenkins%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-0509/</url>
    
    <content type="html"><![CDATA[<h1 id="Jenkins的概念、安装以及使用"><a href="#Jenkins的概念、安装以及使用" class="headerlink" title="Jenkins的概念、安装以及使用"></a>Jenkins的概念、安装以及使用</h1><h2 id="Jenkins-是什么"><a href="#Jenkins-是什么" class="headerlink" title="Jenkins 是什么?"></a>Jenkins 是什么?</h2><ul><li>Jenkins是一款开源 CI&amp;CD 软件，<strong>用于自动化各种任务，包括构建、测试和部署软件。</strong><ul><li>CI（Continuous Integration，持续集成）：指的是持续将开发人员的代码变更集成到共享代码库中，并通过自动化构建和测试过程，尽早地发现和解决代码集成问题。这样可以避免因为代码集成问题而延迟项目进度，保证代码质量和稳定性。</li><li>CD（Continuous Delivery&#x2F;Continuous Deployment，持续交付&#x2F;持续部署）：指的是通过自动化流程将经过CI的代码快速、可靠地交付给用户，实现软件开发过程中的快速迭代和持续交付。CD可以根据实际需求选择持续交付或持续部署，前者是将软件包交付给测试或用户进行手动部署，后者是自动将软件包部署到生产环境。</li></ul></li><li>Jenkins 支持各种运行方式，可通过系统包、Docker 或者 通过一个独立的 Java 程序.</li></ul><h2 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h2><ul><li><p>前置工作：安装JDK（仅支持JDK11和JDK17）</p></li><li><p>安装步骤：</p><ul><li><p><a href="http://mirrors.jenkins.io/war-stable/latest/jenkins.war">下载 Jenkins</a>.</p></li><li><p>打开终端进入到下载目录.</p></li><li><p>运行命令 <code>java -jar jenkins.war --httpPort=8080</code>.</p></li><li><p>打开浏览器进入链接 <code>http://localhost:8080</code>.</p></li><li><p>按照说明完成安装.</p></li></ul></li><li><p>安装完成：</p></li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/Jenkins%E5%AE%89%E8%A3%85_1.png" alt="Jenkins安装-1"></p><h2 id="创建您的第一个Pipeline"><a href="#创建您的第一个Pipeline" class="headerlink" title="创建您的第一个Pipeline"></a>创建您的第一个Pipeline</h2><h3 id="什么是-Jenkins-Pipeline"><a href="#什么是-Jenkins-Pipeline" class="headerlink" title="什么是 Jenkins Pipeline?"></a>什么是 Jenkins Pipeline?</h3><p>Jenkins Pipeline（或简称为 “Pipeline”）是一套插件，将持续交付的实现和实施集成到 Jenkins 中。</p><p>持续交付 Pipeline 自动化的表达了这样一种流程：将基于版本控制管理的软件持续的交付到您的用户和消费者手中。</p><h2 id="学习的大概思路"><a href="#学习的大概思路" class="headerlink" title="学习的大概思路"></a>学习的大概思路</h2><ul><li>阅读官方文档;</li><li>了解和熟悉代码仓库结构；</li><li>阅读核心代码：逐步深入理解Jenkins的实现原理和架构设计；</li></ul>]]></content>
    
    
    <categories>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jekins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins学习笔记-0510</title>
    <link href="/2023/05/11/Jenkins%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-0510/"/>
    <url>/2023/05/11/Jenkins%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-0510/</url>
    
    <content type="html"><![CDATA[<h1 id="Jenkins学习-流水线"><a href="#Jenkins学习-流水线" class="headerlink" title="Jenkins学习-流水线"></a>Jenkins学习-流水线</h1><h2 id="Jenkins流水线"><a href="#Jenkins流水线" class="headerlink" title="Jenkins流水线"></a>Jenkins流水线</h2><ul><li><p>官方文档：Jenkins 流水线是一套插件，它<strong>支持实现和集成持续交付流水线到 Jenkins</strong>。</p><ul><li>不是很明白</li></ul></li><li><p>gpt:一种基于Jenkins构建的持续集成和交付（CI&#x2F;CD）解决方案。它 允许 <strong>开发者</strong> 通过 <strong>定义一系列的步骤</strong> 来 <strong>自动化构建、测试、部署和监控应用程序</strong> 的流程。</p><ul><li>流水线是由一系列步骤组成的工作流程，这些步骤可以在Jenkins中以<strong>代码的形式</strong>进行定义和管理。</li><li>通过在Jenkins中创建流水线，开发者可以将构建、测试、部署和监控等任务自动化，从而提高应用程序的质量和可靠性，并缩短发布周期。</li></ul></li></ul><h2 id="创建和定义流水线"><a href="#创建和定义流水线" class="headerlink" title="创建和定义流水线"></a>创建和定义流水线</h2><p><strong>使用Jenkinsfile文件来定义流水线是Jenkins的最佳实践之一。</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Jenkinsfile文件是定义Jenkins流水线的本质。Jenkinsfile是一个Groovy脚本，它使用Jenkins </span>Pipeline DSL语言来定义和描述构建和交付流水线的各个阶段和步骤。<span class="hljs-keyword">Jenkins </span>Pipeline DSL提供了丰富的语法和指令，使得用户可以创建复杂的流水线，包括并行执行、条件分支、环境变量设置、测试和部署等功能。<br>同时，将<span class="hljs-keyword">Jenkinsfile文件存储在代码仓库中，可以将流水线代码与应用程序代码一起版本控制和管理，方便追踪历史记录、协作开发和实现CI/CD的自动化流程。因此，使用Jenkinsfile文件来定义流水线是Jenkins的最佳实践之一。</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>声明式</strong>和<strong>脚本式</strong>流水线都是 DSL(Domain-specific language 领域特定语言) 语言，用来描述软件交付流水线的一部分。</p><ul><li>二者都是Jenkins Pipeline的DSL语言，用于编写Jenkins流水线中的步骤和操作。</li><li>声明式：声明式流水线是一种更为简单和易于使用的语言，旨在为用户提供一种简单的方式来编写Jenkins流水线。声明式流水线提供了一组预定义的指令，可以让用户轻松地定义流水线的结构和逻辑。声明式流水线更加可读性强，易于理解，并支持自动代码生成和可视化编辑器等功能。</li><li>脚本式：脚本式流水线是更为灵活和强大的语言，旨在为有经验的用户提供更大的自由度和控制力。脚本式流水线允许用户使用Groovy语言来编写完全自定义的脚本，从而实现复杂的逻辑和自定义操作。脚本式流水线的优点是可扩展性强，用户可以通过编写自定义的Groovy脚本来实现特定的需求和功能。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">Groovy是一种面向对象的动态编程语言，基于Java平台，具有Java语言的特性和优势，同时还支持动态类型、函数式编程、闭包和元编程等特性。Groovy的语法与Java类似，可以与Java代码无缝集成，可以直接在Java虚拟机（JVM）上运行。<br></code></pre></td></tr></table></figure><h3 id="创建流水线的方式"><a href="#创建流水线的方式" class="headerlink" title="创建流水线的方式"></a>创建流水线的方式</h3><ul><li>通过 Blue Ocean创建<ul><li>在 Blue Ocean 中设置一个流水线项目后，Blue Ocean UI 会帮你编写流水线的 <code>Jenkinsfile</code> 文件并提交到源代码管理系统。</li></ul></li><li>通过经典UI创建<ul><li>通过经典 UI 在 Jenkins 中直接输入基本的流水线。</li></ul></li><li>在源码管理系统中定义</li></ul></li></ul><h2 id="Jenkinsfile文件"><a href="#Jenkinsfile文件" class="headerlink" title="Jenkinsfile文件"></a>Jenkinsfile文件</h2><ul><li>包含了 Jenkins 流水线的定义；</li><li>该文件被检入源代码控制仓库；</li><li>基本的三阶段持续交付流水线示例：</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs groovy">Jenkinsfile (Declarative Pipeline)<br>pipeline &#123;<br>    agent any<br><br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Build&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Building..&#x27;</span><br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Test&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Testing..&#x27;</span><br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Deploy&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Deploying....&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分析Jenkinsfile文件"><a href="#分析Jenkinsfile文件" class="headerlink" title="分析Jenkinsfile文件"></a>分析Jenkinsfile文件</h3><ul><li><p><code>agent指令</code>：这是必需的一个部分，指示 Jenkins 为流水线分配一个执行器和工作区；</p><ul><li>如果没有agent指令，<strong>声明式流水线</strong>不仅无效，它也不可能完成任何工作！</li><li>默认情况下，<code>agent</code> 指令确保源代码仓库被检出并在后续阶段的步骤中可被使用。</li></ul></li><li><p>一个合法的声明式流水线还需要<code>stages 指令</code>和<code>steps</code>指令，因为它们指示 <strong>Jenkins 要执行什么</strong>，<strong>在哪个阶段执行</strong>。</p></li></ul><h3 id="构建阶段"><a href="#构建阶段" class="headerlink" title="构建阶段"></a>构建阶段</h3><ul><li><p>对于许多项目来说，流水线“工作”的开始就是“构建”阶段。</p></li><li><p><code>Jenkinsfile</code> 文件<strong>不能</strong>替代现有的构建工具，如 GNU&#x2F;Make、Maven、Gradle 等，而应视其为一个将项目的开发生命周期的多个阶段（构建、测试、部署等）绑定在一起的粘合层。</p><ul><li>Jenkins 有许多插件<strong>可以用于调用几乎所有常用的构建工具</strong>；</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">//这个例子只是从 shell 步骤（sh）调用 make。</span><br><span class="hljs-comment">//sh 步骤假设系统是基于 Unix/Linux 的，对于基于 Windows 的系统可以使用 bat 替代。</span><br>Jenkinsfile (Declarative Pipeline)<br>pipeline &#123;<br>    agent any<br><br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Build&#x27;</span>) &#123;<br>            steps &#123;<br>                sh <span class="hljs-string">&#x27;make&#x27;</span> <br>                archiveArtifacts <span class="hljs-attr">artifacts:</span> <span class="hljs-string">&#x27;**/target/*.jar&#x27;</span>, <span class="hljs-attr">fingerprint:</span> <span class="hljs-literal">true</span> <br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>sh</code> 步骤调用 <code>make</code> 命令，只有命令<strong>返回的状态码为零时才会继续</strong>。任何非零的返回码都将使流水线失败。</p></li><li><p><code>archiveArtifacts</code> 捕获符合模式（<code>**/target/*.jar</code>）匹配的交付件并将其保存到 Jenkins master 节点以供后续获取。</p></li></ul></li></ul><h3 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h3><ul><li>运行自动化测试是任何成功的持续交付过程的重要组成部分；</li><li>Jenkins通过插件通提供了许多测试记录，报告和可视化工具；</li><li>最基本的，当测试失败时，让 Jenkins 记录这些失败以供汇报以及在 web UI 中可视化是很有用的。</li><li>在下面的例子中，使用JUnit插件提供的junit步骤：</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs groovy">Jenkinsfile (Declarative Pipeline)<br>pipeline &#123;<br>    agent any<br><br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Test&#x27;</span>) &#123;<br>            steps &#123;<br>                <span class="hljs-comment">/* `make check` 在测试失败后返回非零的退出码；</span><br><span class="hljs-comment">                * 使用 `true` 允许流水线继续进行</span><br><span class="hljs-comment">                */</span><br>                sh <span class="hljs-string">&#x27;make check || true&#x27;</span> <br>                junit <span class="hljs-string">&#x27;**/target/*.xml&#x27;</span> <br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用内联的 shell 条件（<code>sh &#39;make || true&#39;</code>）确保 <code>sh</code> 步骤总是看到退出码是零，使 <code>junit</code> 步骤有机会捕获和处理测试报告。</li><li><code>junit</code> 捕获并关联与包含模式（<code>\**/target/*.xml</code>）匹配的 JUnit XML 文件。</li></ul><h3 id="部署阶段"><a href="#部署阶段" class="headerlink" title="部署阶段"></a>部署阶段</h3><ul><li>部署可以隐含许多步骤，这取决于项目或组织的要求，并且可能是从发布构建的交付件到 Artifactory 服务器，到将代码推送到生产系统的任何东西。</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs groovy">Jenkinsfile (Declarative Pipeline)<br>pipeline &#123;<br>    agent any<br><br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Deploy&#x27;</span>) &#123;<br>            when &#123;<br>              expression &#123;<br>                currentBuild.result == <span class="hljs-literal">null</span> || currentBuild.result == <span class="hljs-string">&#x27;SUCCESS&#x27;</span> <br>              &#125;<br>            &#125;<br>            steps &#123;<br>                sh <span class="hljs-string">&#x27;make publish&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>流水线访问 <code>currentBuild.result</code> 变量确定是否有任何测试的失败。在这种情况下，值为<code>UNSTABLE</code>。</li><li>从本质上讲，“Deploy（部署）” 阶段只有在之前的阶段都成功完成后才会进行，否则流水线会提前退出。</li><li>假设在基本三阶段持续交付的示例中，Jenkins 流水线中所有的操作都执行成功，那么每次流水线的成功运行都会在 Jenkins 中存档相关的交付件、上面报告的测试结果以及所有控制台输出。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jekins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins学习笔记-0511</title>
    <link href="/2023/05/11/Jenkins%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-0511/"/>
    <url>/2023/05/11/Jenkins%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-0511/</url>
    
    <content type="html"><![CDATA[<h2 id="Jenkins在开发中所处的位置"><a href="#Jenkins在开发中所处的位置" class="headerlink" title="Jenkins在开发中所处的位置"></a>Jenkins在开发中所处的位置</h2><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/Jenkins_001.png"></p><ul><li><p><strong>开发人员</strong>：开发完成相应模块的功能后，通过maven、gradle等构建工具进行构建，并在本机通过Junit等单元测试工具进行测试，最后提交到远程Git仓库即可；</p></li><li><p><strong>管理员（leader）</strong>：拉取所有模块进行手动集成、构建、测试，最后部署在内网测试服务器上进行测试；</p></li></ul><p><strong>弊端</strong>：开发人员可能仅关注自身所负责模块功能的开发，导致管理员（leader）在集成过程中需要不断的解决冲突，合并等操作，比较繁琐；</p><p><strong>Jenkins的优势</strong>：定时自动化去拉取所有模块的代码，在Jenkins进行集成、构建、测试，（此处依赖于一些插件，如maven、gradle等），并将构建和测试结果通过邮件通知给负责人，如果测试通过，Jenkins还能够自动化发送都内网测试服务器以供后续测试；</p><h2 id="Jenkins源码结构"><a href="#Jenkins源码结构" class="headerlink" title="Jenkins源码结构"></a>Jenkins源码结构</h2><ol><li>根目录： Jenkins 源码的根目录包含一些构建脚本和重要的配置文件。</li><li>core 目录：包含了 Jenkins 的核心代码，例如服务器、插件、HTTP 接口等。</li><li>war 目录：包含了一个可执行的 Jenkins Web 应用程序。这个应用程序是由 Jenkins 核心代码和所有安装的插件组成的。</li><li>plugins 目录：包含了所有可用的 Jenkins 插件。每个插件都有自己的目录，其中包含了插件的代码和配置文件。</li><li>test 目录：包含了 Jenkins 的测试代码。这些测试代码包括单元测试、集成测试和端到端测试，确保 Jenkins 在各种环境下都能够正常工作。</li><li>website 目录：包含了 Jenkins 官方网站的源码。</li><li>documentation 目录：包含了 Jenkins 的文档</li></ol><h3 id="core目录"><a href="#core目录" class="headerlink" title="core目录"></a>core目录</h3><ul><li>包含了<strong>hudson包</strong>和<strong>jenkins包</strong>；<ul><li>hudson包：hudson 包中包含了许多 Jenkins 的核心组件和功能，例如<strong>构建</strong>、<strong>任务调度</strong>、<strong>权限管理</strong>、<strong>SCM （ Software Configuration Management）插件</strong>等。这些组件和功能大部分是由 Hudson 项目最初开发的，<strong>这些组件和功能是Jenkins的基础，</strong>因此在 Jenkins 中仍然沿用了这些命名空间。</li><li>jenkins包：jenkins 包中包含了 Jenkins 特定的组件和功能，例如 **Jenkins 的 API、插件框架、管理界面 **等。这些组件和功能是 Jenkins 项目自己开发的，因此在 Jenkins 中使用了 jenkins 命名空间。</li></ul></li></ul><h4 id="hudson"><a href="#hudson" class="headerlink" title="hudson"></a>hudson</h4><ul><li>由于hudson是Jenkins的基础，因此需要先学习hudson包的代码；</li><li>hudson包的代码结构如下：<ul><li><strong>hudson.model</strong>：包含了 Jenkins 核心模型，例如 Job、Build、User、View 等，这些模型负责表示 Jenkins 中的各种对象，并提供了一系列操作这些对象的 API。</li><li><strong>hudson.tasks</strong>：包含了 Jenkins 中常见的任务类型，例如 Shell、Ant、Maven、Batch 等，这些任务类型负责定义 Jenkins 中的任务，并提供了运行这些任务的 API。</li><li><strong>hudson.scm</strong>：包含了 Jenkins 支持的各种 SCM 工具，例如 Git、Subversion、CVS 等，这些 SCM 工具负责提供 Jenkins 和源代码库之间的交互接口，并提供了一系列操作源代码库的 API。</li><li><strong>hudson.security</strong>：包含了 Jenkins 中的安全模块，例如 ACL、AuthorizationStrategy、SecurityRealm 等，这些安全模块负责控制 Jenkins 中用户的访问权限，保证 Jenkins 系统的安全性。</li><li><strong>hudson.plugins</strong>：包含了 Jenkins 中的插件模块，这些插件负责扩展 Jenkins 的功能，例如 Cobertura、JUnit、Checkstyle 等，这些插件提供了一系列操作 Jenkins 的 API，以及对 Jenkins 的 UI 进行扩展和定制的能力。</li><li><strong>hudson.util</strong>：包含了 Jenkins 中的一些工具类和实用函数，例如 StringUtils、IOUtils、Functions 等，这些工具类和实用函数提供了一些常见的操作函数和工具方法，以便开发人员能够更方便地进行开发。</li><li>还有很多其他模块，后续在进行学习；</li></ul></li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jekins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7环境下安装MySQL8</title>
    <link href="/2023/05/11/CentOS7%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85MySQL8/"/>
    <url>/2023/05/11/CentOS7%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85MySQL8/</url>
    
    <content type="html"><![CDATA[<h1 id="CentOS7环境下安装MySQL8"><a href="#CentOS7环境下安装MySQL8" class="headerlink" title="CentOS7环境下安装MySQL8"></a>CentOS7环境下安装MySQL8</h1><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><ul><li>学校开了一门《高级数据库技术》，实验课作业就是在CentOS环境下搭建MySQL数据库服务器，然后在本地Windows下进行模拟远程连接MySQL数据库服务器，并模拟搭建主从复制，集群，高并发等一系列操作；</li><li>这一篇讲解最基础的CentOS环境下安装MySQL服务器；</li></ul><h2 id="CentOS7安装"><a href="#CentOS7安装" class="headerlink" title="CentOS7安装"></a>CentOS7安装</h2><ul><li><p>Windows环境：</p><ul><li>1.下载CentOS7的镜像文件，如果上官网下载会比较缓慢，建议上中科大镜像站或者类似的国内镜像站进行下载（<a href="https://mirrors.ustc.edu.cn/">USTC Open Source Software Mirror</a>）；</li><li>2.下载并安装VMware软件，这个软件也比较容易下载，不过多赘述；</li><li>3.安装CentOS7，条件允许则硬件资源给高一些，新手安装会出现各种问题，这个时候，一定记得多去网上寻求解决方案；</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/%E5%AE%89%E8%A3%85CentOS%207_3.png" alt="安装CentOS 7_3"></p><ul><li>注意：检查一下网络配置，桌面右键进入终端，输入<code>ping www.baidu.com</code>，回车，查看是否可以通；</li></ul></li><li><p>MacOS环境：</p><ul><li>MacOS的M系列芯片比较麻烦;</li><li>首先是安装虚拟机的软件，一个是VMware（个人使用，去官网注册一下即可），另一个是Parallels Desktop(收费，肯定这个比较好啦)；</li><li>其次，镜像的下载，我下载了官方、中科大镜像站、南京大学镜像站的CentOS7镜像，都无法正常使用，卡在了安装界面一直循环，选择安装，然后一闪，又让你选择。。。</li><li>唯一有一个大佬的定制镜像能用的，但是也有很多缺点，于是乎放弃在MacOS上安装了；</li></ul></li></ul><h2 id="安装MySQL数据库"><a href="#安装MySQL数据库" class="headerlink" title="安装MySQL数据库"></a>安装MySQL数据库</h2><h3 id="yum在线rpm-安装"><a href="#yum在线rpm-安装" class="headerlink" title="yum在线rpm 安装"></a>yum在线rpm 安装</h3><ul><li>命令如下</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>新建文件夹<br>mkdir /Software<br><span class="hljs-regexp">//</span>进入该文件夹<br>cd /Software<br><span class="hljs-regexp">//</span>切换从中科大的镜像站下载<br>wget http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/mysql-repo/my</span>sql80-community-release-el7-<span class="hljs-number">3</span>.noarch.rpm<br><span class="hljs-regexp">//</span>安装rpm<br>yum localinstall mysql80-community-release-el7-<span class="hljs-number">3</span>.noarch.rpm<br><span class="hljs-regexp">//</span>查看并确认需要安装的mysql组件<br>yum repolist enabled | grep <span class="hljs-string">&quot;mysql.*-community.*&quot;</span><br>yum repolist all | grep mysql<br><br>/*<br>使用如下命令改变要安装的软件：<br><span class="hljs-comment">#yum-config-manager --disable mysql57-community</span><br><span class="hljs-comment">#yum-config-manager --enable mysql80-community</span><br>确保 mysql80-community/x86_64 是 enabled，其它都 disabled 即可<br>*/<br><br><span class="hljs-regexp">//</span>安装mysql服务器<br>yum install mysql-community-server<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/RPM%E5%AE%89%E8%A3%85MySQL_1.png" alt="RPM安装MySQL_1"></p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/RPM%E5%AE%89%E8%A3%85MySQL_2.png" alt="RPM安装MySQL_2"></p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/RPM%E5%AE%89%E8%A3%85MySQL_3.png" alt="RPM安装MySQL_3"></p><h3 id="修改防火墙设置"><a href="#修改防火墙设置" class="headerlink" title="修改防火墙设置"></a>修改防火墙设置</h3><ul><li>因为需要从Windows模拟远程连接，因此需要修改防火墙，命令如下：</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>修改防火墙设置<br>firewall-cmd <span class="hljs-params">--zone=public</span> <span class="hljs-params">--permanent</span> <span class="hljs-params">--add-port=3306/tcp</span><br>firewall-cmd –<span class="hljs-keyword">reload</span><br></code></pre></td></tr></table></figure><h3 id="启动-MySQL-服务器"><a href="#启动-MySQL-服务器" class="headerlink" title="启动 MySQL 服务器"></a>启动 MySQL 服务器</h3><ul><li><p>启动前需要在<code>/etc/my.cnf  </code>文件配置好远程连接的端口，默认为3306；并且设置时区<code>default-time-zone=&#39;+8:00&#39;  </code>；</p></li><li><p>启动MySQL服务：</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>启动MySQL服务<br>systemctl start mysqld<br><span class="hljs-regexp">//</span>查看MySQL的状态<br>systemctl status mysqld<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/MySQL%E5%90%AF%E5%8A%A8_2.png" alt="MySQL启动_2"></p><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/MySQL%E5%90%AF%E5%8A%A8_1.png"></p><h2 id="远程连接MySQL服务器"><a href="#远程连接MySQL服务器" class="headerlink" title="远程连接MySQL服务器"></a>远程连接MySQL服务器</h2><h3 id="修改root用户的密码"><a href="#修改root用户的密码" class="headerlink" title="修改root用户的密码"></a>修改root用户的密码</h3><ul><li>命令如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 生成一个临时密码<br>grep &#x27;temporary password&#x27; /var/log/mysqld.log<br>-- 使用临时密码登录<br>mysql -uroot -p<br>-- 修改密码<br>ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27; abc123!Test&#x27;;<br></code></pre></td></tr></table></figure><h3 id="创建远程连接用户"><a href="#创建远程连接用户" class="headerlink" title="创建远程连接用户"></a>创建远程连接用户</h3><ul><li>命令如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建了一个名为 &#x27;whm&#x27;，允许从任何以 &quot;%&quot; 结尾的主机连接到 MySQL 的用户，并将密码设置为 &quot;Sea@123456&quot;<br>create user whm@&quot;%&quot; identified by &#x27;Sea@123456&#x27;;<br>-- 授予该用户所需的权限。<br>GRANT ALL privileges ON *.* TO &quot;ngq&quot;@&quot;%&quot;;<br>-- 运行以下命令使更改生效<br>FLUSH PRIVILEGES;<br>-- 可以在mysql系统内置数据库中查询到刚刚创建的用户<br>use mysql<br>select host, user from user;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/MySQL%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%94%A8%E6%88%B7whm_1.png" alt="MySQL创建远程连接用户whm_1"></p><h3 id="从远程连接到mysql服务器"><a href="#从远程连接到mysql服务器" class="headerlink" title="从远程连接到mysql服务器"></a>从远程连接到mysql服务器</h3><ul><li>在Navicat Premium中新建连接</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/MySQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B9%B6%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95_2.png" alt="MySQL远程连接并创建数据库表进行测试_2"></p><ul><li>创建一个数据库，建表进行查询测试</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/MySQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B9%B6%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95_1.png" alt="MySQL远程连接并创建数据库表进行测试_1"></p><ul><li>至此，结束。</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>高级数据库技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>高级数据库技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-多用户即时通信系统-用户登录(服务器端)</title>
    <link href="/2023/05/07/Java-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95(%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF)/"/>
    <url>/2023/05/07/Java-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95(%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF)/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-多用户即时通信系统-用户登录-服务器端"><a href="#Java-多用户即时通信系统-用户登录-服务器端" class="headerlink" title="Java-多用户即时通信系统-用户登录(服务器端)"></a>Java-多用户即时通信系统-用户登录(服务器端)</h1><ul><li>根据前面的需求分析，实现服务器端用户登录功能；</li></ul><h2 id="1-实体类（放在common包下）"><a href="#1-实体类（放在common包下）" class="headerlink" title="1 实体类（放在common包下）"></a>1 实体类（放在common包下）</h2><ul><li>也包括用户类（User）、消息类（Message）、消息类型接口（MessageType）</li></ul><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><ul><li>用户类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<span class="hljs-comment">//序列化ID，用来保证序列化和反序列化过程中，User类的一致性</span><br>    <span class="hljs-keyword">private</span> String userID;<span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> String password;<span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String userID, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userID = userID;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getuserID</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setuserID</span><span class="hljs-params">(String userID)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userID = userID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;userID=&#x27;&quot;</span> + userID + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h3><ul><li>消息类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<span class="hljs-comment">//序列化ID，用来保证序列化和反序列化过程中，User类的一致性</span><br>    <span class="hljs-keyword">private</span> String sender_ip;<span class="hljs-comment">//发送方ip</span><br>    <span class="hljs-keyword">private</span> String receiver_ip;<span class="hljs-comment">//接收方ip</span><br>    <span class="hljs-keyword">private</span> String send_data;<span class="hljs-comment">//发送内容</span><br>    <span class="hljs-keyword">private</span> String send_time;<span class="hljs-comment">//发送时间</span><br>    <span class="hljs-keyword">private</span> String message_type;<span class="hljs-comment">//消息类型（如：文本，图片，音频，视频等）</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(String sender_ip, String receiver_ip, String send_data, String send_time, String message_type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sender_ip = sender_ip;<br>        <span class="hljs-built_in">this</span>.receiver_ip = receiver_ip;<br>        <span class="hljs-built_in">this</span>.send_data = send_data;<br>        <span class="hljs-built_in">this</span>.send_time = send_time;<br>        <span class="hljs-built_in">this</span>.message_type = message_type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSender_ip</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sender_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSender_ip</span><span class="hljs-params">(String sender_ip)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sender_ip = sender_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getReceiver_ip</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> receiver_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReceiver_ip</span><span class="hljs-params">(String receiver_ip)</span> &#123;<br>        <span class="hljs-built_in">this</span>.receiver_ip = receiver_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSend_data</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> send_data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSend_data</span><span class="hljs-params">(String send_data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.send_data = send_data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSend_time</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> send_time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSend_time</span><span class="hljs-params">(String send_time)</span> &#123;<br>        <span class="hljs-built_in">this</span>.send_time = send_time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage_type</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message_type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage_type</span><span class="hljs-params">(String message_type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message_type = message_type;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Message&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;sender_ip=&#x27;&quot;</span> + sender_ip + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, receiver_ip=&#x27;&quot;</span> + receiver_ip + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, send_data=&#x27;&quot;</span> + send_data + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, send_time=&#x27;&quot;</span> + send_time + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, message_type=&#x27;&quot;</span> + message_type + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MessageType"><a href="#MessageType" class="headerlink" title="MessageType"></a>MessageType</h3><ul><li>消息类型接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/4 20:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MessageType</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_SUCCEED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>;<span class="hljs-comment">//表示登录成功</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_FAILED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0&quot;</span>;<span class="hljs-comment">//表示登录成功</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-功能类（放在service包下）"><a href="#2-功能类（放在service包下）" class="headerlink" title="2 功能类（放在service包下）"></a>2 功能类（放在service包下）</h2><h3 id="QQServer"><a href="#QQServer" class="headerlink" title="QQServer"></a>QQServer</h3><ul><li>QQ服务器端，监听9999端口；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * QQ服务器端，监听9999端口，等待客户端连接，客户端连接成功后，保持该连接的通信</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QQServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">QQServer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//端口可以写在配置文件中，方便后续修改</span><br>            serverSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>            System.out.println(<span class="hljs-string">&quot;监听9999端口，等待连接...&quot;</span>);<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">//有客户端连接则获取到Socket对象，否则阻塞</span><br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>                <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>                <span class="hljs-comment">//获取客户端发送的User对象</span><br>                <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) objectInputStream.readObject();<br>                <span class="hljs-comment">//回复该客户端，是否登录成功</span><br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>                <span class="hljs-comment">//这里需要连接数据库进行验证，但是目前没有增加数据库这一块，暂时先假设只有一个用户（100，123456）可以登录成功</span><br>                <span class="hljs-keyword">if</span> (user.getuserID().equals(<span class="hljs-string">&quot;100&quot;</span>) &amp;&amp; user.getPassword().equals(<span class="hljs-string">&quot;123456&quot;</span>)) &#123;<span class="hljs-comment">//登录成功</span><br>                    System.out.println(<span class="hljs-string">&quot;客户端&quot;</span> + user.getuserID() + <span class="hljs-string">&quot;登录成功！&quot;</span>);<br>                    <span class="hljs-comment">//返回登录成功message</span><br>                    message.setMessage_type(MessageType.MESSAGE_LOGIN_SUCCEED);<br>                    objectOutputStream.writeObject(message);<br><br><span class="hljs-comment">//                    socket.shutdownOutput();</span><br><br>                    <span class="hljs-comment">//登录成功，创建一个线程，用于保持该连接的通信</span><br>                    <span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">serverConnectClientThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerConnectClientThread</span>(socket, user.getuserID());<br>                    serverConnectClientThread.start();<br>                    <span class="hljs-comment">//加入集合方便管理</span><br>                    ServerConnectClientThreadManage.addserverConnectClientThread(user.getuserID(), serverConnectClientThread);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//登录失败</span><br>                    System.out.println(<span class="hljs-string">&quot;登录失败，取消连接&quot;</span>);<br>                    message.setMessage_type(MessageType.MESSAGE_LOGIN_FAILED);<br>                    objectOutputStream.writeObject(message);<br>                    socket.shutdownOutput();<br><br>                    objectOutputStream.close();<br>                    objectInputStream.close();<br>                    socket.close();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                serverSocket.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ServerConnectClientThread"><a href="#ServerConnectClientThread" class="headerlink" title="ServerConnectClientThread"></a>ServerConnectClientThread</h3><ul><li>用于保持服务器端与某一个客户端通信的线程类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5 20:48</span><br><span class="hljs-comment"> * 用于保持服务器端与某一个客户端通信的线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerConnectClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">private</span> String userID;<span class="hljs-comment">//与某个用户（客户端）通信</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerConnectClientThread</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerConnectClientThread</span><span class="hljs-params">(Socket socket, String userID)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>        <span class="hljs-built_in">this</span>.userID = userID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Socket <span class="hljs-title function_">getSocket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> socket;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSocket</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserID</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserID</span><span class="hljs-params">(String userID)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userID = userID;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//与客户端一样，服务器端也需要不断接收客户端发送的数据，并且还可以向客户端发送数据</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;与用户&quot;</span> + userID + <span class="hljs-string">&quot;保持连接，正在读取数据...&quot;</span>);<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-built_in">this</span>.socket.getInputStream());<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) objectInputStream.readObject();<br>                System.out.println(<span class="hljs-string">&quot; 处理客户端发送的消息： &quot;</span> +message.getSend_data());<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ServerConnectClientThreadManage"><a href="#ServerConnectClientThreadManage" class="headerlink" title="ServerConnectClientThreadManage"></a>ServerConnectClientThreadManage</h3><ul><li>管理ServerConnectClientThread线程的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5 20:59</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerConnectClientThreadManage</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HashMap&lt;String, ServerConnectClientThread&gt; serverConnectClientThreads = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerConnectClientThreadManage</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addserverConnectClientThread</span><span class="hljs-params">(String userID, ServerConnectClientThread serverConnectClientThread)</span>&#123;<br>        serverConnectClientThreads.put(userID, serverConnectClientThread);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ServerConnectClientThread <span class="hljs-title function_">getserverConnectClientThread</span><span class="hljs-params">(String userID)</span>&#123;<br>        <span class="hljs-keyword">return</span> serverConnectClientThreads.get(userID);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-框架类（放在frame包下）"><a href="#3-框架类（放在frame包下）" class="headerlink" title="3 框架类（放在frame包下）"></a>3 框架类（放在frame包下）</h2><h3 id="QQFrame"><a href="#QQFrame" class="headerlink" title="QQFrame"></a>QQFrame</h3><ul><li>服务器端启动框架；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5 21:22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QQFrame</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">QQServer</span> <span class="hljs-variable">qqServer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QQServer</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>多用户即时通信系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多用户即时通信系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-多用户即时通信系统-用户登录(客户端)</title>
    <link href="/2023/05/05/Java-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95(%E5%AE%A2%E6%88%B7%E7%AB%AF)/"/>
    <url>/2023/05/05/Java-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95(%E5%AE%A2%E6%88%B7%E7%AB%AF)/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-多用户即时通信系统-用户登录-客户端"><a href="#Java-多用户即时通信系统-用户登录-客户端" class="headerlink" title="Java-多用户即时通信系统-用户登录(客户端)"></a>Java-多用户即时通信系统-用户登录(客户端)</h1><ul><li>根据前面的需求分析，实现客户端用户登录功能；</li></ul><h2 id="1-实体类（放在common包下）"><a href="#1-实体类（放在common包下）" class="headerlink" title="1 实体类（放在common包下）"></a>1 实体类（放在common包下）</h2><ul><li>包括用户类（User）、消息类（Message）、消息类型接口（MessageType）</li></ul><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><ul><li>用户类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<span class="hljs-comment">//序列化ID，用来保证序列化和反序列化过程中，User类的一致性</span><br>    <span class="hljs-keyword">private</span> String userID;<span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> String password;<span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String userID, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userID = userID;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getuserID</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setuserID</span><span class="hljs-params">(String userID)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userID = userID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;userID=&#x27;&quot;</span> + userID + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h3><ul><li>消息类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<span class="hljs-comment">//序列化ID，用来保证序列化和反序列化过程中，User类的一致性</span><br>    <span class="hljs-keyword">private</span> String sender_ip;<span class="hljs-comment">//发送方ip</span><br>    <span class="hljs-keyword">private</span> String receiver_ip;<span class="hljs-comment">//接收方ip</span><br>    <span class="hljs-keyword">private</span> String send_data;<span class="hljs-comment">//发送内容</span><br>    <span class="hljs-keyword">private</span> String send_time;<span class="hljs-comment">//发送时间</span><br>    <span class="hljs-keyword">private</span> String message_type;<span class="hljs-comment">//消息类型（如：文本，图片，音频，视频等）</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(String sender_ip, String receiver_ip, String send_data, String send_time, String message_type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sender_ip = sender_ip;<br>        <span class="hljs-built_in">this</span>.receiver_ip = receiver_ip;<br>        <span class="hljs-built_in">this</span>.send_data = send_data;<br>        <span class="hljs-built_in">this</span>.send_time = send_time;<br>        <span class="hljs-built_in">this</span>.message_type = message_type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSender_ip</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sender_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSender_ip</span><span class="hljs-params">(String sender_ip)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sender_ip = sender_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getReceiver_ip</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> receiver_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReceiver_ip</span><span class="hljs-params">(String receiver_ip)</span> &#123;<br>        <span class="hljs-built_in">this</span>.receiver_ip = receiver_ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSend_data</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> send_data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSend_data</span><span class="hljs-params">(String send_data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.send_data = send_data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSend_time</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> send_time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSend_time</span><span class="hljs-params">(String send_time)</span> &#123;<br>        <span class="hljs-built_in">this</span>.send_time = send_time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage_type</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message_type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage_type</span><span class="hljs-params">(String message_type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message_type = message_type;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MessageType"><a href="#MessageType" class="headerlink" title="MessageType"></a>MessageType</h3><ul><li>消息类型接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/4 20:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MessageType</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_SUCCEED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>;<span class="hljs-comment">//表示登录成功</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_FAILED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>;<span class="hljs-comment">//表示登录成功</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-功能类（放在service包下）"><a href="#2-功能类（放在service包下）" class="headerlink" title="2 功能类（放在service包下）"></a>2 功能类（放在service包下）</h2><h3 id="UserClientService"><a href="#UserClientService" class="headerlink" title="UserClientService"></a>UserClientService</h3><ul><li>实现用户登录、注册等功能的类；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 该类完成用户登录验证，用户注册等功能</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserClientService</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<span class="hljs-comment">//User对象</span><br>    <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//Socket对象</span><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录验证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userID 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password 密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回登录验证结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkUser</span><span class="hljs-params">(String userID, String password)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><br>        user.setuserID(userID);<br>        user.setPassword(password);<br><br>        <span class="hljs-comment">//向服务器发送User对象，根据服务器返回的结果进行验证</span><br>        socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">9999</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>        <span class="hljs-comment">//发送user对象</span><br>        objectOutputStream.writeObject(user);<br><br>        <span class="hljs-comment">//socket.shutdownOutput();</span><br><br>        <span class="hljs-comment">//读取服务器端返回的验证结果</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>        <span class="hljs-comment">//读取返回的Message对象</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) objectInputStream.readObject();<br><br>        <span class="hljs-keyword">if</span>(message.getMessage_type().equals(MessageType.MESSAGE_LOGIN_SUCCEED)) &#123;<span class="hljs-comment">//登录成功</span><br>            <span class="hljs-comment">//登录成功，创建一个与服务器端保持通信的线程 -&gt; 创建一个线程类ClientConnectServerThread</span><br>            <span class="hljs-type">ClientConnectServerThread</span> <span class="hljs-variable">clientConnectServerThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientConnectServerThread</span>();<br>            <span class="hljs-comment">//启动客户端与服务器端通信的线程</span><br>            clientConnectServerThread.start();<br>            <span class="hljs-comment">//为了方便拓展，将该线程放在一个集合中进行管理</span><br>            <span class="hljs-comment">//【关于“拓展”】：比如，客户端在私聊另一个客户端的同时，还在与其他客户端发送文件，此时需要同时进行两个任务，使用多线程并发实现</span><br>            ClientConnectServerThreadManage.addClientConnectServerThread(userID, clientConnectServerThread);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//登录失败</span><br>            <span class="hljs-comment">//应该关闭打开的流 和 Socket对象</span><br>            objectInputStream.close();<br>            socket.close();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ClientConnectServerThread"><a href="#ClientConnectServerThread" class="headerlink" title="ClientConnectServerThread"></a>ClientConnectServerThread</h3><ul><li>客户端保持与服务器端通信的线程类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端保持与服务器端通信的线程</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientConnectServerThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-comment">//持有用于网络通信的Socket对象</span><br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientConnectServerThread</span><span class="hljs-params">()</span>&#123; &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientConnectServerThread</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Socket <span class="hljs-title function_">getSocket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> socket;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSocket</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//客户端需要在后台一直保持与服务器端通信，因此使用while循环；</span><br>        <span class="hljs-comment">//【因此这种阻塞式IO的方式，导致效率比较低！】</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-built_in">this</span>.getSocket().getInputStream());<br>                <span class="hljs-comment">//读取服务器端发送的数据，如果没有发送数据，则线程阻塞！</span><br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) objectInputStream.readObject();<br>                System.out.println(<span class="hljs-string">&quot; 处理服务器端发送的消息： &quot;</span> +message.getSend_data());<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ClientConnectServerThreadManage"><a href="#ClientConnectServerThreadManage" class="headerlink" title="ClientConnectServerThreadManage"></a>ClientConnectServerThreadManage</h3><ul><li>管理ClientConnectServerThread线程的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientConnectServerThreadManage</span> &#123;<br>    <span class="hljs-comment">//管理ClientConnectServerThread线程类的集合, 以userID为key；</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HashMap&lt;String, ClientConnectServerThread&gt; clientConnectServerThreads = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientConnectServerThreadManage</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">//向集合添加一个线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addClientConnectServerThread</span><span class="hljs-params">(String userID, ClientConnectServerThread clientConnectServerThread)</span>&#123;<br>        clientConnectServerThreads.put(userID, clientConnectServerThread);<br>    &#125;<br><br>    <span class="hljs-comment">//根据userID获取集合中的某个线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ClientConnectServerThread <span class="hljs-title function_">getClientConnectServerThread</span><span class="hljs-params">(String userID)</span>&#123;<br>        <span class="hljs-keyword">return</span> clientConnectServerThreads.get(userID);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-工具类（放在utils包下）"><a href="#3-工具类（放在utils包下）" class="headerlink" title="3 工具类（放在utils包下）"></a>3 工具类（放在utils包下）</h2><h3 id="Util-KeyBoardInput"><a href="#Util-KeyBoardInput" class="headerlink" title="Util_KeyBoardInput"></a>Util_KeyBoardInput</h3><ul><li>用于处理用户键盘输入的工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Util_KeyBoardInput</span> &#123;<br>    <span class="hljs-comment">//静态属性scanner</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取键盘输入的指定长度的字符串(不能为空串，limit &gt;= 1)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit 限定的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 指定长度的字符串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readString</span><span class="hljs-params">(<span class="hljs-type">int</span> limit)</span>&#123;<br>        <span class="hljs-keyword">return</span> readKeyBoard(limit, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能： 读取一个字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit 读取的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> blankReturn 如果为true ,表示 可以读空字符串。</span><br><span class="hljs-comment">     *   如果为false表示 不能读空字符串。</span><br><span class="hljs-comment">     *如果输入为空，或者输入大于limit的长度，就会提示重新输入。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readKeyBoard</span><span class="hljs-params">(<span class="hljs-type">int</span> limit, <span class="hljs-type">boolean</span> blankReturn)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span>(scanner.hasNextLine())&#123;<br>            line = scanner.nextLine();<br>            <span class="hljs-comment">//如果line.length=0, 即用户没有输入任何内容，直接回车</span><br>            <span class="hljs-keyword">if</span> (line.length() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (blankReturn) <span class="hljs-keyword">return</span> line;<span class="hljs-comment">//如果blankReturn=true,可以返回空串</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//如果blankReturn=false,不接受空串，必须输入内容</span><br>            &#125;<br><br>            <span class="hljs-comment">//如果用户输入的内容大于了 limit，就提示重写输入</span><br>            <span class="hljs-comment">//如果用户如的内容 &gt;0 &lt;= limit ,我就接受</span><br>            <span class="hljs-keyword">if</span> (line.length() &lt; <span class="hljs-number">1</span> || line.length() &gt; limit) &#123;<br>                System.out.print(<span class="hljs-string">&quot;输入长度（不能大于&quot;</span> + limit + <span class="hljs-string">&quot;）错误，请重新输入：&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> line;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-界面类（放在view包下）"><a href="#4-界面类（放在view包下）" class="headerlink" title="4 界面类（放在view包下）"></a>4 界面类（放在view包下）</h2><h3 id="QQClientView"><a href="#QQClientView" class="headerlink" title="QQClientView"></a>QQClientView</h3><ul><li>客户端界面类（目前没有前端，使用命令行输出的方式展示前端）；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QQClientView</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isLoop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//是否退出系统</span><br>    <span class="hljs-keyword">private</span> String userID, password;<span class="hljs-comment">//用户输入的登录信息</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">UserClientService</span> <span class="hljs-variable">userClientService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserClientService</span>();<span class="hljs-comment">//用于用户登录注册等功能的对象</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mainView</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        String selectItem;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span>(isLoop)&#123;<br>            System.out.println(<span class="hljs-string">&quot;=============== 欢迎登录网络通信系统 ===============&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 1 登录系统 \t\t&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 9 退出系统 \t\t&quot;</span>);<br>            System.out.print(<span class="hljs-string">&quot;请输入您的选择：&quot;</span>);<br>            selectItem = Util_KeyBoardInput.readString(<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">switch</span> (selectItem)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;请输入用户名: &quot;</span>);<br>                    userID = Util_KeyBoardInput.readString(<span class="hljs-number">50</span>);<br>                    System.out.print(<span class="hljs-string">&quot;请输入密  码：&quot;</span>);<br>                    password = Util_KeyBoardInput.readString(<span class="hljs-number">50</span>);<br>                    System.out.println(<span class="hljs-string">&quot;登录验证中......&quot;</span>);<br>                    <span class="hljs-keyword">if</span>(userClientService.checkUser(userID, password))&#123;<br>                        System.out.println(<span class="hljs-string">&quot;=============== 欢迎您（&quot;</span>+ userID +<span class="hljs-string">&quot;）登录网络通信系统 ===============&quot;</span>);<br>                        <span class="hljs-comment">//进入二级菜单</span><br>                        <span class="hljs-keyword">while</span>(isLoop)&#123;<br>                            System.out.println(<span class="hljs-string">&quot;=============== 欢迎您（&quot;</span>+ userID +<span class="hljs-string">&quot;），这里是网络通信系统二级菜单 ===============&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 1 显示在线用户列表 \t\t&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 2 群发消息 \t\t&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 3 私聊消息 \t\t&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 4 发送文件 \t\t&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t\t\t 9 退出系统 \t\t&quot;</span>);<br>                            System.out.print(<span class="hljs-string">&quot;请输入您的选择：&quot;</span>);<br>                            selectItem = Util_KeyBoardInput.readString(<span class="hljs-number">1</span>);<br>                            <span class="hljs-keyword">switch</span> (selectItem)&#123;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;正在显示在线用户列表......&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;群发消息中......&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;私聊消息中......&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;发送文件中......&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>                                    isLoop = <span class="hljs-literal">false</span>;<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">default</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;请输入正确的选项！&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        System.out.println(<span class="hljs-string">&quot;登录失败！请检查用户名和密码是否正确。&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>                    isLoop = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;请输入正确的选项！&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">QQClientView</span> <span class="hljs-variable">qqView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QQClientView</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            qqView.mainView();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>多用户即时通信系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多用户即时通信系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-多用户即时通信系统-需求分析</title>
    <link href="/2023/05/04/Java-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    <url>/2023/05/04/Java-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-多用户即时通信系统-需求分析"><a href="#Java-多用户即时通信系统-需求分析" class="headerlink" title="Java-多用户即时通信系统-需求分析"></a>Java-多用户即时通信系统-需求分析</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul><li>目前不考虑前端页面的绘制，仅结合<strong>集合</strong>、<strong>多线程</strong>、<strong>IO流</strong>以及<strong>网络编程</strong>相关知识实现核心的多用户通信，文件传输功能；</li><li>项目开发的一般流程：<ul><li>需求分析</li><li>设计阶段</li><li>实现阶段</li><li>测试阶段</li><li>实施和运维阶段</li></ul></li></ul><h3 id="1-1-客户端-服务器端通信整体架构分析"><a href="#1-1-客户端-服务器端通信整体架构分析" class="headerlink" title="1.1 客户端-服务器端通信整体架构分析"></a>1.1 客户端-服务器端通信整体架构分析</h3><ul><li>客户端-服务器端数据交互以<strong>对象形式</strong>进行（如Message、User等）；</li></ul><h4 id="1-1-1-单个客户端"><a href="#1-1-1-单个客户端" class="headerlink" title="1.1.1 单个客户端"></a>1.1.1 单个客户端</h4><ul><li>通过一对Socket对象通信；</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/Java-%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E9%80%9A%E4%BF%A1_1.png"></p><h4 id="1-1-2-多个客户端"><a href="#1-1-2-多个客户端" class="headerlink" title="1.1.2 多个客户端"></a>1.1.2 多个客户端</h4><ul><li>通过多对Socket对象进行通信；</li><li>多对Socket对象需要能够并发地占用CPU，因此对于客户端和服务器端的每一个Socket对象都创建一个<strong>线程</strong>；</li><li>服务器需要能够群发消息给每个客户端，因此需要采用<strong>集合</strong>来管理所有与客户端关联的线程；</li><li>一个客户端可能需要与服务器端建立多个线程（多条Socket通道），用于处理不同的任务，因此在客户端也需要采用<strong>集合</strong>来管理与服务器端关联的所有线程；</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/Java-%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E9%80%9A%E4%BF%A1_2.png"></p><h2 id="二、需求分析"><a href="#二、需求分析" class="headerlink" title="二、需求分析"></a>二、需求分析</h2><ul><li>用户登录</li><li>拉取在线用户</li><li>无异常退出*(不是简单的System.exit(0))*<ul><li>客户端</li><li>服务器端</li></ul></li><li>私聊</li><li>群聊</li><li>发文件</li><li>服务器推送新闻</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">写完私聊后，发现群聊，发文件，本质上也是发送数据，暂停了，不想写了。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>多用户即时通信系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多用户即时通信系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git-开发分支(develop)合并到主分支(master)</title>
    <link href="/2023/05/04/Git-%E5%BC%80%E5%8F%91%E5%88%86%E6%94%AF(develop)%E5%90%88%E5%B9%B6%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF(master)/"/>
    <url>/2023/05/04/Git-%E5%BC%80%E5%8F%91%E5%88%86%E6%94%AF(develop)%E5%90%88%E5%B9%B6%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF(master)/</url>
    
    <content type="html"><![CDATA[<h2 id="Git-开发分支-develop-合并到主分支-master"><a href="#Git-开发分支-develop-合并到主分支-master" class="headerlink" title="Git-开发分支(develop)合并到主分支(master)"></a>Git-开发分支(develop)合并到主分支(master)</h2><h2 id="一、场景"><a href="#一、场景" class="headerlink" title="一、场景"></a>一、场景</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">一个代码仓库，包含两个分支，一个是<span class="hljs-literal">master</span>，另一个是develop；<br>开发者一般在develop上进行开发，开发完成一个功能并测试稳定后，应将代码合并到<span class="hljs-literal">master</span>分支；<br></code></pre></td></tr></table></figure><h2 id="二、操作步骤"><a href="#二、操作步骤" class="headerlink" title="二、操作步骤"></a>二、操作步骤</h2><ol><li><p>确保您正在 master 分支中，可以使用以下命令切换到 master 分支：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git checkout <span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure></li><li><p>使用以下命令从 develop 分支中获取最新的更改：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> develop<br></code></pre></td></tr></table></figure><p>这将把 develop 分支中的更改合并到当前的 master 分支中。</p></li><li><p>如果合并过程中出现冲突，需要手动解决这些冲突。<strong>反之，如果没有冲突则直接到步骤5即可。</strong>Git 会在合并冲突时给出相应的提示，您可以使用以下命令查看有冲突的文件：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure><p>然后使用您喜欢的编辑器打开这些文件，手动解决冲突。</p></li><li><p>一旦冲突被解决，可以使用以下命令将更改提交到 master 分支中：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m &quot;Merge changes from develop branch&quot;<br></code></pre></td></tr></table></figure><p>这将把所有更改添加到提交中，并将其记录到 master 分支中。</p></li><li><p>最后，<strong>此时仅仅本地master分支合并了本地的develop分支</strong>，还需要将更改推送到远程仓库中，以确保其他开发人员可以访问它们：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure></li></ol><p>这样就完成了将 develop 分支中的更改合并到 master 分支的过程。</p><p>请注意，如果您在开发时使用了其他分支，请确保在将更改合并到 master 分支之前将这些更改合并到 develop 分支中。</p>]]></content>
    
    
    <categories>
      
      <category>Git操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-模拟客户端从服务器下载指定文件名的文件（有个挺坑的点！！）</title>
    <link href="/2023/05/02/Java-%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%90%8D%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%88%E6%9C%89%E4%B8%AA%E6%8C%BA%E5%9D%91%E7%9A%84%E7%82%B9%EF%BC%81%EF%BC%81%EF%BC%89/"/>
    <url>/2023/05/02/Java-%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%90%8D%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%88%E6%9C%89%E4%B8%AA%E6%8C%BA%E5%9D%91%E7%9A%84%E7%82%B9%EF%BC%81%EF%BC%81%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-模拟客户端从服务器下载指定文件名的文件（有个挺坑的点！！）"><a href="#Java-模拟客户端从服务器下载指定文件名的文件（有个挺坑的点！！）" class="headerlink" title="Java-模拟客户端从服务器下载指定文件名的文件（有个挺坑的点！！）"></a>Java-模拟客户端从服务器下载指定文件名的文件（有个挺坑的点！！）</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.编写服务器端和客户端；</span><br><span class="hljs-comment">2.客户端输入音乐文件名称，返回对应的音乐文件，若服务器不存在该音乐文件，则返回默认的音乐文件；</span><br><span class="hljs-comment">3.客户端收到文件后，保存到本地./hsp_ch21/Practices/music/目录下；     </span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="服务器端实现"><a href="#服务器端实现" class="headerlink" title="服务器端实现"></a>服务器端实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/2 16:08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">download_server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            1.编写服务器端和客户端；</span><br><span class="hljs-comment">            2.客户端输入音乐文件名称，返回对应的音乐文件，若服务器不存在该音乐文件，则返回默认的音乐文件；</span><br><span class="hljs-comment">            3.客户端收到文件后，保存到本地./hsp_ch21/Practices/music/目录下；</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//监听9999号端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;连接服务器...&quot;</span>);<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>        System.out.println(<span class="hljs-string">&quot;连接成功！&quot;</span>);<br><br>        <span class="hljs-comment">//接收客户端的消息，根据该消息返回相应的音乐文件</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">server_fileDirectoryPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch21/testfile/music&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">filedirectory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(server_fileDirectoryPath);<br>        <span class="hljs-keyword">if</span>(!filedirectory.exists())&#123;<br>            filedirectory.mkdirs();<br>        &#125;<br>        <span class="hljs-comment">//获取服务器的所有文件的名称（不包含父目录路径 和 文件后缀名）</span><br>        String[] server_fileList = filedirectory.list();<br>        <span class="hljs-keyword">for</span> (String s : server_fileList) &#123;<br>            System.out.println(s);<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">request_fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bufferedInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(socket.getInputStream());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span>((readLen = bufferedInputStream.read(buf)) != -<span class="hljs-number">1</span>)&#123;<br>            data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, readLen);<br>            request_fileName += data;<br>        &#125;<br><br>        socket.shutdownInput();<br><br>        <span class="hljs-comment">//查找该文件名称，若找到则发送该文件给客户端，否则默认发送第一个文件</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (String s : server_fileList) &#123;<br>            <span class="hljs-keyword">if</span>(request_fileName.equals(s))&#123;<br>                flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>)<br>            request_fileName = server_fileList[<span class="hljs-number">0</span>];<br><br>        System.out.println(<span class="hljs-string">&quot;【&quot;</span> + request_fileName + <span class="hljs-string">&quot;】&quot;</span>);<br><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">file_bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filedirectory + <span class="hljs-string">&quot;/&quot;</span> + request_fileName));<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bufferedOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(socket.getOutputStream());<br>        <span class="hljs-comment">//先发送当前文件名称+空格，空格是为了客户端用于区分文件名称和文件数据的</span><br>        bufferedOutputStream.write((request_fileName + <span class="hljs-string">&quot; &quot;</span>).getBytes());<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len_file</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] buf_file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span>((len_file = file_bis.read(buf_file)) != -<span class="hljs-number">1</span>)&#123;<br>            bufferedOutputStream.write(buf_file, <span class="hljs-number">0</span>, len_file);<br>        &#125;<br><br>        <span class="hljs-comment">//带缓冲区，一定记得手动刷新一下！！！</span><br>        bufferedOutputStream.flush();<br>        socket.shutdownOutput();<br><br>        file_bis.close();<br>        socket.close();<br>        serverSocket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/2 16:08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">download_client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), <span class="hljs-number">9999</span>);<br><br>        <span class="hljs-comment">//发送文件名，请求相应文件</span><br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bufferedOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(socket.getOutputStream());<br>        bufferedOutputStream.write(<span class="hljs-string">&quot;十年-陈奕迅.flac&quot;</span>.getBytes());<br><br>        <span class="hljs-comment">//带缓冲区，一定记得手动刷新一下！！！</span><br>        bufferedOutputStream.flush();<br>        socket.shutdownOutput();<br><br>        <span class="hljs-comment">//接收文件</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileDirectoryPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch21/Practices/music&quot;</span>;<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">fileDirectory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileDirectoryPath);<br>        <span class="hljs-keyword">if</span>(!fileDirectory.exists())&#123;<br>            fileDirectory.mkdirs();<br>        &#125;<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">file_bos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bufferedInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(socket.getInputStream());<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isFirst</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        String fileName;<br>        <span class="hljs-keyword">while</span>((readLen = bufferedInputStream.read(buf)) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(isFirst)&#123;<span class="hljs-comment">//第一次读取数据，包含了文件名称和部分文件数据，需要处理</span><br>                <span class="hljs-comment">//提取文件名</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, readLen);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">spaceIndex</span> <span class="hljs-operator">=</span> s.indexOf(<span class="hljs-string">&quot; &quot;</span>);<br>                fileName = s.substring(<span class="hljs-number">0</span>, spaceIndex);<br>                System.out.println(<span class="hljs-string">&quot;收到文件：&quot;</span> + fileName);<br>                isFirst = <span class="hljs-literal">false</span>;<br>                file_bos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(fileDirectory + <span class="hljs-string">&quot;/&quot;</span> + fileName));<br><br>                <span class="hljs-comment">//将剩余部分写入文件===此处巨坑！！！</span><br>                <span class="hljs-comment">//千万不能直接将上述byte数组转换来字符串进行拆分，因为会涉及字符编码问题。</span><br>                <span class="hljs-comment">// 《《应该直接将原来的byte数组进行拆分！！！！》》</span><br>                file_bos.write(buf,spaceIndex + <span class="hljs-number">1</span>, readLen-spaceIndex -<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                file_bos.write(buf, <span class="hljs-number">0</span>, readLen);<br>        &#125;<br><br>        socket.shutdownInput();<br><br>        file_bos.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="坑！！"><a href="#坑！！" class="headerlink" title="坑！！"></a>坑！！</h2><ul><li><p>坑在客户端第一次接收服务器端返回的数据时：</p><ul><li>由于第一次返回的数据中，包含了文件名称和部分文件数据，需要进行处理；</li><li>分别处理文件名和部分文件数据；<ul><li>提取文件名：通过将第一次读取到的1024个字节的字节数组转为字符串，然后通过第一个空格拆出文件名即可（服务器端设定的规则）；</li><li>提取剩余部分的文件数据，并写入文件：<ul><li>千万不能直接将上述byte数组转换来字符串进行拆分，因为会涉及字符编码问题。</li><li><strong>《应该直接将原来的byte数组进行拆分！！！！》</strong></li></ul></li></ul></li></ul></li><li><p>记录一下坑，因为这个坑，同学喊我打球都没有去！！</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SEA-365/imgList@main/imgList/Java-%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%B8%8B%E8%BD%BD%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%90%8D%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%88%E5%9D%91%EF%BC%81%EF%BC%81%EF%BC%89.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录-20230502</title>
    <link href="/2023/05/02/%E8%AE%B0%E5%BD%95-20230502/"/>
    <url>/2023/05/02/%E8%AE%B0%E5%BD%95-20230502/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="eca78165953d8ac3efd5419f2a1233ea39f51666bd184354fc365c6924d54e5b">7ccdbd9a8d189922813fab3f8512bc1ba07a1c23a49e2159bc35f6bdbc2c1d23aaa169d060a3df37d5afc9aca705b1290e47ab1a53c80ddd6a1671f2fb9dc5166b92773f37d21b7be32112713415dee3edb784f5bf9b4f3a2e6fea43f09244e3fb7883e4cdf8db9030f868a2d00bb869d6c159c141cd01dbd37be9341a7f617a85bf399990fbb2f482b3fa1b91d006e6e1ee722f605cebb69dfe293ee90d7f04fc42276f9c2741961498dfc533d0ec124515481de537696c1ea74affd76d6919a5fdeb451987d5f44b6583b50b2b89071f31907b1f1cd99176f93735443d8bd84e9c4f2ad04abc5b020dfe5c78a8e54ebbfd74048f0adedf51c78855a06f9a4e7e6627d377e45d61499772f9560fafcb906aa4295cc824f873d89cc2e767be8f3ac1ab308d76e32f6b1f38192cb56a6def2da73e7d46779e0a5697d69808fd3cfd888e4756837f206f54dec56c4bd700421184bad5e38d7b990922bdb3afef3a527116d7fcbf9c8193ec283e7a6386b7df8854d1da8e32e2b0c8ae6a9cb560c0c61cf00cf5df082157a75dfdbcfecb53be223226fc869dc9f884f66e7b108f8c3777764fbf98cc0286fec819d6d7ff8325efcb478923a10547239fd955d089c0af5ca9d57f31a2bdc95036665495b822a6da5ce837e68004e7d73bd909f33eee7ef14ce82b5a0e731fa4f28a13a44c779ed3f8bb7b8d3cef6c3ef4ac32dda7812aefe9546ca116bf649b8384114e3f4f18adfd8b33928065ad3de0ea2997f3478fea33939647afdb2060158e0e92b8b04935548c8be833d8aaa2ce82f732e77e937caba5f6aba43ccea729d2042e199f6684e8d56b24e781760909e00d830f5ba9e20870af2442f7dd1e4a4f1d23622ea73838aa7cd07db0818294aaddd217f9b85f9ccbef26a3563be6ec37d8daf11fd92afc84739ef6a2ffd81de9ea95824e092af6212517a7ad3066cfd6ce0f9bd460edd91a340faea7549af62f1c20931a5b974c8c874e179a317c1283a9fbf470368a6627755f98b4a7b5b1a679a3a86505a2ea06e7c90ef652c85f44cda599bcd4457bd3328d0c3c51975b8999e864a8fb8261001ccd2a9f7b20fdeddad0dc72a7eb0ce0c0d16d87b5f6905d308370eaebdac7c364cdace8a578ee6b93cb59d98db08206569189e177011b9228b712159c0275d8767af77601b2269ed1daa2df164e2d6740f85bf0ac3ec0c59e82e41e979ea8f68cb8e6797170cee50049d489f6f14e5cb51c40a49b0c34208657d96670e7c40928e674139f4402325e3c2d5ac08192068cbcc526f47d2dc8b00da4e7420ce3df90580f57cb39ee50c085aa462bcd5b2b442634625211b9f4202c8cd8a4b997523c4ab608a3064b1f80ca795cca3d1c46624e00931faffd05dc29fbf9e23ea275a46adffb6eba257c7d95f9a33719f1a91f88005566deae1760157f12b839b98505135fdd9704ae775f4be5bce9e6a8e004f61168a2121753e65f909e715b99d97e1f2259221b5955c6db46b1f31f23ad248f092da3647353a1e864779bc1cbe9cf30ccf04a6bec42fec9b99cc18850ddb280fabfd07bf54edfaf48ad48a51eb5592bb23cabc5b1ba8395acf6c3b9a9397b9975fab5783c9b65a7d446215a3ba52362710c7c86c9b65de739fa3a5fecfacdb3af52b595e5d2b6edfb18fa1d35b3bc2ca13bc4a6a5188e8a8bba8b77adb31f0378a557a48dbee2b0ecdd5c67d903db34f121c7c7e0cef5d48da95d37ce67deb15ded2593b2de50ff595dd0df675ab4f33fa548527bbb6593b901756f1408c176393bea9e7bb7ca129b5d9af28bd0ff98d37d6e895f8d88162a70cb6bd6d9907b489895590796ec2dbb249d99267268a48015d66668c7039078a1b7e435d258af2762b6e00c65f3a5d67128e893f04bd36ce82f063f59af508f5c54ead4a4116e673681bdf8ec0e1461adc44660172f692b11fbaad85f0662ff6ced55372a92838e6f0ec95d7b8c678ea716d968bcfd684318c0ac91869fe4caa03c73d70dd74af6fbd6b0b1622fb847d27db893b01806efb5bac62d1337e109ee1048f9e941777bec8a6d607c3feeeb6efde0d197d8761f412a658cc9c3759b29900ee66896bc3f5df6d9186db96d0abe4062153df3cee032c4e8b3c861730c9f000939d3a3849cc55039ec7b326ffe329ec126339ed040d610213f66c0675dfcc463147bf97895489ef37832e35633ea66aa55d122a63e904656c084e23aa91dcf76a16c943d90cb05dda99439c9810396f23fb9908dafa4ae2ba2bf871f9d6bd808390242f076897b7e3b9f17d3e94dddee94966b9c176ac0f9a61489c1630e74b34671f07ecc75480e22a546219fd3b03e8726ee85beea77b49f869a0175f8be9d98573115d141cccf584922032374a4bb1368bcc4f2ff5e91766dda6f4bf0cf4fcdc16243a9c0ff86ff6788576a151320e7c9634e6ffb61567627d0a6b43777944a4379507073260b3095d63c8d287da3ccbcb8597644a04739bc8b8cebf73cc96f801e0a5f37091bacc154756a811a3de6e528e03e94208411e1e826374fb5eddbfe46e2458ddd1f289771572a7367c02b88a70382812656231dcfae817999cba430e7f095ca909f638cd13ea24f37dbdbe7b2d90d00524789a7858cb21aaec4d45e0c63575ed61a636c183099f1315013b8c8968aedd5d7beed6269647e62f2d240101e067561a04bb354f40717f071f68332ff82adecfa71aebab6c6238eba9f72e72083166cae3c8a1dcde97659a7903800312627510e695ab9afd1feddadf42c35e805b1baed6c3fd100c29880f87467f13feb4b82c1a96c4d382e0a1967de3ebffdd69286b9cf94ee22e5ed6f4fbd7dc0b6d61994d6d43450acab824113f528b74b23a6eaa921c46c882836e9932ddb83a642fd533de99eff92afbf19c14ec1e2104657f063885f6d15a923632ee506f4d8f2117589ada4c31b53e858a6f13f3a625758752c1ea05d367babc5b4a5121318a49a9fbeae502ad2a14d4e7faf8da7fb9749e5206882eb775d480cd4c2aedb310efc8b96693669da43535dc77918c26e52e87878a78f5efd1f1a7006b98f837c77e7e3b2479756e4ccbe7a8f9204f611ca3c112d961ddc74f4ca</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章已加密，请输入密码阅读！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>学习路上的一些记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-网络编程知识整理（整理完毕）</title>
    <link href="/2023/04/27/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <url>/2023/04/27/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-网络编程知识整理"><a href="#Java-网络编程知识整理" class="headerlink" title="Java-网络编程知识整理"></a>Java-网络编程知识整理</h1><ul><li>韩老师介绍的网络相关概念在408里面都学过了，且韩老师的课讲的内容比较基础。</li><li>因此，仅记录新的知识点；</li></ul><h2 id="一、-API介绍"><a href="#一、-API介绍" class="headerlink" title="一、 API介绍"></a>一、 API介绍</h2><h3 id="1-1-InetAddress类"><a href="#1-1-InetAddress类" class="headerlink" title="1.1 InetAddress类"></a>1.1 InetAddress类</h3><ul><li>InetAddress类用于表示Internet协议（IP）地址。</li><li>使用时需要引入java.net包，InetAddress类提供了一组静态方法来获取本地主机的IP地址和主机名，以及解析指定主机名的IP地址。<ul><li><code>getLocalHost()</code>：返回此计算机的本地主机。</li><li><code>getByName(String host)</code>：根据主机名或IP地址字符串返回InetAddress对象。</li><li><code>getHostAddress()</code>：返回该InetAddress对象的IP地址字符串。</li><li><code>getHostName()</code>：返回该InetAddress对象的主机名字符串。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/27 21:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NetworkProgram_InetAddress01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * InetAddress类的使用</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//获取本机的InetAddress 对象</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">localhost</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost();<br>        <span class="hljs-comment">//输出本地主机名称和ip</span><br>        System.out.println(localhost);<span class="hljs-comment">//sea-365deMacBook-Pro.local/172.28.106.180</span><br><br>        <span class="hljs-comment">//根据指定主机名获取对象</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">host_1</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;sea-365deMacBook-Pro.local&quot;</span>);<br>        System.out.println(host_1);<br><br>        <span class="hljs-comment">//根据域名获取InetAddress对象，比如 www.baidu.com</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">host_2</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;www.baidu.com&quot;</span>);<br>        System.out.println(host_2);<span class="hljs-comment">//www.baidu.com/220.181.38.150</span><br><br>        <span class="hljs-comment">//通过InetAddress对象获取对应的地址</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hostaddress_1</span> <span class="hljs-operator">=</span> host_1.getHostAddress();<br>        System.out.println(hostaddress_1);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hostaddress_2</span> <span class="hljs-operator">=</span> host_2.getHostAddress();<br>        System.out.println(hostaddress_2);<br><br>        <span class="hljs-comment">//通过InetAddress对象获取主机名(域名)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hostname_1</span> <span class="hljs-operator">=</span> host_1.getHostName();<br>        System.out.println(hostname_1);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hostname_2</span> <span class="hljs-operator">=</span> host_2.getHostName();<br>        System.out.println(hostname_2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-Socket-套接字"><a href="#1-2-Socket-套接字" class="headerlink" title="1.2 Socket-套接字"></a>1.2 Socket-套接字</h3><ul><li>用于在不同计算机之间建立一个连接的<strong>一种网络通信机制</strong>；</li><li>允许客户端和服务器之间通过网络发送和接收数据；<ul><li>Socket是两台机器间通信的端点，因此两端都要有Socket；</li><li>本质上是两台机器间的数据传输，因此涉及大量<strong>输入流输出流</strong>的概念；</li></ul></li><li>使用时需要引入java.net包；</li></ul><h3 id="1-3-ServerSocket-服务器套接字"><a href="#1-3-ServerSocket-服务器套接字" class="headerlink" title="1.3 ServerSocket-服务器套接字"></a>1.3 ServerSocket-服务器套接字</h3><ul><li>这个类实现了服务器套接字。 </li><li>服务器套接字等待通过网络进入的请求。</li><li>它根据该请求执行一些操作，然后可能将结果返回给请求者。</li></ul><h2 id="二、TCP网络通信编程"><a href="#二、TCP网络通信编程" class="headerlink" title="二、TCP网络通信编程"></a>二、TCP网络通信编程</h2><h3 id="2-1-案例一：客户端-服务器端通信"><a href="#2-1-案例一：客户端-服务器端通信" class="headerlink" title="2.1 案例一：客户端-服务器端通信"></a>2.1 案例一：客户端-服务器端通信</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">使用字节流（或使用转换流将字节流转换为字符流）实现：<br>1.编写一个服务器端和一个客户端；<br>2.服务器端监听9999端口；<br>3.客户端连接到服务器端；<br>4.服务器端接收到客户端发送的信息后，输出并给服务器端一个反馈消息；<br></code></pre></td></tr></table></figure><ul><li>由于服务器端和客户端在同一台电脑上，Socket中的ip是一样的，均为本机；</li></ul><h4 id="2-1-2-服务器端实现"><a href="#2-1-2-服务器端实现" class="headerlink" title="2.1.2 服务器端实现"></a>2.1.2 服务器端实现</h4><ul><li>分成两个部分：<ul><li>1.监听客户端数据：<ul><li>监听9999端口，此处<strong>要求9999端口没有被占用</strong>，否则会报错；</li><li>接收到客户端连接，继续执行，否则阻塞，连接成功后，通过Socket获取数据通道的输入流；</li><li>在控制台输出接受到的数据；</li><li>插入<strong>输入流结束标志</strong>；</li></ul></li><li>2.向客户端发送数据：<ul><li>连接客户端Socket(客户端ip, 客户端正在监听的端口号)；</li><li>连接成功后，通过Socket获取输出流；</li><li>发送数据给客户端；</li><li>插入<strong>输出流结束标志</strong>；</li><li>关闭 流 和 Socket；</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/28 14:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NetworkProgram_Socket_TCP01Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//1.监听客户端数据</span><br><br>        <span class="hljs-comment">//监听9999端口，此处要求9999端口没有被占用，否则会报错</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br><br>        <span class="hljs-comment">//如果有客户端连接，则会返回Socket对象，程序继续</span><br>        <span class="hljs-comment">//如果没有客户端连接，则程序会阻塞，等待连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>        <span class="hljs-comment">//接收到客户端连接，继续执行，通过Socket获取输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br><br>        <span class="hljs-comment">//在控制台输出接受到的数据</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        System.out.println(System.currentTimeMillis());<br>        System.out.print(<span class="hljs-string">&quot;服务端接收到的：&quot;</span>);<br>        <span class="hljs-keyword">while</span>((readLen = is.read(buf)) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, readLen));<br>        &#125;<br><br>        <span class="hljs-comment">//插入输入流结束标志</span><br>        socket.shutdownInput();<br><br>        <span class="hljs-comment">//2.向客户端发送数据</span><br>        <span class="hljs-comment">//收到客户端数据后，告诉客户端已经收到</span><br><br>        <span class="hljs-comment">//通过Socket获取输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><br>        <span class="hljs-comment">//发送数据给客户端</span><br>        outputStream.write(<span class="hljs-string">&quot;我是来自服务器的消息，我收到了你发送的数据&quot;</span>.getBytes());<br><br>        <span class="hljs-comment">//插入输出流结束标志</span><br>        socket.shutdownOutput();<br><br>        <span class="hljs-comment">//关闭 流 和 Socket</span><br>        outputStream.close();<br>        is.close();<br>        socket.close();<br>        serverSocket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-2-客户端实现"><a href="#2-1-2-客户端实现" class="headerlink" title="2.1.2 客户端实现"></a>2.1.2 客户端实现</h4><ul><li>分成两个部分：<ul><li>1.向服务器端发送数据：<ul><li>连接客户端Socket(服务器端ip, 服务器端正在监听的端口号)；</li><li>连接成功后，通过Socket获取数据通道的输出流；</li><li>发送数据给服务器端；</li><li>插入输出流结束标志；</li></ul></li><li>2.监听服务器端数据：<ul><li>通过Socket获取数据通道的输入流；</li><li>在控制台输出接受到的数据；</li><li>关闭 流 和 Socket；</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/28 14:45</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NetworkProgram_Socket_TCP01Client_1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//1.给服务端发送数据</span><br><br>        <span class="hljs-comment">//连接服务器，通过Socket(ip, 端口)</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), <span class="hljs-number">9999</span>);<br><br>        <span class="hljs-comment">//连接上后，生成Socket，就可以获取向数据通道放数据的字节输出流；</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><br>        <span class="hljs-comment">//写入数据（发送数据给服务器端）</span><br>        outputStream.write(<span class="hljs-string">&quot;我是客户端1发出的数据&quot;</span>.getBytes());<br><br>        <span class="hljs-comment">//插入输出流结束标志</span><br>        socket.shutdownOutput();<br><br>        <span class="hljs-comment">//2.监听服务器端数据</span><br>      <br>        <span class="hljs-comment">//通过Socket获取输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br><br>        <span class="hljs-comment">//输出来自服务器端返回的数据</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        System.out.println(System.currentTimeMillis());<br>        System.out.print(<span class="hljs-string">&quot;客户端1接收到的：&quot;</span>);<br>        <span class="hljs-keyword">while</span>((readLen = is.read(buf)) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, readLen));<br>        &#125;<br><br>        <span class="hljs-comment">//插入输入流结束标志</span><br>        socket.shutdownInput();<br><br>        <span class="hljs-comment">//关闭Socket</span><br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意：<ul><li>流的结束标志：<ul><li>1.shutdownInput&#x2F;shutdownOutput方法；</li><li>2.通过转换流和包装流将字节流转换为带缓冲的包装流，使用如BufferedWriter.newLine()方法作为结束标志，相应的在读取时使用BufferedReader.readLine()进行读取数据；</li></ul></li><li>使用了带缓冲区的流进行数据传输时，写入数据需要<strong>使用flush()方法进行手动刷新</strong>，否则可能缓冲区没有满，数据暂时不会被写入；</li></ul></li></ul><h3 id="2-2-案例二：网络上传文件"><a href="#2-2-案例二：网络上传文件" class="headerlink" title="2.2 案例二：网络上传文件"></a>2.2 案例二：网络上传文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">需求：<br><span class="hljs-number">1</span>.编写一个服务器端和一个客户端；<br><span class="hljs-number">2</span>.服务器端在<span class="hljs-number">9999</span>号端口进行监听；<br><span class="hljs-number">3</span>.客户端连接到服务器端，发送一张图片(.<span class="hljs-regexp">/hsp_ch21/</span>testfile/bfu01.jpg)给客户端；<br><span class="hljs-number">4</span>.服务器端接收到客户端发送的 “图片” 文件，保存到.<span class="hljs-regexp">/hsp_ch21/</span>testfile/img目录下，并给客户端发送 “收到图片” 消息 再退出；<br><span class="hljs-number">5</span>.客户端接收到服务器端发送的 “收到图片”消息 再退出；<br></code></pre></td></tr></table></figure><ul><li>分析：由于发送的是图片文件（二进制文件），因此采用高效的BufferedOutputStream&#x2F;BufferedInputStream进行文件传输；</li><li>实现原理与案例一差不多，不展开了，直接上代码；</li></ul><h4 id="2-2-1-服务端实现"><a href="#2-2-1-服务端实现" class="headerlink" title="2.2.1 服务端实现"></a>2.2.1 服务端实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/1 19:59</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NetworkProgram_Socket_TCP03Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//监听9999号端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br><br>        <span class="hljs-comment">//通过accept()方法获取连接到服务器的Socket对象</span><br>        System.out.println(<span class="hljs-string">&quot;连接服务器...&quot;</span>);<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>        System.out.println(<span class="hljs-string">&quot;连接成功！&quot;</span>);<br><br>        <span class="hljs-comment">//获取输入流</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bufferedInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(socket.getInputStream());<br><br>        <span class="hljs-comment">//从socket关联的数据通道中读取数据，并写入至指定文件</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath_received</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch21/testfile/img&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file_direactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath_received);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath_received + <span class="hljs-string">&quot;/received.jpg&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!file_direactory.exists())<span class="hljs-comment">//目录不存在则创建目录</span><br>            file_direactory.mkdirs();<br>        <span class="hljs-keyword">if</span>(!file.exists())<span class="hljs-comment">//文件不存在则创建文件</span><br>            file.createNewFile();<br><br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">file_bo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file));<br><br>        <span class="hljs-comment">//从数据通道读取数据</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4485120</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>((readLen = bufferedInputStream.read(buf)) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//写入指定文件</span><br>            file_bo.write(buf, <span class="hljs-number">0</span>, readLen);<br>        &#125;<br>        <span class="hljs-comment">//关闭文件流</span><br>        file_bo.close();<br><br>        <span class="hljs-comment">//插入输入流关闭标志</span><br>        socket.shutdownInput();<br><br>        <span class="hljs-comment">//向客户端返回&quot;收到图片&quot;消息</span><br><br>        <span class="hljs-comment">//获取输出流</span><br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(socket.getOutputStream());<br>        <span class="hljs-comment">//写入数据</span><br>        outputStream.write(<span class="hljs-string">&quot;收到图片！&quot;</span>.getBytes());<br><br>        <span class="hljs-comment">//插入输出流关闭标志</span><br>        socket.shutdownOutput();<br><br>        <span class="hljs-comment">//关闭流和Socket对象</span><br>        socket.close();<br>        serverSocket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-2-客户端实现"><a href="#2-2-2-客户端实现" class="headerlink" title="2.2.2 客户端实现"></a>2.2.2 客户端实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/1 19:59</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NetworkProgram_Socket_TCP03Client_1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//与服务器端建立连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), <span class="hljs-number">9999</span>);<br><br>        <span class="hljs-comment">//准备数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath_send</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch21/testfile/bfu01.jpg&quot;</span>;<br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">file_bi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath_send));<br><br>        <span class="hljs-comment">//获取socket的输出流</span><br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bufferedOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(socket.getOutputStream());<br><br>        <span class="hljs-comment">//读取文件并写入socket关联的数据通道</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen_send</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] buf_send = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4485120</span>];<br>        <span class="hljs-keyword">while</span>((readLen_send = file_bi.read(buf_send)) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//写入数据通道</span><br>            bufferedOutputStream.write(buf_send, <span class="hljs-number">0</span>, readLen_send);<br>        &#125;<br>        <span class="hljs-comment">//关闭文件流</span><br>        file_bi.close();<br><br>        <span class="hljs-comment">//插入输出流结束标志</span><br>        socket.shutdownOutput();<br><br>        <span class="hljs-comment">//获取服务器端返回的消息</span><br><br>        <span class="hljs-comment">//获取输入流</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(socket.getInputStream());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen_received</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] buf_received = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4485120</span>];<br>        <span class="hljs-keyword">while</span>((readLen_received = inputStream.read(buf_received)) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;客户端收到的消息：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf_received, <span class="hljs-number">0</span>, readLen_received));<br>        &#125;<br><br>        <span class="hljs-comment">//插入输入流结束标志</span><br>        socket.shutdownInput();<br><br>        <span class="hljs-comment">//关闭流 和 Socket对象</span><br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-netstat指令"><a href="#2-3-netstat指令" class="headerlink" title="2.3 netstat指令"></a>2.3 netstat指令</h3><ul><li><p>在macOS环境下，可以使用终端来运行 <code>netstat</code> 命令来查看网络连接和网络统计信息；</p></li><li><p>一些常用的 <code>netstat</code> 命令及其说明：</p><ol><li><code>netstat -a</code>: 显示所有连接和监听端口。</li><li><code>netstat -an</code>: 显示所有连接和监听端口的数字形式。</li><li><code>netstat -f inet</code>: 仅显示 IPv4 连接信息。</li><li><code>netstat -f inet6</code>: 仅显示 IPv6 连接信息。</li><li><code>netstat -p tcp</code>: 仅显示 TCP 连接信息。</li><li><code>netstat -p udp</code>: 仅显示 UDP 连接信息。</li><li><code>netstat -i</code>: 显示网络接口的状态信息。</li><li><code>netstat -r</code>: 显示路由表信息。</li></ol><p>另外，还可以使用一些附加的选项来进一步定制 <code>netstat</code> 的输出。例如：</p><ol><li><code>netstat -t</code>: 仅显示 TCP 连接信息。</li><li><code>netstat -u</code>: 仅显示 UDP 连接信息。</li><li><code>netstat -l</code>: 仅显示监听端口的信息。</li><li><code>netstat -s</code>: 显示网络统计信息。</li></ol></li><li><p>windows下<code>netstat -anb</code>在macOS中，可以使用<code>sudo lsof -i</code>代替；</p></li></ul><h2 id="三、UDP网络通信编程"><a href="#三、UDP网络通信编程" class="headerlink" title="三、UDP网络通信编程"></a>三、UDP网络通信编程</h2><ul><li>实际开发中使用较少，目前仅了解基础用法；</li></ul><h3 id="3-1-基本介绍"><a href="#3-1-基本介绍" class="headerlink" title="3.1 基本介绍"></a>3.1 基本介绍</h3><ul><li><p><strong>DatagramSocket</strong> 和 <strong>DatagramPacket</strong> 两个类实现了基于UDP协议的网络程序；</p><ul><li>DatagramSocket：用于发送或接收数据报包的套接字；</li><li>DatagramPacket：一个数据报包，它包含一个<strong>数据缓冲区</strong>、<strong>数据报包的长度</strong>【最长64Kb】以及<strong>本地主机和目标主机的ip和端口</strong>；</li></ul></li><li><p>UDP网络编程：</p><ul><li>1.每一个UDP数据报包都有完整的地址信息，因此UDP协议<strong>无需建立连接</strong>；</li><li>2.没有明确的服务器端和客户端，演变为<strong>发送端和接收端</strong>，发送&#x2F;接收两者地位一致；</li><li>3.接收数据和发送数据是通过DatagramSocket对象完成；</li><li>4.待发送的数据封装到DatagramPacket对象中；</li><li>5.接收到DatagramPacket对象后，需要进行<strong>拆包</strong>，取出数据；</li><li>6.发送端&#x2F;接收端（地位一致）都可以指定在哪个端口接收数据；</li></ul></li></ul><h3 id="3-2-案例一：发送端-接收端通信"><a href="#3-2-案例一：发送端-接收端通信" class="headerlink" title="3.2 案例一：发送端-接收端通信"></a>3.2 案例一：发送端-接收端通信</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">1</span>.编写一个发送端和一个接收端<br><span class="hljs-attribute">2</span>.接收端在<span class="hljs-number">9999</span>号端口监听并接收发送端数据<br><span class="hljs-attribute">3</span>.发送端 向 接收端 发送数据 “Hello，中午吃啥？”<br><span class="hljs-attribute">4</span>.接收端 接收到 发送端 发送的数据后，打印并回复 “中午吃东区二楼，一起啊！”，然后退出<br><span class="hljs-attribute">5</span>.发送端接收回复的数据后，打印并退出<br></code></pre></td></tr></table></figure><h4 id="3-2-1-接收端实现"><a href="#3-2-1-接收端实现" class="headerlink" title="3.2.1 接收端实现"></a>3.2.1 接收端实现</h4><ul><li>分成两个部分：<ul><li>1.接收数据<ul><li>创建 DatagramSocket 对象，指定从10000端口接收&#x2F;发送数据；</li><li>创建接收数据的DatagramPacket对象；</li><li>通过receive()方法接收DatagramPacket数据报包；</li><li>拆包，分解出数据报包的发送主机ip，端口号以及数据；</li><li>打印数据；</li></ul></li><li>2.发送数据<ul><li>准备数据；</li><li>把数据封装成一个DatagramPacket对象；</li><li>通过send()方法发送数据；</li><li>关闭Socket对象；</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/2 10:55</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NetworkProgram_Socket_UDP01Receive</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建 DatagramSocket 对象，准备接收10000端口的数据</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">datagramSocket_receive</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//构建byte数组，</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8192</span>];<br><br>        <span class="hljs-comment">//while(true) &#123;</span><br>            <span class="hljs-comment">//创建接收数据的DatagramPacket对象</span><br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">datagramPacket_receive</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br>            <span class="hljs-comment">//接收DatagramPacket数据报包</span><br>            datagramSocket_receive.receive(datagramPacket_receive);<br><br>            <span class="hljs-comment">//拆包</span><br>            <span class="hljs-type">InetAddress</span> <span class="hljs-variable">src_ip</span> <span class="hljs-operator">=</span> datagramPacket_receive.getAddress();<span class="hljs-comment">//返回数据报包的源主机ip地址，</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">src_port</span> <span class="hljs-operator">=</span> datagramPacket_receive.getPort();<span class="hljs-comment">//返回数据报包的源主机端口号</span><br>            <span class="hljs-type">byte</span>[] data = datagramPacket_receive.getData();<br><br>            <span class="hljs-comment">//打印</span><br>            System.out.println(<span class="hljs-string">&quot;From &quot;</span> + src_ip + <span class="hljs-string">&quot;:&quot;</span> + src_port + <span class="hljs-string">&quot; message: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data, <span class="hljs-number">0</span>, datagramPacket_receive.getLength()));<br><br>            <span class="hljs-comment">//回复</span><br>            <span class="hljs-type">byte</span>[] send_msg = <span class="hljs-string">&quot;中午吃东区二楼，一起啊！&quot;</span>.getBytes();<br>            System.out.println(<span class="hljs-string">&quot;我发送的：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(send_msg, <span class="hljs-number">0</span>, send_msg.length));<br><br>            <span class="hljs-comment">//创建发送数据的DatagramPacket对象，并封装数据报包</span><br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">datagramPacket_send</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(send_msg, send_msg.length, src_ip, src_port);<br><br>            <span class="hljs-comment">//发送数据</span><br>            datagramSocket_receive.send(datagramPacket_send);<br>        <span class="hljs-comment">//&#125;</span><br>        <span class="hljs-comment">//关闭Socket</span><br>        datagramSocket_receive.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-2-发送端实现"><a href="#3-2-2-发送端实现" class="headerlink" title="3.2.2 发送端实现"></a>3.2.2 发送端实现</h4><ul><li>分成两个部分：<ul><li>1.发送数据<ul><li>创建 DatagramSocket 对象，指定从9999端口接收&#x2F;发送数据；</li><li>准备数据；</li><li>把数据封装成一个DatagramPacket对象；</li><li>通过send()方法发送数据；</li></ul></li><li>2.接收数据<ul><li>创建接收数据的DatagramPacket对象；</li><li>通过receive()方法接收DatagramPacket数据报包；</li><li>拆包，分解出数据报包的发送主机ip，端口号以及数据；</li><li>打印数据；</li><li>关闭Socket对象；</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/5/2 10:50</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NetworkProgram_Socket_UDP01Send</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">datagramSocket_send</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9999</span>);<br><br>        <span class="hljs-type">byte</span>[] send_msg = <span class="hljs-string">&quot;Hello，中午吃啥？&quot;</span>.getBytes();<br><br>        <span class="hljs-comment">//创建发送数据的DatagramPacket对象，并封装数据报包</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">datagramPacket_send</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(send_msg, send_msg.length, InetAddress.getLocalHost(), <span class="hljs-number">10000</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;我发送的：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(send_msg, <span class="hljs-number">0</span>, send_msg.length));<br>        <span class="hljs-comment">//发送</span><br>        datagramSocket_send.send(datagramPacket_send);<br><br>        <span class="hljs-comment">//创建接收数据的DatagramPacket对象</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8192</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">datagramPacket_receive</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br>        datagramSocket_send.receive(datagramPacket_receive);<br><br>        <span class="hljs-comment">//拆包</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">src_ip</span> <span class="hljs-operator">=</span> datagramPacket_receive.getAddress();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">src_port</span> <span class="hljs-operator">=</span> datagramPacket_receive.getPort();<br>        <span class="hljs-type">byte</span>[] data = datagramPacket_receive.getData();<br><br>        System.out.println(<span class="hljs-string">&quot;From &quot;</span> + src_ip + <span class="hljs-string">&quot;:&quot;</span> + src_port + <span class="hljs-string">&quot; message: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data, <span class="hljs-number">0</span>, datagramPacket_receive.getLength()));<br>        <span class="hljs-comment">//关闭Socket</span><br>        datagramSocket_send.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-对象处理流ObjectOutputStream和ObjectInputStream(序列化和反序列化)</title>
    <link href="/2023/04/25/Java-%E5%AF%B9%E8%B1%A1%E5%A4%84%E7%90%86%E6%B5%81ObjectOutputStream%E5%92%8CObjectInputStream(%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96)/"/>
    <url>/2023/04/25/Java-%E5%AF%B9%E8%B1%A1%E5%A4%84%E7%90%86%E6%B5%81ObjectOutputStream%E5%92%8CObjectInputStream(%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96)/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-对象处理流ObjectOutputStream和ObjectInputStream-序列化和反序列化"><a href="#Java-对象处理流ObjectOutputStream和ObjectInputStream-序列化和反序列化" class="headerlink" title="Java-对象处理流ObjectOutputStream和ObjectInputStream(序列化和反序列化)"></a>Java-对象处理流ObjectOutputStream和ObjectInputStream(序列化和反序列化)</h1><ul><li>指对基本数据类型  或 对象 进行序列化和反序列化操作；</li></ul><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><ul><li>保存数据时，保存数据的值和数据类型；</li><li>序列化成字节流；</li></ul><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><ul><li>恢复数据时，恢复数据的值和数据类型；</li><li>字节流反序列化为各种数据类型的数据；</li></ul><h2 id="可序列化"><a href="#可序列化" class="headerlink" title="可序列化"></a>可序列化</h2><ul><li><p>需要让某个对象支持序列化机制，则必须让其类是可序列化的，该类必须实现如下两个接口之一：</p><ul><li>Serializable：可序列化接口，仅仅是一个标记，接口内部没有定义任何方法，表示实现该接口的类可序列化；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Serializable</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Externalizable：此接口继承了Serializable接口，接口内部定义了两个方法，实现该接口时需要实现接口内部定义的方法，因此一般不使用这个；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Externalizable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The object implements the writeExternal method to save its contents</span><br><span class="hljs-comment">     * by calling the methods of DataOutput for its primitive values or</span><br><span class="hljs-comment">     * calling the writeObject method of ObjectOutput for objects, strings,</span><br><span class="hljs-comment">     * and arrays.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@serialData</span> Overriding methods should use this tag to describe</span><br><span class="hljs-comment">     *             the data layout of this Externalizable object.</span><br><span class="hljs-comment">     *             List the sequence of element types and, if possible,</span><br><span class="hljs-comment">     *             relate the element to a public/protected field and/or</span><br><span class="hljs-comment">     *             method of this Externalizable class.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> out the stream to write the object to</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@exception</span> IOException Includes any I/O exceptions that may occur</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeExternal</span><span class="hljs-params">(ObjectOutput out)</span> <span class="hljs-keyword">throws</span> IOException;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The object implements the readExternal method to restore its</span><br><span class="hljs-comment">     * contents by calling the methods of DataInput for primitive</span><br><span class="hljs-comment">     * types and readObject for objects, strings and arrays.  The</span><br><span class="hljs-comment">     * readExternal method must read the values in the same sequence</span><br><span class="hljs-comment">     * and with the same types as were written by writeExternal.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> in the stream to read data from in order to restore the object</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@exception</span> IOException if I/O errors occur</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@exception</span> ClassNotFoundException If the class for an object being</span><br><span class="hljs-comment">     *              restored cannot be found.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">readExternal</span><span class="hljs-params">(ObjectInput in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="序列化实例"><a href="#序列化实例" class="headerlink" title="序列化实例"></a>序列化实例</h2><ul><li>需求1:将User类的一个对象user1保存到磁盘；</li><li>需求2:将保存的user1对象从磁盘读取出来，并赋值给另一个User类的对象user2；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/25 20:11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<span class="hljs-comment">//此处需要实现Serializable接口 或者 Externalizable（里面有方法需要实现，因此一般不用这个）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileIO_Serializable01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;小温&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">520</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;小温&quot;</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch19/testfile/ObjectOutputStream01.txt&quot;</span>;<br><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath)));<br>        <span class="hljs-comment">//序列化</span><br>        oos.writeObject(user1);<br>        oos.writeInt(n);<br>        oos.writeBoolean(flag);<br>        oos.writeUTF(s);<br>        oos.writeChar(c);<br><br>        oos.close();<span class="hljs-comment">//读取数据前应该关闭输出流！</span><br><br>        <span class="hljs-comment">//反序列化（此处顺序应该与序列化时的顺序保持一致！！）</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath)));<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> (User)ois.readObject();<br>        System.out.println(user2);<br>        System.out.println(ois.readInt());<br>        System.out.println(ois.readBoolean());<br>        System.out.println(ois.readUTF());<br>        System.out.println(ois.readChar());<br><br>        ois.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>需要注意：</p><ul><li><p>反序列化时，读取数据的顺序应该与序列化时保存数据的顺序一致！</p></li><li><p>读取数据前应该关闭输出流！！</p></li><li><p>建议添加<strong>SerialVersionUID</strong>：</p><ul><li>SerialVersionUID：Java会根据该对象的类名、成员变量、方法等信息生成一个唯一的ID，这个ID就是SerialVersionUID。<ul><li>不指定的话，会自动生成一个ID，会因为编译器、JDK版本不同等因素而不同；</li><li>一般不推荐自动生成的ID，而是建议显示的制定一个固定值，</li></ul></li><li>作用：<strong>是保证序列化与反序列化的兼容性。</strong><ul><li>在序列化时，Java会将对象的数据转换为一个字节流，并带上SerialVersionUID一起保存。</li><li>在反序列化时，Java会使用相同的算法重新计算对象的ID，然后和保存的ID进行比对。<ul><li>如果两个ID相同，则说明序列化与反序列化兼容，可以正常进行数据转换；</li><li>如果不同，则会抛出InvalidClassException异常。</li></ul></li></ul></li></ul></li><li><p>序列化时，默认序列化对象的所有属性，除了static或transient修饰的成员；</p><ul><li><strong>static不参与序列化的前提</strong>是：序列化和反序列化不在同一个线程内运行！！</li><li>如果将序列化代码和反序列化代码写在一起，那么static也会参与序列化过程：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">解释：<br>静态变量是属于类的，而不是属于实例的。因此，在对实例进行序列化时，静态变量的值也会被包括在内。同样，当对序列化数据进行反序列化时，静态变量的值也会被恢复。<br><br>需要注意的是，如果一个静态变量的值在序列化之后被改变了，那么当反序列化时，它的值还是原来的值，而不是新的值。这是由于反序列化操作只是将数据恢复成了对象的原始状态，不会再次执行静态初始化代码<br></code></pre></td></tr></table></figure></li></ul></li><li><p>根据上述注意事项，修改上述案例如下：</p></li><li><p>User类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/25 20:11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<span class="hljs-comment">//此处需要实现Serializable接口 或者 Externalizable（里面有方法需要实现，因此一般不用这个）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>负责序列化的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileIO_Serializable01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;小温&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">520</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;小温&quot;</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch19/testfile/ObjectOutputStream01.txt&quot;</span>;<br><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath)));<br>        <span class="hljs-comment">//序列化</span><br>        oos.writeObject(user1);<br>        oos.writeInt(n);<br>        oos.writeBoolean(flag);<br>        oos.writeUTF(s);<br>        oos.writeChar(c);<br><br>        oos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>负责反序列化的类FileIO_Serializable02</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/25 21:36</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileIO_Serializable02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">//反序列化（此处顺序应该与序列化时的顺序保持一致！！）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch19/testfile/ObjectOutputStream01.txt&quot;</span>;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath)));<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> (User)ois.readObject();<br>        System.out.println(user2);<br>        System.out.println(ois.readInt());<br>        System.out.println(ois.readBoolean());<br>        System.out.println(ois.readUTF());<br>        System.out.println(ois.readChar());<br><br>        ois.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>IO流</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>IO流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习--事务总结</title>
    <link href="/2023/04/22/MySQL-%E4%BA%8B%E5%8A%A1%E6%80%BB%E7%BB%93/"/>
    <url>/2023/04/22/MySQL-%E4%BA%8B%E5%8A%A1%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL学习–多表查询总结"><a href="#MySQL学习–多表查询总结" class="headerlink" title="MySQL学习–多表查询总结"></a>MySQL学习–多表查询总结</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，这些操作要么同时成功，要么同时失败；</li><li>默认MySQL的事务是<strong>自动提交</strong>的，<strong>每个SQL语句</strong>都被视为<strong>一个单独的事务</strong>，并且在执行完该语句后就会立即提交到数据库中</li></ul><h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><ul><li>如果没有事务，看一个案例：银行转账</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 1.查询张三账户的余额<br>SELECT money FROM account WHERE name = &#x27;张三&#x27;;<br>-- 2.张三账户余额减100<br>UPDATE account set money = money - 100 WHERE name = &#x27;张三&#x27;;<br><br>异常。。。 #此时，出现异常，张三的钱扣了100，但是李四的余额并没有加100；<br><br>-- 3.李四账户余额加100<br>UPDATE account set money = money + 100 WHERE name = &#x27;李四&#x27;;<br></code></pre></td></tr></table></figure><ul><li>可能会出现上述情况，转账过程中出现异常，导致张三的钱扣了100，但是李四的余额并没有加100；</li></ul><h3 id="事务操作的两种控制方式"><a href="#事务操作的两种控制方式" class="headerlink" title="事务操作的两种控制方式"></a>事务操作的两种控制方式</h3><p><strong>1.修改默认的事务提交方式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 1.修改默认提交方式<br>-- 查看当前会话事务的提交方式, 默认是1，表示自动提交模式；<br>SELECT @@autocommit;<br>-- 修改事务提交方式，0表示手动提交<br>-- 设置为手动提交时，当业务完成时，需要执行COMMIT操作提交，当业务出现异常时执行ROLLBACK操作回滚；<br>SET @@autocommit = 0;<br><br>-- 模拟银行转账<br><br>-- 1.查询张三账户的余额<br>SELECT money FROM account WHERE name = &#x27;张三&#x27;;<br>-- 2.张三账户余额减100<br>UPDATE account set money = money - 100 WHERE name = &#x27;张三&#x27;;<br><br>-- 3.李四账户余额加100<br>UPDATE account set money = money + 100 WHERE name = &#x27;李四&#x27;;<br><br>COMMIT;<br><br>ROLLBACK;<br></code></pre></td></tr></table></figure><p><strong>2.使用MySQL语句控制</strong></p><ul><li>开启事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">START TRANSACTION;<br>或<br>BEGIN;<br></code></pre></td></tr></table></figure><ul><li>提交事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">COMMIT;<br></code></pre></td></tr></table></figure><ul><li>回滚事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ROLLBACK;<br></code></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 2.MySQL语句控制<br><br>-- 开启事务<br>START TRANSACTION; # 使用BEGIN开启事务也可以；<br><br>-- 1.查询张三账户的余额<br>SELECT money FROM account WHERE name = &#x27;张三&#x27;;<br>-- 2.张三账户余额减100<br>UPDATE account set money = money - 100 WHERE name = &#x27;张三&#x27;;<br><br>sadasdad<br><br>-- 3.李四账户余额加100<br>UPDATE account set money = money + 100 WHERE name = &#x27;李四&#x27;;<br><br>-- 提交事务<br>COMMIT;<br><br>-- 回滚事务<br>ROLLBACK;<br></code></pre></td></tr></table></figure><h2 id="事务四大特性ACID"><a href="#事务四大特性ACID" class="headerlink" title="事务四大特性ACID"></a>事务四大特性ACID</h2><ul><li>原子性(Atomicity)：事务是不可分割的最小单元，要么全部成功，要么全部失败；</li><li>一致性(Consistency)：事务完成时，必须使所有的数据都保持一致状态；<ul><li>例如，银行转账，张三扣了100，李四没有加100，就破坏了一致性；</li></ul></li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行；<ul><li>例如：给数据加锁，保证当前执行的事务不受其他事务的影响；</li></ul></li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的；<ul><li>例如：事务的业务完成后，所做的修改必须永久保存到数据库中，即使出现系统故障或崩溃，也不能丢失（这一点一般通过日志技术实现，如redo日志，undo日志）；</li></ul></li></ul><h2 id="事务并发问题"><a href="#事务并发问题" class="headerlink" title="事务并发问题"></a>事务并发问题</h2><ul><li>主要会产生以下三个问题：</li></ul><table><thead><tr><th>问题</th><th>问题描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读取了另外一个事务还没有提交的数据，该数据可能会被回滚；</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同（可能在两次读数据期间，该记录被其他事务修改了）</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据后，再次查询发现数据已经存在，类似“幻影”</td></tr></tbody></table><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>事务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-BufferedReader和BufferedWriter组合实现文件拷贝（文本文件）</title>
    <link href="/2023/04/21/Java-BufferedReader%E5%92%8CBufferedWriter%E7%BB%84%E5%90%88%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D%EF%BC%88%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%EF%BC%89/"/>
    <url>/2023/04/21/Java-BufferedReader%E5%92%8CBufferedWriter%E7%BB%84%E5%90%88%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D%EF%BC%88%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-BufferedReader和BufferedWriter组合实现文件拷贝（文本文件）"><a href="#Java-BufferedReader和BufferedWriter组合实现文件拷贝（文本文件）" class="headerlink" title="Java-BufferedReader和BufferedWriter组合实现文件拷贝（文本文件）"></a>Java-BufferedReader和BufferedWriter组合实现文件拷贝（文本文件）</h1><h2 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h2><ul><li>使用包装流（包装的是FileReader&#x2F;FileWriter字符流）实现文件的拷贝，因此，文件应为文本文件，避免文件损失；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/21 17:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileIO_fileCopy02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath_r</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch19/testfile/bufferedwriter01.txt&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath_w</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch19/testfile/bufferedwriter02.txt&quot;</span>;<br><br>        <span class="hljs-comment">//通过包装流拷贝文件</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath_r)));<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath_w)));<br><br>        String line;<br>        <span class="hljs-keyword">while</span>((line = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>            bw.write(line);<br>            bw.newLine();<br>        &#125;<br><br>        br.close();<br>        bw.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>IO流</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>IO流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-处理（包装）流中的“装饰器模式”</title>
    <link href="/2023/04/21/Java-%E5%A4%84%E7%90%86%EF%BC%88%E5%8C%85%E8%A3%85%EF%BC%89%E6%B5%81%E4%B8%AD%E7%9A%84%E2%80%9C%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%E2%80%9D/"/>
    <url>/2023/04/21/Java-%E5%A4%84%E7%90%86%EF%BC%88%E5%8C%85%E8%A3%85%EF%BC%89%E6%B5%81%E4%B8%AD%E7%9A%84%E2%80%9C%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-处理（包装）流中的“装饰器模式”"><a href="#Java-处理（包装）流中的“装饰器模式”" class="headerlink" title="Java-处理（包装）流中的“装饰器模式”"></a>Java-处理（包装）流中的“装饰器模式”</h1><ul><li><strong>包装流</strong>对节点流进行包装：<ul><li>使用了装饰器模式；</li><li>既可以消除不同节点流的实现差异，也可以提供更加方便的方法来完成数据的输入输出；</li><li>且不直接与数据源相连接。</li></ul></li></ul><h2 id="模拟包装流中的”装饰器模式“"><a href="#模拟包装流中的”装饰器模式“" class="headerlink" title="模拟包装流中的”装饰器模式“"></a>模拟包装流中的”装饰器模式“</h2><h3 id="抽象父类Reader"><a href="#抽象父类Reader" class="headerlink" title="抽象父类Reader"></a>抽象父类Reader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/17 16:46</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 模拟Reader类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reader_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文件读取-节点流FileReader"><a href="#文件读取-节点流FileReader" class="headerlink" title="文件读取 节点流FileReader"></a>文件读取 节点流FileReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/17 16:47</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 模拟FileReader类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReader_</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reader_</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//实现读取文件</span><br>        System.out.println(<span class="hljs-string">&quot;读取文件。。。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串读取-节点流StringReader"><a href="#字符串读取-节点流StringReader" class="headerlink" title="字符串读取 节点流StringReader"></a>字符串读取 节点流StringReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/17 16:49</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringReader_</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reader_</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//实现读取字符串</span><br>        System.out.println(<span class="hljs-string">&quot;读取字符串。。。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="包装流BufferedReader"><a href="#包装流BufferedReader" class="headerlink" title="包装流BufferedReader"></a>包装流BufferedReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/17 16:50</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedReader_</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reader_</span> &#123;<br>    <span class="hljs-keyword">private</span> Reader_ reader_;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BufferedReader_</span><span class="hljs-params">(Reader_ reader_)</span> &#123;<br>        <span class="hljs-built_in">this</span>.reader_ = reader_;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.reader_.read();<span class="hljs-comment">//动态绑定机制，调用不同节点的读取方式</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/17 17:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test_Decorator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Reader_</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader_</span>();<span class="hljs-comment">//文件读取 节点流</span><br><br>        <span class="hljs-type">Reader_</span> <span class="hljs-variable">sr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader_</span>();<span class="hljs-comment">//字符串读取 节点流</span><br><br>        <span class="hljs-type">BufferedReader_</span> <span class="hljs-variable">br_f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader_</span>(fr);<span class="hljs-comment">//包装了 文件读取 节点流的包装流</span><br><br>        br_f.read();<br>        <br>        <span class="hljs-type">BufferedReader_</span> <span class="hljs-variable">br_s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader_</span>(sr);<span class="hljs-comment">//包装了 字符串读取 节点流的包装流</span><br><br>        br_s.read();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过给BufferedReader包装流传入不同的节点流，根据<strong>动态绑定机制</strong>，可以获得不同节点流的数据输入输出方法；</li><li>包装流中读取数据实际是 <strong>被包装的节点流</strong> 来读取；</li><li>关闭包装流时会调用 <strong>被包装的节点流</strong> 的关闭方法；</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>IO流</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>IO流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录-20230417</title>
    <link href="/2023/04/17/%E8%AE%B0%E5%BD%95-20230417/"/>
    <url>/2023/04/17/%E8%AE%B0%E5%BD%95-20230417/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="231138fd50690910546c872ed9944f96fb6995674caa3af3e887a3f6cc6a8902">7ccdbd9a8d189922813fab3f8512bc1ba07a1c23a49e2159bc35f6bdbc2c1d2348276a6e4ef92353fbc7a8cec838f57e9a9f8b5da17624e0fe150dfcba2acfe735b42e188a694b5ecb1e759fa709de0fab60d7d38aa3d3a40e4f6f5b5eeb0ad317ff69c518dc2d79597f82cdea4631d6895ef742ba35528abb16727115e4f201d1800b24f5b90e32b016df799c3bb550f31608a4883386a411f925a88763b9bc271fab74a3b5494bf0acee65447d93c6685ff65465bb2a8f488e5e384aa1f86a97a006651ccdbbfffa8b1a6a792c95558896419e73c69784acccf23febdb9aa4dd33099690d8daa48a6dfe724db1b4a6862690a3aa8a1a5f9604d01465efb1eb3a776ef467a51fa694fc30caa70e4e98eeebc38773af35abea00109692a27c62914fa716a74d7f297b4b4922c04d2e21f5987f95e089f8b8a40c9504eb54b76147850feca28ccc77a4360b18e4f30da400b27c0b87379c09d3fc85a142988636f8fbab8b70bf296790a848c95692b682b1b11b122a38538e898c6f2dc0be9da174b8f3779e9b49f9aa07513a31f566d0ad72b235e1107f097e042eca1df1c21362785fdf8e2d3bdf4d88da1cef36a811d2efb009400cfff229747ee14ea03f74021c1bce530d996f62147cff5582d91f8162f899f3d172f324cdcf4a47f4ddd3dbc61db55bbc35234eb3dfb64f791fb95be6f72f22eabde16da966b9e8ede7e6162fdf2d1d45a98cadd433c089d573b4bc2dab75a4139c8df3007f836b1751c742751ad3d5de30124289d1fee33cddb4a434eff2d7116f311c29ce3620a45e20b9424d9122992a1ea9e170f11f1e5b9cef946c859b9846f3b755d89324a7d56a466ebe9a2d4a7d5911d04104a02034a5b93988f33edd2c8a8d8983c62d5e76c62fdafa2d02e0e0886d26c56800e7509570d8df3b5a58bcf7188371ec94635f72be240f2b9265ce7ce4e083e03deb61fdc8ec1b34630c6956bd3488939953a82f7447f7363f63b07bfb61de2580848c45ad8ebb30504103c6a89e1f24f49b0e557437b1cd3dd89f3215e6e120ba7809b6625e86b8df680ebe59ab2d3c94bbedc60f80d071e40c71ef86e6dff37826490fe922ca2c3a5988f5509d45c08de83569a13eb084c4f6674c1c10a45a748f2df87881b1987a3fc782ec099427b8d021de51456587db39cee13febac946f931a23ef3cab78ff0f06fb742291415cf4e665c451988f124538b088d9f8498a12c89d9413d9353cf1c7f1e6229bcf7c4a587e68dc061f31580542f5a8e93dd336deb0c9a463bde1f970ea7ab492b09b5732fc2b331f21769738013ccf43d3899f0b456696c96ef9c2aab33dc95c3e12fc40318e8cd9b9f9aba185291bc58720d50c0e8316eebbc65c8052a87daa74e6d7174e32fd5b4157cec22c909ad237f95bd5d529dd81798aaa932afbb00726b3b947a468d1dfa08ece72786f9910b338c541ed35c9cf3c8cce7278ae8749efbfb1a593192bcf847c0658b145d11d5f792dd1c78161dabba4c284169e96bde56f6b8ec3f41e8ac436b5be63d5d00ab3154410f749d577ad53c72b12b1d099c6dbcd7b2d2e6e28c36ca27d6b95fc4f52b6254ebdfb49b5fe59d72b0f81cae7549d7c1e47466c2dfbcb913dc00eee4492d2f6f2a7bd5902258b24cc3e5c25592cad31ac2735ee895317e39bbff5360344961f1da8c97e7f73e9609dceb09c8dc41e8efa9d194b2576155c32037bef19bc74c9781fde2351d2e2e2f10eb79d09d1e057ea4ce551b44d6dcd27c245fe769cdc67df5afaf71ac31d7259f2fb02dc435fdc1d6eb4f25b8b2bd4de9e798ac492ef5caeebe003498a155e510df185858a5a254a44a021c9ad845f8b66101b8a0cb2e560ef6347d892c8fe60628b596907136d093adf8da499269807e7ac5eaef3b1c777048a0aad77593f63fd7a449cfcbbf64758fb1b93795caffbc0f3a1748f34c5c8240986972087face11fa0beb473654e7ff5acda3ae167be9c47f614d997bdacbd7cc316fe4e4f8aeb78f5289b193666247830936caf441a5a3c60296d317d05233df3625ce1b93b0cbbc846d54efa9d8fc25c5dbb7013abe22fbb3550ffcc5d1724c3f26f65a2f84d38594f7666b9fce728ef29157aef060d12f3335daf76729653e98aa3da2c7e95f02a94d1fc5b75859b6575597f07a2f3b957ebc14c72a10a7df274a780165829d6b5d08b6aa3a96c2d67c8490580be5295f843d719ad42579054fdc3875756f7af29c09d882ec1cfd9b935c5c95d2e70ed1833d74188c068a3e7d1385d026961b79cef8f9c7d09bb3</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章已加密，请输入密码阅读！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>学习路上的一些记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录-20230221</title>
    <link href="/2023/04/14/%E8%AE%B0%E5%BD%95-20230221/"/>
    <url>/2023/04/14/%E8%AE%B0%E5%BD%95-20230221/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="da430672e627dae7b09fab0779a6d00ee703e3429eae583421b9eefc49a0a401">7ccdbd9a8d189922813fab3f8512bc1ba07a1c23a49e2159bc35f6bdbc2c1d23fae5eed25eca0fcea9f375d2e7a4fdf279c4f1e87eadf508a5e2fcded8bcf194936f1a8ea194aaaa1d70c995abc6736b91d06af26fc34ceedab14e88819b4c3af27653bbbb33bc87cea8af4ebc4d829578bab1c1d21cf42e9ac1f0926e5c751fb64bdb8e5a6cf8466a7fdf421c06e41c692a9214507549bf014ee810d9988517eaed19b0d4909e2b1f9dd3db586aa113f87cf4cf1036c8a041bfb4d66413477b11dd1a6f704f1fa8a1269a57128da0523bfd20696c7f4b3fe754c8cfdec748314566a430685d7cb09c2e9d53c6ed9bd2588ce5daf0ea4823e2cc3ed0199edfff8be6ff22b5f24b83b33af03b4fae94df620b3bac48b3969bfd1e9f74a6e33f1ce4f9c8eb154261f180a62b58e9779cb3d4c7305d84fd472b55bdfaa682e090032d5faf43997769c1d5b2b15f02e6c60830df84f895179f5861369f01beeb20e8103ab8922360ce60864a4bb9128d50655e6fd65d1ea6420616ec70b107164070326e23553642d7576fe8e5477f74ace1275d3521c8ec44a8207c385fe5354768d60975b5c0e450f07f3b28fbce100e35dce2451ad4fd602c437e3acd090aaa19cada707ed58e836d764994380143c3decf9e12e19c8e758b9baa29a2050a477c1575e380ec02803287475aebcb5cd54da26ef571bbbb9f208c0ff8ccf9d6c2fe7b0df7ab9550d5c1527e290d3cf1f1c3ae8e9e9b0583df83e73145dfb48d27d8bd9fcfadb97e80cdfbb484d37726c7ad5523cf347876fca80f6d7ce1e83564a4a5671c6829e4f3c53a2e076f35e55283d9776cc4f37a8989918932640dc7ef639236db9a41c54edf4d4e6cc478b5a2a039fe255378bc52a1a77fdf0ab8188892c4ea887cacccb28ee0b91558fdad6de6020769b98f972c3b664f243c8f17c6ee8c115f8eab9d1791c07ebd4a8abc8b8d520d831224cc4bb91051482066d2f2ffebf82cba73ad2f3f442ea08478279c6b3142dc4349c70993abb7bab2f74e6a3d954db9d361441586992966b3d2cae756be04c5bef03322899f2fbca4b106d15939342bbbae6f1bbe4afc8407d5592ec9f30c7f55a7b85f05304429e9b040221da6c1c7b0f2caf2aa7e2d598f5788ace7cf75a1ad4688be6a3b8a7456373eff5d5bf4f24316cc9399ef17609967f509e0f0946042ffd6a5b24a944fe043632d6b4b8d474f06563b185f3c36d4e0af9002d340c416419b430647834af854b52b08bd1c21b9525dd01ce9f9838d31fb7c080a0fb0cf7e22e1fab1b81f5fd407ea176afd483b8a599fd252f8ccfcf64b7e75596c5f797c7e68f5684c78f458aeef4906dccc3dbbc9b34db1b81ac7fdb10692110c57fb38e6b522e5a533119baac14ff77de9430bf0a050a6f315b6629a03f712dcc9cc01f067aa6cf5401e3bc9f7f705d936fa70a7bb3218608b7ab02bae88ebd48c11ca1bddd1dee4b89e859226b17d8f78bd4ba287f865dad25294f377ce888404af9d68c29ef7c95c5a9a437a85c2fe8e145e5821f185e4caef6941de9ac0fc62ecfb0ca9c2ba49cc49d945dd85b835bad1c1862d8038a26db96c929bc46245058cf93695884dd01f4e48c731caa7b3531293507ec617c028985e01678d894ad15a64b1cd3849a47577f20bd4030716b359b3f40bf74ab7f0b9ae1d53e4b8a4edd6018e1736e50aa8a937b8a3f559cb04952e046d968c3c6d3fd394f6e41672944959b5fef0ec6bc2a5de546f2142c16a553669bfafcc339fe1cf227cd7352e3ee0075a434b9497b19510f682398b9bb7819dce750d6219df7891bb9a777a5c4092fcdf2f5a0832f0046ffe1149b5711b6e24a752e744bc3312622c575c96c0409fb5421aac73cf4540fdde451366107d214561401d2bec97397f4d24ae1ca1640c682c8476f3232a48a519660d0fa93a065cab0bbadffb11feafffbb19f07b2f96c7d0205e05e938f15d8b079a9d4d0267cc4a85d10cff81a659b4827408a6a668723788103a49cfa4b7ba2d34f7ee31789af54ca4c8e9fdeed3cddd6d7b8e37913f2c7cef7b673f8b8495d3e351f960ff683a6953203e1a99e8688e0ccc0df97d5a770a50ad3cd1b9aa7ab4a1b0f1caddf25845aa9210471ec43e4e39967fb7e80ebf2121418f25bed73435e3e6773737c096a3f01a5bb40bbaa5e4f75a4f086ccb29ef56e1da6a0a8aa35ed68c8ca7215fd8283a7cc2825345a2b8ee445712dbb4d887cb6544aba90a1c8224e511fedd47cb68424ba9e158ed65981f27ed9f9998e8051f7d9cd6e56ab7cacb382b2e44e5d0066c415647db977009a8314e430592bbc815f82a97bbe28016d30bbbdb73e6e8cbee003beef6743113873b43e97b03f680f829a8534c4d97f0443e38ee5d9ea8a7bd20ee9b19aa4b3dacf454b05169ff2425764867c675383cc68a7e066da7fdb4584e7fbbcbe0cd8b276b5494b9c317d46ec827aad2ec70fc674ae6a99038b8418a0f8189462ca5cf42fb19e4398bfe4e5a338a0c87b1c4de4414c639a14689a6ccb5e45d8f3eceb1655a2c6678ee48b126afa6230892afee9bd720ad23a804b793992fcb2a4caa78c9b89724cefa2c4b7c019473054adc1c7545aab42f8951af89a23b79b33113db50d3232224a148c753734d082b3e9f8541ecfecade5c0146ccd3420c26ac55595b2ee2e807601106485c7e443c9814778c889d9d56cc5583257a7db29b4fb96982a9c15dce83b1dedd86a4992dd57b6d703568eae8bfbfc1968c1a6a16c372b972237c6a287e882b6a3c7047b9f919ab622f9de43ef03124bfb4aec4e0f0627b0d8b92223618337f0e3385a4db4c3b87bceac9fafbabdfc27272251474dc82af46f45d8a7e9c80eccb066273f3b40e08532a149a31d1725148cc821c759a4ff91c7c5df5e4ac209623cd6fbdc4324a4491ca3a4a556f686332c0d40fb389d99a5c74bdbf39fa78ae1c018b07542cc14d7548781fe1de61b0b698defe2649deaab7fdb225fe72478244bd4d4b2e53025807e96c7ba9840e79a7b60d153322c95a530bda3abc1d7efe8288104c7071d81d7ae0e53a0ca9729ff35fd0d335aebed2484181541af78691cbb5009d4bcbd6cc8e48f72bab99aff2d1324ec65b384944aa0fe930aec6cbd1a1502462b7d99d5c63f5fd1f2b00d56ae11c22a9a420dec3e115295f002071caaf05e269e62937672030c04c7fcc26227379c96c8a2d2c10792f10fc9eb362c0751c127e55cc8c2055fdda39e3e6577fc0df27d86bd5bf86874d7e2783b6279f6543e19d61ae85791565e13591440f2a1a6a8763a56c56d2f2e65f3c6fe7c18d96f90627bec726f2f6c28f7d5aaaf661faf5c9b4964d0216e0eb47f85f18882be489fb728a175b95506b6c2e18f76bd06225dbd9c546ec11b976ea7876a9e8669a20c38431b415629fdaa91a717e70e30817eb52cad779fb8e8ed64a7d3091ee6ef686db16034ad4e71e3ec79601c30f8f43cdd25618382ae347b45b10b45c38c464af47185f52c363a31b59fbca540608eead9c048e282fa21ef9e2007655b62f0a9c3438e7bbbdf70581ed5f3dd0239c46e8a02ba096ef23f06c06eed9f3a44b24ff81bc1795bc429c180692c243d7066695a857e0a2ae2dfb632f82623c2085db148c9e5f09ebc61c8928b19c181d4d74d33c3c70a5801904102bed612cf3ebb238fc9e6815294b529366c06f249074e318f1bf979200204d5472dba377369d9137fd0e0a97e0c8f0f0f88eabb95fac3ad65cbde9c3ba7100aaf077e29415f765a5bac374dd39f3d84fe66d210855ccb209fa7c83894787f0036d71661711082192a7ae914a98000eb0570aedc760c57b1e6c3c355efbce23ccb518239828bbf7ac845c8923766450d0472b8ea9c2787c5bcadfa4c502e45033d63d2e9c12a537d566e0f2172b8dcb5023f53164463fcd29d8824547da92fad5d282ad1c19c490db868afa70f723589d1af3830cff728029626101ace8f52fb4f896454e11ccb9290cbc5d08bfb47dcd32df8e15decca6211f6d09fe1b01eafcc30d7e9f2d7d4cb3c3b3e461a6b18504036b0ae9f8127c500d3e51177d99f8f8950027e4ae2dc53c39f80b8d4acd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章已加密，请输入密码阅读！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>学习路上的一些记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录-20230401</title>
    <link href="/2023/04/14/%E8%AE%B0%E5%BD%95-20230401/"/>
    <url>/2023/04/14/%E8%AE%B0%E5%BD%95-20230401/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8b207905b27001119ce04e7b0721f4aac1345897527f70a919ed2673d4b6e4ce">7ccdbd9a8d189922813fab3f8512bc1ba07a1c23a49e2159bc35f6bdbc2c1d2307837e0af1af0c9bf3dac28ff909842e1b83b3ef72c86825ccc5045338ad3edcbb834e7db551cea9315295fea6495588830faa0d8534e83d0a2efb009c5b6cd6b327fea63e45ea0e49e10f18d5944dae387e7efc7b028508c9fee3eeae116d85da6b2217b49965623030df13225d343ecdca2f18a492c32dfba8a26d3df04884a10de4e518ae4569be4d639db9241027245b79bfd892f6a949dc64ac7c5f1a3a11d3252e7066b67384a5a5d2f72f10de0adad0cbe62d4e6126dac39a34e37c24f2d8e02a1fc6fb61c491c788658f5c2780a1e275bf3a09983e12c4d1950f63a293637684f92d628e28839f921cbe665a19ff581cc7641094e6462b553aa41949b4464b69754d8e32ca929f45c9ac0f2b8cf631775c4cccf9262147aaa309516c9e4aa8ec11befdd63a83aea868db3a19d9a97a59e950aa53fced32adcd31575703109b8a6caff11ec40abd0c4108545126c2533ce815d5c8bbf50b2e053eccc92f455efb55014fb31767e79811980d68492f6130a956bb53eb1826cd3dbedc87aabe81cea249f1b6e3b992b1f15e4176d431e223fdca702720328fc16ef1d4cff10e59ab311a5618dc67e84e17e6b9ed2f87c12064531becc5ffcc8f8bdcc2e2f0cf273382374f1b7ed8d2ee6628041c712ef3f6a7b293b89e1cea6135301c53ae6db8a8aee03b95937958d7395820b69881fdc49b318101ce425bbd75c77b448e23860de13a315563511204b5d302cdec784c29734028614b91209231d2f346d3acb09be114369286cf3eae7dc6a28a42b5a5a44e4f0baec60830bcc66e33c3f6e630fca5ba74a8199af76a86485fec3849b91fef2aba174a858f3e54a32395323af21535dced5dd63c4395932d7082aec0e6623820cf1d72d8e6027b8a4d0fe476c5949f07e1f191f342a63f8ba0729f90df146eff5d4614927e4b5adbd372e1fd5662fc21ec5d0682b92577ac909ffb3c2200627955e680695a741dd4ba60d7d92ca939e0564b82820355d0288e054c06328f361c95e1c684e7afadfa2a60b1c2697aaca27db2419b684cb633d8b7d51d058b3d243038e55a26f370bb6ca6247391139de7e65740a1d4884e8a95209f29f44b9b5cd25887d731484736cdfc42236237b727c0cb3f315716d36b1afed6565f428ce3a31d8f2cfc787b9d6bb0d97c86b351241f5a9810963efb7844e2f9c271756c23110beb64c40d0092ef781602939dbbf5d3928a16e7b407af46d5e9108bb4c32556594faf1c8d711df273e428499b1b76938fc2b0329fbdb2183a6c831efe11dd1164918bd9c9eba3a08cdb7259c560a38bd450b0616bb09e89bc62d82c368115b6d60a75f727cf0078d662fb8456212a6064dadf8950efc5b9faebc0da522eea5c2aee77d0f50e3b080576a60c7305056b5e8d8be5731b70a62f6fdd471211ae34f3f5d02f009874f137579181a3f12e6b808951f7f896b95c8db565788b5a9b583294a43b6b9566520f339eef1fe68c4f0b69a8e17d19e08c4e3a05929112bff4d7c2a614cfa116e3e852b2dbd622e24ed73bbc105825b97ee5aeeedcfdb99bdd722e064f6d45d6333577987c2723c757390a04aa384653f50ed208b240598066f0b8efc1e10974168785dd776f93fdf1ae850fb78f8747e3e3bd7d0162fd004950de6640d007e75379a5121d4cbead67f67e9d242f702fe9175f8b8c0e0aa23d1cb1811d80ec8f4954d18761b699b2f000ce215453ac06d40e4ef4a2fcdccb32b7e04abf689f6fcd9b9b618e69bf8aba6998588c1ef17a887ba74359d3737694d49bc910f5a6bf321612ff2ae51d96e3e00ad8a4836696ab0d0566a1bcf63f8306ce95fb4ee76c8497539614a45305d09cd803004d8efbec0f956f2f0848e6739e3cd7edc3d5c93d7bd93fbe584a5ebfa89a13512a5d8277e1a1ba115a1dd575fb7eba0c7644b68edc6895aade4c97543a7348430f30501cb4c55655fe90c41bfd1ebad054665a93e22b3913077adf5b5431d50dc8982f59e8e8a96a61c95e1037ec77358a1377577734442e01fbaac3f94483402bd4a7a0c78ea9af91af6cf987c5dc85f08e39fdc2a3a3238d767fba9888148494d656c03e173267b3df8c89377aaf2cf73662a44957d48add161c425de2e64dbbe204e081fb7c68d6c4ad6cd4d0e355ac55237909cc4628fb6e8ed4891721ffc8e3764654ee057fb31d6306fc9dc26a1b575bb23b238b83fab9f28a40c44518ef172c65ae0797d2db477969633fdba5871bc69ec1ff8b1b3898213171ae702bc36358c70b265eb0464f634546955c9f6dd1818fef3dd6cff86bf27f216f9ac4c3b43b49f9984b8e0934cca35ae59ce4d092325fa3edd5f199c75227569684869f4ce6cf5e4af216e545b4cf53b446fc484062c6fd5cb904349620b4908156567f97df3f0b545221dfecf4332423b596832ff94285af355f849453624a23c7e3b16fd4e61304c4ce7f961cab3a6449abca39ce0694bcabf4fc4c33725014ae4c71ded015c25d7e2fa02bc6a65978720a1d122662827cca240ba203293f0cac9985c0726559c55216747d77315df89af5bd16694d662090fa0767726ec469d06f8dd80c6857f1d5dbc373c4175d3643a6bc10335e95aaa0fb269287b454da0bc8c848ff4844aa4ebfc549625acecb741b52d343a5a96f10676c69487d98b0d229ee28ff033bf00c031ab95f89f4148a519254706dfc77921b92c12a7c69bf8be5e4b98088b5977e1398ec3d2279ec67c99fd95546d79c331c840cfa0ccbab5c2bbfc9b005abbf40e9176b628e7fa1bbe94d0a83a03bfe47c95a680ccaefe52186359a7957b79c7fe0fa259c9222009a9c578415ab625b5e90f6f59777c430e6642274f4e8a93a3043aedb3ab72d16b372cae8ceffc47a5c5425b7eb126800d0e2ea97557179d6e02f03091b14412c5ab9e964dbfa82c073c8b0906fa1bc52e564e586a262141bff1abe11fc0df80aa39a6c38656056fe4dad37f4976572443f61a31de944da6fc951d24095531f48feb752a82f063ad8ce10623330ca919fcbc59217e7c9bc488cba7366481959ccdeda5d6e5221b043a236261a7bcea9db8f9fe4fb48d79d30b911cc743c99a5887e61c315dd6dab60bbbce7306892eff61b961d4f83fabd265dc2686301eb2040012db7d76a60cc2b776bcf2636a224501b60276b6724d12ad5a27b3f0ca78a5a50972384707c19ade24935ee2e886043af43d251946590ee1e78731f223e9983a5d1628e223fd0c4827130983a0912c40ef982ac57dd1056ad29fc30674f9176b7184d75ad95d75eb07d9f0ce8102f0564c12a0da2e80f965b04c582c09e8293a42edcfcd208ec73b2b64209bdedbb2794faf26e5718cc09b29fc214d9b2a281b0014342c7bb6b3cfa704ad78945ffb6c145afb433b2aea236747d18e371f58a0a0371bd46fd14a2a45657cd373565cf15e772cd297bec555f5c987ad59dbe758287ec4839e9c8b9bed0d5c6ed9f49499e52d4217119e235ffc39c9166bd1ab4a0a4179f8c50c0d1e19e62b08e530a753cdcebfdb0f51219b6dbebf12ece0b0fa8b4b59546e8c096235f551202e71674cba9ff193e7fd6577c1607cc9ae961b0ae97a578bba3da902ea59b813b7c0881c578fcb45f264deb648188dc1c25d69a98367bd24ac7e8f98311dcfe22f0870653393673a2afdaf65e82ccf40e872df2ef2be182847035b1662a2cc3288c5300a8cc0c06b488e7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章已加密，请输入密码阅读！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>学习路上的一些记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合框架体系整理（整理完毕！！）</title>
    <link href="/2023/04/14/Java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E4%BD%93%E7%B3%BB/"/>
    <url>/2023/04/14/Java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E4%BD%93%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="集合框架体系"><a href="#集合框架体系" class="headerlink" title="集合框架体系"></a>集合框架体系</h1><h2 id="Collection-单列集合"><a href="#Collection-单列集合" class="headerlink" title="Collection  (单列集合)"></a>Collection  (单列集合)</h2><h3 id="Collection接口实现类的特点"><a href="#Collection接口实现类的特点" class="headerlink" title="Collection接口实现类的特点"></a>Collection接口实现类的特点</h3><ul><li>1.可以存放多个Object类型的元素；</li><li>2.有些可以存放重复元素，有些不行；</li><li>3.有些是有序的（List），有些不是有序的（Set）；</li><li>4.没有直接的实现子类，是通过实现它的子接口Set和List实现的；</li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li>1.List接口是Collection接口的子接口，特点：<ul><li>1)List集合类中的元素有序，即添加顺序和取出顺序一直，且元素可以重复；</li><li>2)List集合类中的元素支持索引，例如list.get(index)，返回的是集合中的第index+1个元素;</li></ul></li><li>2.遍历方式<ul><li>1)Iterator</li><li>2)增强for</li><li>3)普通for（即支持索引）</li></ul></li></ul><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList *"></a>ArrayList *</h4><ul><li>1.List接口的实现类；</li><li>2.可以存放任意类型的数据，包括null；</li><li>3.底层数据存储是由数组实现的；</li><li>4.基本等同于Vector，但是它线程不安全 &#x3D;&gt; 执行效率（源码中没有使用synchronized关键字修饰）；</li><li>5.在多线程情况下，不建议使用ArrayList；</li><li>6.扩容机制<ul><li>1）ArrayList维护了一个Object类型的数组elementData;</li><li>2）创建ArrayList对象时：<ul><li>如果使用的是无参构造器，则初始elementData数组容量为0，第一次添加元素，则扩容elementData数组容量为<strong>10</strong>，如需再次扩容，则扩容原elementData数组容量的<strong>1.5倍</strong>；</li><li>如果使用的是指定大小的构造器，则初始elementData容量为指定大小，如需再次扩容，则扩容原elementData数组容量的<strong>1.5倍</strong>；</li></ul></li></ul></li></ul><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><ul><li><p>1.List接口的实现类</p></li><li><p>2.LinkedList底层实现了双向链表和双端队列的特点：</p><ul><li>1）每个节点都是Node对象；</li><li>2）底层维护了first，last，分别指向链表的首、尾节点；</li><li>3）节点内部维护了prev，next，item三个属性，prev指向前一个节点，next指向后一个节点，实现双向链表；</li></ul></li><li><p>3.可以添加任意类型的元素，包括null，且可以重复；</p></li><li><p>4.线程不安全，没有同步；</p></li><li><p>5.添加和删除操作效率较高（链表的优势）,不涉及到扩容问题；</p></li></ul><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><ul><li><p>1.实现了List接口，并且继承了ArrayList类；</p></li><li><p>2.底层和ArrayList一样维护了一个Object类型的数组，elementData；</p></li><li><p>3.Vector支持线程同步，即线程安全，Vector类的操作方法（如setXXX()，getXXX()方法）带有synchronized关键字修饰；</p></li><li><p>4.扩容机制</p><ul><li><p>创建ArrayList对象时：</p><ul><li>如果使用的是无参构造器，则初始elementData数组容量为0，第一次添加元素，则扩容elementData数组容量为<strong>10</strong>，如需再次扩容，则扩容原elementData数组容量的<strong>2倍</strong>；</li><li>如果使用的是指定大小的构造器，则初始elementData容量为指定大小，如需再次扩容，则扩容原elementData数组容量的<strong>2倍</strong>；</li></ul></li></ul></li></ul><h4 id="ArrayList和LinkedList比较"><a href="#ArrayList和LinkedList比较" class="headerlink" title="ArrayList和LinkedList比较"></a>ArrayList和LinkedList比较</h4><table><thead><tr><th></th><th>底层结构</th><th>增删的效率</th><th>改查的效率</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>较低，数组扩容</td><td>较高</td></tr><tr><td>LinkedList</td><td>双向链表</td><td>较高，链表直接追加</td><td>较低</td></tr></tbody></table><p><strong>上述是比较常用的实现子类，还有很多其他的实现子类；</strong></p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul><li>1.无序（添加和取出顺序不一致），且没有索引（例如：不能使用普通for进行遍历）；<ul><li>添加的顺序与取出顺序不一致，<strong>但是取出的顺序是固定的；</strong></li></ul></li><li>2.不允许有重复元素，因此Set中最多包含一个null值；</li><li>3.JDK API中Set接口的实现类有：<ul><li>HashSet</li><li>TreeSet</li><li>还有很多其他实现类和子接口；</li></ul></li><li>4.遍历方式<ul><li>1)Iterator</li><li>2)增强for</li><li><strong>3)不能使用普通for遍历（即不支持索引）</strong></li></ul></li></ul><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet *"></a>HashSet *</h4><ul><li><p>1.Set接口的实现类；</p></li><li><p>2.HashSet底层实现实际上是一个HashMap；</p></li><li><p>3.不能有重复元素（Set接口的实现类），可以存放null值，但是只能存放一个；</p></li><li><p>4.HashSet不保证元素有序，取决于hash后的索引结果；</p></li><li><p>5.<strong>低层扩容机制</strong>，底层是一个HashMap &#x3D;&gt; <strong>数组+链表+红黑树</strong></p><ul><li><p><strong>HashSet与HashMap的扩容机制不一样的地方：</strong></p><ul><li><strong>HashSet在add元素时，传入的key是待添加元素，而value是一个常量值，遍历HashSet时，HashSet的迭代器返回的是keySet的迭代器，因此仅遍历key；</strong></li><li><strong>HashMap在add元素时，传入的是一个程序员自定义的键值对；</strong></li></ul></li><li><p>1）添加一个元素时，先通过hash算法得到hash值，通过<strong>某个</strong>算法转成索引值；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//hash()方法，获得hash值</span><br><span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br><br><span class="hljs-comment">//“某个算法”即i = (n - 1) &amp; hash  实现：hash值 ==&gt; table的索引值</span><br>tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]<br></code></pre></td></tr></table></figure></li><li><p>2）找到存储数据表table，检查该索引位置是否已经存放有元素：</p><ul><li>若没有元素，直接加入；</li><li>若有元素，调用equals()方法进行比较，如果相同则放弃添加，如果不相同则添加到链表最后；</li></ul></li><li><p>3）在Java8中，如果一条链表的元素个数 &gt;&#x3D; TREEIFY_THRESHOLD值（默认值是8），<strong>并且</strong>table的大小 &gt;&#x3D; MIN_TREEIFY_CAPACITY值(默认值是64)时，会将该链表转化为一颗红黑树；</p></li><li><p>4）若仅该链表元素个数 &gt; 8，而table的大小仍 &lt; 64时，先对table数组进行扩容；</p><ul><li><strong>table数组扩容机制</strong>：</li><li>（1）HashMap初始化时设定了一个loadFactor值，默认初始为0.75；</li><li>（2）table的容量默认初始为16；</li><li>（3）当table中的元素个数(包括链表中的节点) &gt; 阈值（即threshold值，此时为16 * 0.75&#x3D;12）时，table容量扩大为原来的2倍，阈值threshold为 loadFactor * table的容量；</li><li>（4）数组扩容后，元素的位置也会进行重新分布(具体见源码中的resize()方法)；</li></ul></li></ul></li></ul><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><ul><li>1.HashSet的子类；</li><li>2.底层是一个<strong>LinkedHashMap</strong>（HashMap的子类），底层维护了一个<strong>数组+双向链表</strong>；</li><li>3.根据元素的<strong>hashCode值</strong>来决定元素的存储位置，同时使用链表维护元素的次序，即<strong>加入顺序和取出顺序一致</strong>；</li><li>4.不允许插入重复元素；</li></ul><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><ul><li>1.Set接口的实现类；</li><li>2.底层是TreeMap；</li><li>3.通过构造函数创建TreeSet对象时，可以传入一个比较器进行排序：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeSet01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//TreeSet源码分析</span><br><br>        <span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>();<span class="hljs-comment">//无参构造器，不排序</span><br><br>        treeSet.add(<span class="hljs-string">&quot;a345bc&quot;</span>);<br>        treeSet.add(<span class="hljs-string">&quot;46bsd&quot;</span>);<br>        treeSet.add(<span class="hljs-string">&quot;f23&quot;</span>);<br>        treeSet.add(<span class="hljs-string">&quot;12t&quot;</span>);<br><br>        System.out.println(treeSet);<br><br>        <span class="hljs-comment">//TreeSet最大的特点就是，排序</span><br>        <span class="hljs-comment">//在初始化时，使用TreeSet提供的一个构造器，可以传入一个比较器（匿名内部类）</span><br><br>        <span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeSet1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> ((String) o1).compareTo((String) o2);<span class="hljs-comment">//字典序</span><br>            &#125;<br>        &#125;);<br><br>        treeSet1.add(<span class="hljs-string">&quot;bhy&quot;</span>);<br>        treeSet1.add(<span class="hljs-string">&quot;7hy&quot;</span>);<br>        treeSet1.add(<span class="hljs-string">&quot;why&quot;</span>);<br>        treeSet1.add(<span class="hljs-string">&quot;ahy&quot;</span>);<br><br>        System.out.println(treeSet1);<br><br><br>        <span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeSet2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> ((String)o1).length() - ((String)o2).length();<span class="hljs-comment">//字符串长度进行比较</span><br>            &#125;<br>        &#125;);<br><br>        treeSet2.add(<span class="hljs-string">&quot;bhy&quot;</span>);<br>        treeSet2.add(<span class="hljs-string">&quot;7hy&quot;</span>);<br>        treeSet2.add(<span class="hljs-string">&quot;why&quot;</span>);<br>        treeSet2.add(<span class="hljs-string">&quot;ahy&quot;</span>);<br>        <span class="hljs-comment">//由于长度都为3，因此根据比较规则，后面三个元素判断为与第一个元素重复，添加失败</span><br><br>        System.out.println(treeSet2);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Map（双列集合）"><a href="#Map（双列集合）" class="headerlink" title="Map（双列集合）"></a>Map（双列集合）</h2><h3 id="Map接口实现类的特点"><a href="#Map接口实现类的特点" class="headerlink" title="Map接口实现类的特点"></a>Map接口实现类的特点</h3><ul><li>1.用于保存具有映射关系的数据：key-value（即双列元素）;</li><li>2.Map中的key和value可以是<strong>任意引用类型（Object类型）</strong>，会封装到HashMap$Node对象中；</li><li>3.Map中的key不允许重复，原因和HashSet（本质是HashMap）一致：<ul><li>key相同时，后面加入的元素的value值会进行覆盖原value值；</li><li>key不同时，value允许相同；</li><li>key和value可以为null，主要注意的是，Map中只能有一个元素的key为null，但可以有多个value为null；</li></ul></li><li>4.常用String来作为key值；</li><li>5.key和value之间是一对一关系，即通过特定的key可以找到对应的value；</li><li>6.六种遍历方式，Map的遍历主要通过获取keySet，entrySet，values并分别使用<strong>迭代器或者增强for（原理也是迭代器）</strong>来实现；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">1</span>));<br>map.put(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">2</span>));<br>map.put(<span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">3</span>));<br>map.put(<span class="hljs-number">4</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-number">4000</span>, <span class="hljs-number">4</span>));<br>map.put(<span class="hljs-number">5</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-number">5000</span>, <span class="hljs-number">5</span>));<br>map.put(<span class="hljs-number">6</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-number">6000</span>, <span class="hljs-number">6</span>));<br><br><span class="hljs-comment">//1.获取keySet</span><br><span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> map.keySet();<br><br><span class="hljs-comment">//增强for遍历</span><br><span class="hljs-keyword">for</span> (Object key : set) &#123;<br>    System.out.println(key + <span class="hljs-string">&quot;-&quot;</span> + map.get(key));<br>&#125;<br><br><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> set.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>    System.out.println(next + <span class="hljs-string">&quot;-&quot;</span> + map.get(next));<br>&#125;<br><br><span class="hljs-comment">//2.获取values</span><br><span class="hljs-type">Collection</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> map.values();<br><br><span class="hljs-comment">//增强for</span><br><span class="hljs-keyword">for</span> (Object o : values) &#123;<br>    System.out.println(o);<br>&#125;<br><br><span class="hljs-comment">//迭代器</span><br><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator1</span> <span class="hljs-operator">=</span> values.iterator();<br><span class="hljs-keyword">while</span> (iterator1.hasNext()) &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator1.next();<br>    System.out.println(next);<br>&#125;<br><br><span class="hljs-comment">//3.获取entrySet</span><br><span class="hljs-type">Set</span> <span class="hljs-variable">set1</span> <span class="hljs-operator">=</span> map.entrySet();<br><br><span class="hljs-comment">//增强for</span><br><span class="hljs-keyword">for</span> (Object o : set1) &#123;<br>    Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> (Map.Entry) o;<br>    System.out.println(entry.getKey() + <span class="hljs-string">&quot;-&quot;</span> + entry.getValue());<br>&#125;<br><br><span class="hljs-comment">//迭代器</span><br><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator2</span> <span class="hljs-operator">=</span> set1.iterator();<br><span class="hljs-keyword">while</span> (iterator2.hasNext()) &#123;<br>    Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> (Map.Entry)iterator2.next();<br>    System.out.println(next.getKey() + <span class="hljs-string">&quot;-&quot;</span> + next.getValue());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap *"></a>HashMap *</h4><ul><li><p>1.Map接口的实现类，使用频率最高；</p></li><li><p>2.数据以键值对（key-value）的形式存储，key和value是Object类型；</p></li><li><p>3.HashMap没有实现同步，因此是线程不安全的，没有synchronized关键字；</p></li><li><p>4.底层机制：</p><ul><li>1）键值对（key-value）是一个Node类，Node类实现了Map.Entry&lt;K, V&gt;接口；</li><li>2）JDK7.0中，HashMap底层实现是数组+链表；JDK8.0中，HashMap底层实现是数组+链表+红黑树；</li></ul></li><li><p>5.扩容机制</p><ul><li><strong>HashSet与HashMap的扩容机制不一样的地方：</strong><ul><li>1）HashSet在add元素时，传入的key是待添加元素，而<strong>value是一个常量值</strong>；</li><li>2）HashMap在add元素时，传入的是一个程序员<strong>自定义的Object类型的键值对（key-value）</strong>，若add操作时，key发生冲突，则用<strong>待添加元素的value</strong>替换<strong>HashMap中相应位置元素的value</strong>；</li></ul></li></ul></li></ul><h4 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h4><ul><li><p>1.Map接口的实现类；</p></li><li><p>2.存放的元素是键值对（key-value）；</p></li><li><p><strong>3.Hashtable的键和值都不能为null；</strong></p></li><li><p>4.使用方法和HashMap基本一样；</p></li><li><p>5.<strong>Hashtable是线程安全的</strong>，而HashMap是线程不安全的，因此，<strong>Hashtable效率低于HashMap</strong>;</p></li><li><p>6.扩容机制：<strong>原容量的2倍+1</strong></p><ul><li>1）通过hashCode()得到hash值，再通过某种算法得到索引值；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获得hash值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> key.hashCode();<br><span class="hljs-comment">//获得索引值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;<br></code></pre></td></tr></table></figure><ul><li><p>2）在存储数据的表table中，检查该索引位置是否已经存放有元素：</p><ul><li>若没有元素，直接调用addEntry()添加元素；</li><li>若有元素，即发生冲突，调用equals()方法进行对key进行比较，如果相同则将原value替换为当前value；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//源码分析</span><br><span class="hljs-comment">//put()方法中，若冲突，则替换value；</span><br><span class="hljs-keyword">for</span>(; entry != <span class="hljs-literal">null</span> ; entry = entry.next) &#123;<br>    <span class="hljs-keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;<br>        <span class="hljs-type">V</span> <span class="hljs-variable">old</span> <span class="hljs-operator">=</span> entry.value;<br>        entry.value = value;<br>        <span class="hljs-keyword">return</span> old;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>3）若Hashtable中的节点（Hashtable中的节点是Entry类型）数量 &gt;&#x3D; table表的阈值(threshold)则进行扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//源码分析</span><br><span class="hljs-comment">//addEntry()方法中的部分代码</span><br><span class="hljs-keyword">if</span> (count &gt;= threshold) &#123;<br>    <span class="hljs-comment">// Rehash the table if the threshold is exceeded</span><br>    rehash();<span class="hljs-comment">//这里实现扩容</span><br><br>    tab = table;<br>    hash = key.hashCode();<br>    index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;<br>&#125;<br><br><span class="hljs-comment">//rehash()方法中的部分代码：</span><br><span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> table.length;<br>Entry&lt;?,?&gt;[] oldMap = table;<br><br><span class="hljs-comment">// overflow-conscious code</span><br><span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> (oldCapacity &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<span class="hljs-comment">//原容量2倍+1</span><br></code></pre></td></tr></table></figure></li><li><p><strong>4）Hashtable不会树化；</strong></p></li></ul></li></ul><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><ul><li>1.底层是HashMap实现；</li></ul><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><ul><li>1.TreeMap，HashMap都继承自AbstractMap，因此两者很多具体方法实现都大同小异；</li><li>2.TreeSet的底层是TreeMap，<strong>两者的区别</strong>是：<ul><li>TreeSet在add元素时，key是待添加的元素的值，value是常量；</li><li>TreeMap在add元素时，key是待添加元素的键，value是待添加元素的值;</li></ul></li><li>3.HashMap底层通过调用equals()方法判断key是否冲突，而TreeMap则通过调用比较器中定义的比较规则进行判断key是否冲突。<ul><li>TreeMap与HashMap在发生key冲突时，均会将待添加元素的value替换冲突位置元素的value；</li><li>若给TreeMap添加一个自定义类时，如map.put(new Person(), “asasa”)，由于自定义类没有实现Comparable接口的comparaTo方法，因此会报错；</li></ul></li><li>4.源码分析与TreeSet处一致；</li></ul><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><ul><li>1.Properties继承自Hashtable类，并且实现了Map接口，也是使用一种键值对的形式来保存数据；</li><li>2.Properties还可以用于从  <strong>外部xx.properties文件</strong> 中加载数据到 <strong>Properties类对象</strong> ，并且进行读取和修改；</li><li>3.使用特点与Hashtable类似；</li></ul><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><ul><li>1.Collections是一个操作Set、List和Map等集合的工具类；</li><li>2.Collections中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作；</li><li>3.常用的方法介绍：<ul><li>排序操作<ul><li>reverse(List)：反转List中元素的顺序；</li><li>shuffle(List)：对List集合中的元素进行随机排序；</li><li>sort(List)：根据元素的自然顺序对指定的List集合元素按升序排序；</li><li>sort(List, Comparator)：根据指定的Comparator产生的顺序对List集合元素进行排序；</li><li>swap(List, int, int)：将指定List集合中的 i 处元素和 j 元素进行交换；</li></ul></li><li>查找、替换操作<ul><li>Object max(Collecton)：根据元素自然顺序，返回给定集合中的最大元素；</li><li>Object max(Collection, Comparator)：根据Comparator指定的顺序，返回给定集合中的最大元素；</li><li>Object min(Collection)：同理，max;</li><li>Object min(Collection, Comparator)：同理，max;</li><li>int frequency(Collection, Object)：返回指定集合中指定元素的出现次数；</li><li>void copy(List dest, List src)：将集合src中的内容复制到集合dest中；</li><li>boolean replaceAll(List list, Object oldValue, Object newVal)：使用新值替换List集合中的所有旧值；</li></ul></li></ul></li></ul><h2 id="集合选型规则"><a href="#集合选型规则" class="headerlink" title="集合选型规则"></a>集合选型规则</h2><ul><li>选择什么集合实现类，主要取决于业务操作特点，根据集合实现类的特性选择。</li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li><p>1）先判断数据存储类型：</p><ul><li>一组对象 &#x3D;&gt; 单列集合Collection</li><li>一组键值对 &#x3D;&gt; 双列集合Map</li></ul></li><li><p>2）若是一组对象，即单列集合Collection，判断是否允许重复：</p><ul><li>允许重复 &#x3D;&gt; List<ul><li>增删多：LinkedList，底层维护了双向链表；</li><li>改查多：ArrayList， 底层维护了Object类型的可变数组；</li></ul></li><li>不允许重复 &#x3D;&gt; Set<ul><li>无序：HashSet，底层是HashMap实现，即数组+链表+红黑树；</li><li>排序：TreeSet，</li><li>插入顺序和取出顺序一致：LinkedHashSet，数组+双向链表，底层使用LinkedHashMap实现，而LinkedHashMap的底层是HashMap实现的；</li></ul></li></ul></li><li><p>3）若是一组键值对，即双列集合Map：</p><ul><li>键(value)无序：HashMap；</li><li>键(value)排序：TreeMap</li><li>键(value)插入顺序和取出顺序一致：LinkedHashMap，底层使用HashMap实现；</li><li>读取文件：Properties</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>集合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-transient关键字</title>
    <link href="/2023/04/14/Java-transient%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2023/04/14/Java-transient%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-transient关键字"><a href="#Java-transient关键字" class="headerlink" title="Java-transient关键字"></a>Java-transient关键字</h1><ul><li><p>1.在 Java 中，<code>transient</code> 是一个关键字，用于修饰类的成员变量，表示该变量不参与序列化过程。</p></li><li><p>2.在 Java 中，当需要将一个对象序列化为字节流并在网络或者文件中传输时，会使用 <code>ObjectOutputStream</code> 进行序列化操作。而 <code>transient</code> 关键字可以用来控制序列化过程中哪些成员变量需要被序列化，哪些成员变量不需要被序列化。</p></li><li><p>3.具体来说，被 <code>transient</code> 修饰的变量，当对象被序列化时，这个变量的值不会被写入到序列化输出流中；而当对象被反序列化时，这个变量的值会被默认初始化，也就是赋予该变量类型的默认值。</p></li><li><p>4.使用 <code>transient</code> 的场景通常是当某个成员变量不应该被序列化时，例如一些敏感信息、临时计算结果等，这些信息不需要被存储在序列化的字节流中。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>一些知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-JUnit单元测试框架</title>
    <link href="/2023/04/14/Java-JUnit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <url>/2023/04/14/Java-JUnit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-JUnit单元测试框架"><a href="#Java-JUnit单元测试框架" class="headerlink" title="Java-JUnit单元测试框架"></a>Java-JUnit单元测试框架</h1><h3 id="为什么需要JUnit？"><a href="#为什么需要JUnit？" class="headerlink" title="为什么需要JUnit？"></a>为什么需要JUnit？</h3><ul><li>一个类有很多功能代码需要测试，为了测试，需要写入到main方法中来运行，如果有很多个功能代码测试，就需要来回注销代码进行切换，比较麻烦；</li></ul><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li><p>1.JUnit是一个Java语言的单元测试框架；</p></li><li><p>2.多数Java开发环境都已经集成了JUnit作为单元测试的工具；</p></li><li><p>3.案例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JUnit01</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//可以单独测试某一段功能代码</span><br>        System.out.println(<span class="hljs-string">&quot;m1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;m2&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>一些知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-将基本数据类型封装成包装类的好处</title>
    <link href="/2023/04/14/Java-%E5%B0%86%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%B0%81%E8%A3%85%E6%88%90%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E5%A5%BD%E5%A4%84/"/>
    <url>/2023/04/14/Java-%E5%B0%86%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%B0%81%E8%A3%85%E6%88%90%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E5%A5%BD%E5%A4%84/</url>
    
    <content type="html"><![CDATA[<h2 id="将基本数据类型封装成包装类的好处"><a href="#将基本数据类型封装成包装类的好处" class="headerlink" title="将基本数据类型封装成包装类的好处"></a>将基本数据类型封装成包装类的好处</h2><ul><li>1.可以赋null值，有些地方需要赋null，但是基本数据类型不能赋null；</li></ul><ul><li><pre><code class="hljs"> 2.有缓存机制。例如Integer缓存了-128~127区间的数值；</code></pre></li><li><pre><code class="hljs"> 3.集合中只能存放Object及其子类 类型的数据，不能存放基本数据类型；</code></pre></li><li><pre><code class="hljs"> 可能还有其它的；</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>一些知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Wrapper类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-接口中的成员</title>
    <link href="/2023/04/14/Java-%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84%E6%88%90%E5%91%98/"/>
    <url>/2023/04/14/Java-%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84%E6%88%90%E5%91%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-接口中的成员"><a href="#Java-接口中的成员" class="headerlink" title="Java-接口中的成员"></a>Java-接口中的成员</h1><ul><li><p>静态常量</p><ul><li>默认使用 “public static final” 关键字修饰（可以省略，默认是这样）的成员变量，如int a &#x3D; 10；</li><li>是静态的；</li></ul></li><li><p>抽象方法</p><ul><li>使用 “public abstract” 关键字修饰的方法；</li><li>是动态绑定的：方法的具体实现由实现接口的类提供；</li></ul></li><li><p>默认方法</p><ul><li>使用 “default” 关键字修饰的方法；</li><li>是实例方法，有具体实现，不是静态的；</li></ul></li><li><p>静态方法</p><ul><li>使用 “static” 关键字修饰的方法；</li><li>是静态的；</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>一些知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-运算符总结</title>
    <link href="/2023/04/14/Java-%E8%BF%90%E7%AE%97%E7%AC%A6%E6%80%BB%E7%BB%93/"/>
    <url>/2023/04/14/Java-%E8%BF%90%E7%AE%97%E7%AC%A6%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-运算符总结"><a href="#Java-运算符总结" class="headerlink" title="Java-运算符总结"></a>Java-运算符总结</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加法</td></tr><tr><td>-</td><td>减法</td></tr><tr><td>*</td><td>乘法</td></tr><tr><td>&#x2F;</td><td>除法</td></tr><tr><td>%</td><td>取余</td></tr><tr><td>++</td><td>自增</td></tr><tr><td>–</td><td>自减</td></tr></tbody></table><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于</td></tr><tr><td>!&#x3D;</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr></tbody></table><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与，（5&amp;6） &#x3D;&#x3D;&gt; (0101 &amp; 0110) &#x3D;&#x3D;&gt; 4</td></tr><tr><td>|</td><td>按位或，（5|6） &#x3D;&#x3D;&gt; (0101 | 0110) &#x3D;&#x3D;&gt; 0111 &#x3D;&#x3D;&#x3D;&gt; 7</td></tr><tr><td>^</td><td>按位异或，（5^6） &#x3D;&#x3D;&gt; (0101 ^ 0110) &#x3D;&#x3D;&gt; 0011 &#x3D;&#x3D;&gt; 3</td></tr><tr><td>~</td><td>按位取反，（~5） &#x3D;&#x3D;&gt; 0101 &#x3D;&#x3D;&gt; 1010(负数的补码转换成原码，按位取反加一) &#x3D;&#x3D;&gt; -6</td></tr><tr><td>&lt;&lt;</td><td>按位左移，5&lt;&lt;2  &#x3D;&#x3D;&gt; 0101 &gt;&gt; 2 &#x3D;&#x3D;&gt;010100 &#x3D;&#x3D;&gt; 20</td></tr><tr><td>&gt;&gt;</td><td>按位右移，5&gt;&gt;2  &#x3D;&#x3D;&gt; 0101 &gt;&gt; 2 &#x3D;&#x3D;&gt; 1</td></tr><tr><td>&gt;&gt;&gt;</td><td>按位右移补零，5&gt;&gt;&gt;2  &#x3D;&#x3D;&gt; 0101 &gt;&gt;&gt; 2 &#x3D;&#x3D;&gt;0001 &#x3D;&#x3D;&gt; 1</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>||</td><td>逻辑或</td></tr><tr><td>!</td><td>逻辑非</td></tr></tbody></table><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;</td><td>简单的赋值</td></tr><tr><td>+&#x3D;</td><td>加和赋值，A +&#x3D; B &#x3D;&#x3D;&#x3D;&gt; A &#x3D; A + B</td></tr><tr><td>-&#x3D;</td><td>减和赋值</td></tr><tr><td>*&#x3D;</td><td>乘和赋值</td></tr><tr><td>&#x2F;&#x3D;</td><td>除和赋值</td></tr><tr><td>%&#x3D;</td><td>取模和赋值，A%B &#x3D;&#x3D;&#x3D;&gt; A &#x3D; A % B</td></tr><tr><td>&lt;&lt;&#x3D;</td><td>左移位赋值，A&lt;&lt;&#x3D;2 &#x3D;&#x3D;&#x3D;&gt; A &#x3D; A&lt;&lt;2</td></tr><tr><td>&gt;&gt;&#x3D;</td><td>右移位赋值</td></tr><tr><td>&amp;&#x3D;</td><td>按位与赋值</td></tr><tr><td>^&#x3D;</td><td>按位异或赋值</td></tr><tr><td>|</td><td>按位或赋值</td></tr></tbody></table><h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>?  :</td><td>三元运算符</td></tr><tr><td>instanceof</td><td>用于操作对象实例，检查该对象是否是一个特定的类型（类类型或累接口）</td></tr></tbody></table><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>表中，自上而下优先级依次降低。</p><table><thead><tr><th>类别</th><th>操作符</th><th>运算顺序</th></tr></thead><tbody><tr><td>后缀</td><td>()、 []、 .(点操作符)</td><td>自左向右</td></tr><tr><td>一元</td><td>a++、a–</td><td>自左向右</td></tr><tr><td>一元</td><td>++a、–a、+、-、~、!</td><td>自右向左</td></tr><tr><td>乘 除 取模</td><td>*、&#x2F;、%</td><td>自左向右</td></tr><tr><td>加 减</td><td>+、-</td><td>自左向右</td></tr><tr><td>移位</td><td>&gt;&gt;、&gt;&gt;&gt;、&lt;&lt;</td><td>自左向右</td></tr><tr><td>关系</td><td>&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;</td><td>自左向右</td></tr><tr><td>相等</td><td>&#x3D;&#x3D;、!&#x3D;</td><td>自左向右</td></tr><tr><td>按位与</td><td>&amp;</td><td>自左向右</td></tr><tr><td>按位异或</td><td>^</td><td>自左向右</td></tr><tr><td>按位或</td><td>|</td><td>自左向右</td></tr><tr><td>逻辑与</td><td>&amp;&amp;</td><td>自左向右</td></tr><tr><td>逻辑或</td><td>||</td><td>自左向右</td></tr><tr><td>条件</td><td>? :</td><td>自右向左</td></tr><tr><td>赋值</td><td>&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;、&gt;&gt;&#x3D;、&lt;&lt;&#x3D;、&amp;&#x3D;、|&#x3D;、^&#x3D;、、</td><td>自右向左</td></tr><tr><td>逗号</td><td>,</td><td>自左向右</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>一些知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-线程的使用</title>
    <link href="/2023/04/14/Java-%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/04/14/Java-%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-线程的使用"><a href="#Java-线程的使用" class="headerlink" title="Java-线程的使用"></a>Java-线程的使用</h1><h2 id="一、创建线程"><a href="#一、创建线程" class="headerlink" title="一、创建线程"></a>一、创建线程</h2><h3 id="方式一：继承Thread类，重写run方法；"><a href="#方式一：继承Thread类，重写run方法；" class="headerlink" title="方式一：继承Thread类，重写run方法；"></a>方式一：继承Thread类，重写run方法；</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<span class="hljs-comment">//继承Thread类</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//重写run方法，实现自己的业务逻辑</span><br>        <span class="hljs-comment">//super.run();</span><br>        <span class="hljs-comment">//父类Thread类实现了Runnable接口中的run方法</span><br>        System.out.println(<span class="hljs-string">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(count&lt;=<span class="hljs-number">80</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;喵喵，我是小猫咪。====&quot;</span> + count);<br>            count++;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread02</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *  1.Thread.java程序运行起来后，就是一个进程；</span><br><span class="hljs-comment">         *  2.进程先启动main线程;</span><br><span class="hljs-comment">         *  3.main线程中又启动了一个新的子线程cat：</span><br><span class="hljs-comment">         *      1）子线程cat运行的同时 ，main线程也在继续往下执行;</span><br><span class="hljs-comment">         *  4.当主线程结束后：</span><br><span class="hljs-comment">         *      1）若还有子线程在运行，进程不会结束；</span><br><span class="hljs-comment">         *      2）只有当所有线程都结束后，进程才会结束；</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        cat.start();<span class="hljs-comment">//启动一个线程</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;main线程执行====&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="方式二：实现Runnable接口，重写run方法；"><a href="#方式二：实现Runnable接口，重写run方法；" class="headerlink" title="方式二：实现Runnable接口，重写run方法；"></a>方式二：实现Runnable接口，重写run方法；</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(count &lt; <span class="hljs-number">10</span>)&#123;<br>            count++;<br>            System.out.println(<span class="hljs-string">&quot;hi == &quot;</span> + count);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread03</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(a).start();<br>        <span class="hljs-comment">//使用了设计模式中的代理模式，Thread相当于一个代理，Runnable接口中没有start()方法；</span><br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;等价于这样！&quot;</span>);<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="问题：为什么启动线程是调用start-，而不是直接调用run-方法；"><a href="#问题：为什么启动线程是调用start-，而不是直接调用run-方法；" class="headerlink" title="问题：为什么启动线程是调用start()，而不是直接调用run()方法；"></a>问题：为什么启动线程是调用start()，而不是直接调用run()方法；</h4><ul><li>1.直接在main线程中调用run()方法将不会创建新的子线程，可以通过打印线程名称证明；</li><li>2.start()方法实现原理：</li></ul><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/Thread_start0.jpg?raw=true"></p><ul><li>3.在JVM中，start()方法调用了start0()方法，start0()方法在不同的操作系统中有不同的实现（底层是C&#x2F;C++实现的）；</li><li>4.因此，真正实现多线程的是start0()方法，而不是start()；</li></ul><h3 id="两种方式的区别"><a href="#两种方式的区别" class="headerlink" title="两种方式的区别"></a>两种方式的区别</h3><ul><li><p>没有本质上的区别；</p></li><li><p>实现Runnable接口方式：</p><ul><li>更适合多个线程共享同一个资源的情况；（即让多个线程执行同一个run方法）</li><li>避免了单继承的限制（如果继承了Thread类就不能再去继承其他类了）；</li></ul></li><li><p>因此建议使用实现Runnable接口方式来创建线程。</p></li><li><p><strong>线程类（即继承了Thread的类）中所有的变量和常量都是线程共享的</strong>。为了不导致线程安全问题，应该避免修改这些共享的变量，或者使用synchronized关键字等方案来保证线程安全。</p></li></ul><h2 id="二、终止线程"><a href="#二、终止线程" class="headerlink" title="二、终止线程"></a>二、终止线程</h2><h3 id="两种情况"><a href="#两种情况" class="headerlink" title="两种情况"></a>两种情况</h3><ul><li>情况1：当线程完成任务后，会自动退出；</li><li>情况2：使用变量来控制run()方法退出，从而终止线程，即通知方式；</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 需求：启动一个线程t, 要求在main线程中去停止线程t;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//控制run()方法退出的变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(loop) &#123;<br>            System.out.println(<span class="hljs-string">&quot;线程: &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;执行中。。。&quot;</span> + <span class="hljs-string">&quot;====&quot;</span> + (++n));<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoop</span><span class="hljs-params">(<span class="hljs-type">boolean</span> loop)</span> &#123;<span class="hljs-comment">//对外提供set方法，改变loop的值，从而控制run方法退出</span><br>        <span class="hljs-built_in">this</span>.loop = loop;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_stop01</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 需求：启动一个线程t, 要求在main线程中去停止线程t;</span><br><span class="hljs-comment">     * 思路：使用变量控制run()方法退出；</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(a);<br>        t.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;线程: &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;执行中。。。&quot;</span> + <span class="hljs-string">&quot;====&quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">50</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">14</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        a.setLoop(<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、线程常用方法"><a href="#三、线程常用方法" class="headerlink" title="三、线程常用方法"></a>三、线程常用方法</h2><h3 id="第一组"><a href="#第一组" class="headerlink" title="第一组"></a>第一组</h3><ul><li>**setName() ** ：设置线程名称；</li><li>**getName() ** ：返回线程名称；</li><li>**start() ** ：启动线程，JVM调用该线程的start0()方法；</li><li>**run() ** ：&#x2F;&#x2F;调用线程类对象的run()方法；</li><li>**setPriority() ** ：更改线程的优先级；</li><li>**getPriority() ** ：返回线程的优先级；</li><li>**sleep() ** ：使当前正在执行的线程暂停执行（休眠）一定毫秒数；</li><li>**interrupt() ** ：中断线程；</li></ul><h3 id="第二组"><a href="#第二组" class="headerlink" title="第二组"></a>第二组</h3><ul><li><p>**yield() ** ：线程的“礼让”，该线程“礼让”其他线程先执行；</p></li><li><p>但是，礼让的时间不确定，因此也不一定成功；（比如CPU资源并不紧张时，可以进行兼顾，则不会礼让）</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>当一个线程调用 <span class="hljs-keyword">yield</span>() 方法时，它会释放 CPU 资源，并将自己置于就绪状态，让系统调度器重新选择一个线程来执行。<br><span class="hljs-number">2.</span>如果没有其他线程处于就绪状态，那么当前线程将继续执行。<br><span class="hljs-number">3.</span>如果有其他线程处于就绪状态，那么系统调度器将会选择其中一个线程来执行，而当前线程则重新进入就绪状态，等待下一次被系统调度器选择执行。<br><span class="hljs-number">4.</span>需要注意的是，调用 <span class="hljs-keyword">yield</span>() 方法并不会让线程进入阻塞状态，因此它不会释放锁或者资源。此外，<span class="hljs-keyword">yield</span>() 方法也不能保证当前线程被重新选择执行的机会，因为它只是一种建议，而不是强制性的要求。<br></code></pre></td></tr></table></figure><ul><li><p>**join() ** ：线程的插队；</p></li><li><p>插队的线程，一旦插队成功，则肯定先执行完插入线程的所有任务；</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">下面是 join() 方法的执行过程：<br><br>当线程 A 调用线程 B 的 join() 方法时，线程 A 将会进入阻塞状态，并等待线程 B 终止。<br><span class="hljs-number">1.</span>如果线程 B 已经终止了，那么线程 A 将会从阻塞状态中恢复，并继续执行下去。<br><span class="hljs-number">2.</span>如果线程 B 没有终止，那么线程 A 将会等待，直到线程 B 终止或者等待的时间到达指定的毫秒数。<br><span class="hljs-number">3.</span>如果线程 B 终止了，那么线程 A 将会从阻塞状态中恢复，并继续执行下去。<br><span class="hljs-number">4.</span>如果线程 B 没有在指定的时间内终止，那么线程 A 将会从阻塞状态中恢复，并继续执行下去。<br><br>    需要注意的是，当线程 A 调用线程 B 的 join() 方法时，如果线程 B 没有启动，那么线程 A 将会一直阻塞，直到线程 B 启动并终止。<br>    此外， join() 方法也可以带一个参数，用于指定线程等待的时间，如果线程 B 在等待的时间内没有终止，那么线程 A 将会从阻塞状态中恢复，并继续执行下去。<br></code></pre></td></tr></table></figure><h3 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h3><ul><li><p><strong>用户线程</strong></p><ul><li>也叫工作线程，当线程的任务执行完成时结束或者以通知方式结束；</li></ul></li><li><p><strong>守护线程</strong></p><ul><li>一般是为工作线程服务的，当所有的用户线程结束，守护线程自动结束；</li><li>最常见的守护线程：垃圾回收机制；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将一个线程设置为守护线程</span><br><span class="hljs-type">MyDeamonThread</span> <span class="hljs-variable">myDeamonThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDeamonThread</span>();<br><span class="hljs-comment">//设置为守护线程，再启动</span><br>myDeamonThread.setDaemon(<span class="hljs-literal">true</span>);<br>myDeamonThread.start();<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-线程概述</title>
    <link href="/2023/04/14/Java-%E7%BA%BF%E7%A8%8B%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/04/14/Java-%E7%BA%BF%E7%A8%8B%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-线程概述"><a href="#Java-线程概述" class="headerlink" title="Java-线程概述"></a>Java-线程概述</h1><h2 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h2><h3 id="程序（Program）"><a href="#程序（Program）" class="headerlink" title="程序（Program）"></a>程序（Program）</h3><ul><li>完成特定任务，用某种语言编写的一组指令的集合；</li></ul><h3 id="进程（Process）"><a href="#进程（Process）" class="headerlink" title="进程（Process）"></a>进程（Process）</h3><ul><li><strong>运行中的程序</strong>；</li><li>比如使用QQ程序，就是启动了一个进程：<ul><li>操作系统会为进程分配内存空间；</li></ul></li><li>进程是程序的一次运行过程，或一个正在运行的程序。</li><li>进程是一个动态过程，有它自身的产生、存在以及消亡的过程。</li></ul><h3 id="线程（Thread）"><a href="#线程（Thread）" class="headerlink" title="线程（Thread）"></a>线程（Thread）</h3><ul><li><p><strong>线程</strong>：是由进程（也可以由线程创建线程）创建的，是进程的一个实体；</p><ul><li>一个进程可以有多个线程；</li></ul></li><li><p><strong>单线程</strong>：同一时刻，只允许执行一个线程；</p></li><li><p><strong>多线程</strong>：同一时刻，可以执行多个线程；</p><ul><li>比如，一个QQ进程，可以打开多个聊天窗口；</li><li>一个迅雷进程，可以同时（并发&#x2F;并行）下载多个文件；</li></ul></li><li><p><strong>并发</strong>：同一个时刻，多个任务交替执行；</p><ul><li>单核cpu实现的多任务，是并发；</li></ul></li><li><p><strong>并行</strong>：同一个时刻，多个任务同时执行；</p><ul><li>多核cpu实现多任务，可以并行；</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-线程同步机制（synchronized关键字）</title>
    <link href="/2023/04/14/Java-%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6%EF%BC%88synchronized%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%89/"/>
    <url>/2023/04/14/Java-%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6%EF%BC%88synchronized%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-线程同步机制（synchronized关键字）"><a href="#Java-线程同步机制（synchronized关键字）" class="headerlink" title="Java-线程同步机制（synchronized关键字）"></a>Java-线程同步机制（synchronized关键字）</h1><ul><li>线程同步：在多线程编程中，一些敏感数据不允许被多个线程同时访问，此时就使用同步访问技术，保证：数据在任何时刻，最多有一个线程访问，以保证数据的完整性。</li><li>理解：即当有一个线程在对某个内存地址进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作，其他线程才能对该内存地址进行操作。</li></ul><h3 id="线程同步的实现方法（synchronized关键字）"><a href="#线程同步的实现方法（synchronized关键字）" class="headerlink" title="线程同步的实现方法（synchronized关键字）"></a>线程同步的实现方法（synchronized关键字）</h3><h4 id="1-同步代码块"><a href="#1-同步代码块" class="headerlink" title="1.同步代码块"></a>1.同步代码块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (对象)&#123;<span class="hljs-comment">//得到对象的锁，才能操作同步代码</span><br>    <span class="hljs-comment">//需要被同步的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-同步方法"><a href="#2-同步方法" class="headerlink" title="2.同步方法"></a>2.同步方法</h4><ul><li>synchronized关键字放在方法的声明中，表示整个方法为同步方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//例如：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(String name)</span>&#123;<br>    <span class="hljs-comment">//需要被同步的代码   </span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>以售票为例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//使用synchronized关键字实现线程同步</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket_Runnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">tickets</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<span class="hljs-comment">//共享变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//使用了synchronized关键字后，不会超卖了；</span><br>        <span class="hljs-keyword">if</span>(tickets &lt;= <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;卖完了。。。&quot;</span>);<br>            loop = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">50</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖了一张票，余票：&quot;</span> + (--tickets));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(loop)&#123;<br>            sell();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_synchronized02_SellTicket</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SellTicket_Runnable</span> <span class="hljs-variable">sellTicket_runnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SellTicket_Runnable</span>();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sellTicket_runnable);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sellTicket_runnable);<br><br>        thread1.start();<span class="hljs-comment">//1</span><br>        thread2.start();<span class="hljs-comment">//2</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="同步原理"><a href="#同步原理" class="headerlink" title="同步原理"></a>同步原理</h2><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><ul><li><p>1.Java语言中，引入互斥锁来保证共享数据操作的完整性。</p></li><li><p>2.每一个对象都都对应一个可称为“互斥锁”的标记，这个标记用来保证：在任一时刻，只有一个线程能够访问该对象。</p></li><li><p>3.关键字synchronized与互斥锁之间的联系：当某个对象使用synchronized关键字修饰时，表明该对象在任一时刻只能有一个线程访问。</p></li><li><p>4.同步的<strong>局限性</strong>：导致程序的执行效率降低；</p></li><li><p>5.同步方法的<strong>锁</strong>：</p><ul><li><p>若该方法是静态的，则锁默认加在当前类.class；</p></li><li><p>若该方法是非静态的，则锁加在this上，<strong>也可以加在其他对象上，但是多个线程”争夺的锁“必须是同一个对象的锁（这句结合案例代码理解）</strong>：</p><ul><li>~~~java<br>SellTicket_Runnable sellTicket_runnable &#x3D; new SellTicket_Runnable();<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs typescript">  <br>- <span class="hljs-number">6.</span>也可以在**代码块**上加锁；<br><br>~~~java<br><span class="hljs-comment">//案例：售票</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket_Runnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> int tickets = <span class="hljs-number">200</span>;<span class="hljs-comment">//共享变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">boolean</span> loop = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">private</span> final <span class="hljs-title class_">Object</span> <span class="hljs-built_in">object</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-comment">/*synchronized*/</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">sell</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//1.使用了synchronized关键字后，不会超卖了；</span><br>        <span class="hljs-comment">//2.在同一时刻，只有一个线程能够执行sell()方法；</span><br>        <span class="hljs-comment">//3.public synchronized void sell()是一个同步方法，锁加在this上</span><br>        <span class="hljs-comment">//4.也可以不在方法上写synchronized，写在代码块也可以；</span><br><br><span class="hljs-comment">//        synchronized (this)&#123;//同步代码块，锁加在this上；</span><br>        synchronized (<span class="hljs-built_in">object</span>)&#123;<span class="hljs-comment">//也可以加在其他对象上，多个线程需要获得同一个对象(即object对象)的锁；</span><br>            <span class="hljs-keyword">if</span> (tickets &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;卖完了。。。&quot;</span>);<br>                loop = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">sleep</span>(<span class="hljs-number">50</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">InterruptedException</span> e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br><br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">currentThread</span>().<span class="hljs-title function_">getName</span>() + <span class="hljs-string">&quot;卖了一张票，余票：&quot;</span> + (--tickets));<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//给静态代码块加锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">m1</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//synchronized (this)&#123;//报错，静态代码块默认锁对象是：当前类.class;</span><br>synchronized (<span class="hljs-title class_">SellTicket</span>_Runnable.<span class="hljs-property">class</span>)&#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;静态代码块&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">while</span>(loop)&#123;<br>            <span class="hljs-title function_">sell</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_synchronized02_SellTicket</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">SellTicket</span>_Runnable sellTicket_runnable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SellTicket</span>_Runnable();<br><br>        <span class="hljs-title class_">Thread</span> thread1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sellTicket_runnable);<br>        <span class="hljs-title class_">Thread</span> thread2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sellTicket_runnable);<br><br>        thread1.<span class="hljs-title function_">start</span>();<span class="hljs-comment">//线程1</span><br>        thread2.<span class="hljs-title function_">start</span>();<span class="hljs-comment">//线程2</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-线程的生命周期</title>
    <link href="/2023/04/14/Java-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2023/04/14/Java-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-线程的生命周期"><a href="#Java-线程的生命周期" class="headerlink" title="Java-线程的生命周期"></a>Java-线程的生命周期</h1><ul><li>JDK中用Thread.State枚举表示了线程的几种状态；</li></ul><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/Thread.State.png?raw=true"></p><ul><li>其中，Runnable状态可分为：Ready和Running两种状态，因此Runnable状态不代表线程已经开始运行；<ul><li>Ready状态：可以理解为就绪态，当线程未分配cpu资源时被挂起，或者执行了yield()方法进行“礼让”时的状态；</li><li>Running状态：运行态，被调度器选中，该线程获得了cpu资源开始运行；</li></ul></li></ul><h2 id="线程生命周期-状态转换示意图"><a href="#线程生命周期-状态转换示意图" class="headerlink" title="线程生命周期-状态转换示意图"></a>线程生命周期-状态转换示意图</h2><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/Thread_State02.jpg?raw=true"></p>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-线程死锁</title>
    <link href="/2023/04/14/Java-%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81/"/>
    <url>/2023/04/14/Java-%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-线程死锁"><a href="#Java-线程死锁" class="headerlink" title="Java-线程死锁"></a>Java-线程死锁</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ul><li>多个线程都占用了对方的锁资源，且互不相让 &#x3D;&#x3D;&gt; 导致死锁；</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLockDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">object1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<span class="hljs-comment">//static关键字修饰的变量是类变量，可以让多个线程共享</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">object2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-type">boolean</span> flag;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DeadLockDemo</span><span class="hljs-params">(<span class="hljs-type">boolean</span> flag)</span>&#123;<br>        <span class="hljs-built_in">this</span>.flag = flag;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>            <span class="hljs-comment">//在这里sleep一下，不会死锁</span><br>            <span class="hljs-keyword">synchronized</span> (object1)&#123;<span class="hljs-comment">//若线程A拿到了object1的锁</span><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;进入1&quot;</span>);<br>                <span class="hljs-keyword">synchronized</span> (object2)&#123;<span class="hljs-comment">//此时，若线程B已经拿到了object2的锁，则线程A阻塞；</span><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;进入2&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">synchronized</span> (object2)&#123;<span class="hljs-comment">//若线程B拿到了object2的锁</span><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;进入3&quot;</span>);<br>                <span class="hljs-keyword">synchronized</span> (object1)&#123;<span class="hljs-comment">//此时，若线程A已经拿到了object1的锁，则线程B阻塞；</span><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;进入4&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_DeadLock01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">deadLockDemo1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadLockDemo</span>(<span class="hljs-literal">true</span>);<br>        deadLockDemo1.setName(<span class="hljs-string">&quot;线程A&quot;</span>);<br>        deadLockDemo1.start();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">deadLockDemo2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadLockDemo</span>(<span class="hljs-literal">false</span>);<br>        deadLockDemo2.setName(<span class="hljs-string">&quot;线程B&quot;</span>);<br>        deadLockDemo2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-释放锁</title>
    <link href="/2023/04/14/Java-%E9%87%8A%E6%94%BE%E9%94%81/"/>
    <url>/2023/04/14/Java-%E9%87%8A%E6%94%BE%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-释放锁"><a href="#Java-释放锁" class="headerlink" title="Java-释放锁"></a>Java-释放锁</h1><h2 id="释放锁的几种情况"><a href="#释放锁的几种情况" class="headerlink" title="释放锁的几种情况"></a>释放锁的几种情况</h2><ul><li>1.当前线程的同步方法&#x2F;同步代码块<strong>执行结束</strong>；</li><li>2.当前线程在同步方法&#x2F;同步代码块中<strong>遇到break，return</strong>；</li><li>3.当前线程在同步方法&#x2F;同步代码块中<strong>出现了未处理的error&#x2F;Exception</strong>，导致异常结束；</li><li>4.当前线程在同步方法&#x2F;同步代码块中<strong>执行了wait()方法</strong>，当前线程暂停，并释放锁。</li></ul><h2 id="不会释放锁的情况"><a href="#不会释放锁的情况" class="headerlink" title="不会释放锁的情况"></a>不会释放锁的情况</h2><ul><li>1.线程在执行同步方法&#x2F;同步代码块，<strong>执行了Thread.sleep()、Thread.yield()方法</strong>会暂停当前线程的执行，<strong>不会释放持有的锁资源</strong>；</li><li>2.线程执行同步代码块时，<strong>其他线程调用了该线程的suspend()方法</strong>将该线程挂起，但是该线程<strong>不会释放持有的锁资源</strong>；<ul><li>注意：suspend()方法和resume()方法不推荐使用；</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-代码块介绍</title>
    <link href="/2023/04/14/Java-%E4%BB%A3%E7%A0%81%E5%9D%97%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/04/14/Java-%E4%BB%A3%E7%A0%81%E5%9D%97%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-代码块介绍"><a href="#Java-代码块介绍" class="headerlink" title="Java-代码块介绍"></a>Java-代码块介绍</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ul><li>代码块又称为<strong>初始化块</strong>，属于类中的成员之一；</li><li>在<strong>加载类时</strong>或<strong>创建对象时</strong>隐式调用；<ul><li>相当于另一种形式的构造器（对构造器的补充机制），可以做初始化操作；</li></ul></li><li><strong>使用场景</strong>：如果一个类的多个构造器中都有重复使用的语句，可以抽取到代码块中，提高代码复用性；</li></ul><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符]&#123;<br>    一些代码逻辑；<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>修饰符可选，写的话，只能写static；<ul><li>使用了static修饰的代码块 &#x3D;&#x3D;&gt; 静态代码块；<ul><li>静态代码块，随着类的加载而执行，只执行一次；</li></ul></li><li>没有使用static修饰的代码块 &#x3D;&#x3D;&gt; 普通&#x2F;非静态代码块；<ul><li>普通代码块，每次对象创建时执行；</li></ul></li></ul></li><li>逻辑语句可以为任何逻辑语句（如输入输出、方法调用，循环、判断等）</li><li>结尾”;”号可以省略；</li></ul><h2 id="与构造器对比"><a href="#与构造器对比" class="headerlink" title="与构造器对比"></a>与构造器对比</h2><ul><li><strong>1.创建对象时，不管调用哪一个构造器都会先调用代码块的内容；</strong></li><li><strong>2.先执行代码块，再执行构造器；</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>一些知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-绘图</title>
    <link href="/2023/04/14/Java-%E7%BB%98%E5%9B%BE/"/>
    <url>/2023/04/14/Java-%E7%BB%98%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-绘图"><a href="#Java-绘图" class="headerlink" title="Java-绘图"></a>Java-绘图</h1><h2 id="绘图坐标体系"><a href="#绘图坐标体系" class="headerlink" title="绘图坐标体系"></a>绘图坐标体系</h2><ul><li>1.坐标原点为左上角，以像素为单位；</li><li>2.水平方向为X轴，垂直方向为Y轴；</li></ul><h2 id="绘图机制"><a href="#绘图机制" class="headerlink" title="绘图机制"></a>绘图机制</h2><ul><li>绘制一个各种图形&#x2F;字符，演示如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPanel02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br>        <br>        <span class="hljs-comment">//直线</span><br>        g.drawLine(<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">600</span>, <span class="hljs-number">60</span>);<br>        <br>        <span class="hljs-comment">//矩形</span><br>        g.drawRect(<span class="hljs-number">30</span>, <span class="hljs-number">70</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>);<br>        <br>        <span class="hljs-comment">//椭圆</span><br>        g.drawOval(<span class="hljs-number">30</span>, <span class="hljs-number">180</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<br>        <br>        <span class="hljs-comment">//填充矩形</span><br>        <span class="hljs-comment">//设置画笔颜色</span><br>        g.setColor(Color.BLUE);<br>        g.fillRect(<span class="hljs-number">30</span>, <span class="hljs-number">240</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<br>        <br>        <span class="hljs-comment">//填充椭圆</span><br>        g.setColor(Color.RED);<br>        g.fillOval(<span class="hljs-number">30</span>, <span class="hljs-number">300</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<br>        <br>        <span class="hljs-comment">//图片</span><br>        <span class="hljs-comment">//获取图片资源(图片资源文件应与当前java文件在out目录下的同一个包中)</span><br>        <span class="hljs-type">Image</span> <span class="hljs-variable">img</span> <span class="hljs-operator">=</span> Toolkit.getDefaultToolkit().getImage(MyPanel02.class.getResource(<span class="hljs-string">&quot;20220913_LabelView.jpg&quot;</span>));<br>        <span class="hljs-comment">//绘制图片</span><br>        g.drawImage(img, <span class="hljs-number">30</span>, <span class="hljs-number">350</span>, <span class="hljs-number">350</span>, <span class="hljs-number">721</span>, <span class="hljs-built_in">this</span>);<br><br>        <span class="hljs-comment">//设置画笔的颜色和字体</span><br>        g.setColor(Color.GREEN);<br>        g.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-string">&quot;楷体&quot;</span>, Font.BOLD, <span class="hljs-number">50</span>));<br>        g.drawString(<span class="hljs-string">&quot;小温--软件工程&quot;</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Draw02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span>&#123;<br>    <span class="hljs-type">MyPanel02</span> <span class="hljs-variable">myPanel02</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span>&#123;<br>        myPanel02 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPanel02</span>();<br>        <span class="hljs-built_in">this</span>.add(myPanel02);<br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">800</span>, <span class="hljs-number">800</span>);<br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaDraw02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Draw02</span> <span class="hljs-variable">draw02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Draw02</span>();<br>        draw02.draw();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>绘制效果如下图：</li></ul><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/JavaDraw_demo.png?raw=true"></p>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>TankGame</category>
      
      <category>TankGame V0.1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TankGame V0.1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-坦克攻击（多线程实现子弹）</title>
    <link href="/2023/04/14/Java-%E5%9D%A6%E5%85%8B%E6%94%BB%E5%87%BB%EF%BC%88%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E5%AD%90%E5%BC%B9%EF%BC%89/"/>
    <url>/2023/04/14/Java-%E5%9D%A6%E5%85%8B%E6%94%BB%E5%87%BB%EF%BC%88%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E5%AD%90%E5%BC%B9%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-坦克攻击（多线程实现子弹）"><a href="#Java-坦克攻击（多线程实现子弹）" class="headerlink" title="Java-坦克攻击（多线程实现子弹）"></a>Java-坦克攻击（多线程实现子弹）</h1><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><ul><li>定义子弹类（Bullet）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 子弹类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bullet</span> &#123;<br>    <span class="hljs-comment">//子弹坐标和发射方向</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>    <span class="hljs-type">int</span> direction;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<span class="hljs-comment">//子弹初始速度为 5</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Bullet</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> direction)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>        <span class="hljs-built_in">this</span>.direction = direction;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSpeed</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSpeed</span><span class="hljs-params">(<span class="hljs-type">int</span> speed)</span> &#123;<br>        <span class="hljs-built_in">this</span>.speed = speed;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>普通坦克类（Tank）<ul><li>新增属性：<ul><li>（1）子弹对象Bullet；</li></ul></li><li>新增方法：<ul><li>（1）setBullet() 和 getBullet();</li><li>（2）坦克攻击方法attack()，计算坦克发射出的子弹初始坐标;</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 坦克</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tank</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x;<span class="hljs-comment">//坦克的横坐标</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> y;<span class="hljs-comment">//坦克的纵坐标</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> direction;<span class="hljs-comment">//坦克的朝向：0 =&gt; 向上 ，1 =&gt; 向下 ，2 =&gt; 向左 ， 3 =&gt; 向右</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<span class="hljs-comment">//坦克速度</span><br><br>    <span class="hljs-keyword">private</span> Bullet bullet;<span class="hljs-comment">//坦克子弹</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveUp</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.y -= <span class="hljs-built_in">this</span>.speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveDown</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.y += <span class="hljs-built_in">this</span>.speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveRight</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.x += <span class="hljs-built_in">this</span>.speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveLeft</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.x -= <span class="hljs-built_in">this</span>.speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getX</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setX</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getY</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setY</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDirection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> direction;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDirection</span><span class="hljs-params">(<span class="hljs-type">int</span> direction)</span> &#123;<br>        <span class="hljs-built_in">this</span>.direction = direction;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSpeed</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSpeed</span><span class="hljs-params">(<span class="hljs-type">int</span> speed)</span> &#123;<br>        <span class="hljs-built_in">this</span>.speed = speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Bullet <span class="hljs-title function_">getBullet</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bullet;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBullet</span><span class="hljs-params">(Bullet bullet)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bullet = bullet;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//坦克攻击</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">bullet_x</span> <span class="hljs-operator">=</span> -<span class="hljs-number">10</span>, bullet_y = -<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-built_in">this</span>.getDirection())&#123;<span class="hljs-comment">//根据当前坦克的位置和方向来计算子弹的发射方向</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                bullet_x = <span class="hljs-built_in">this</span>.getX()+<span class="hljs-number">20</span>;<br>                bullet_y = <span class="hljs-built_in">this</span>.getY()-<span class="hljs-number">6</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                bullet_x = <span class="hljs-built_in">this</span>.getX()+<span class="hljs-number">20</span>;<br>                bullet_y = <span class="hljs-built_in">this</span>.getY()+<span class="hljs-number">64</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                bullet_x = <span class="hljs-built_in">this</span>.getX()-<span class="hljs-number">6</span>;<br>                bullet_y = <span class="hljs-built_in">this</span>.getY()+<span class="hljs-number">20</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                bullet_x = <span class="hljs-built_in">this</span>.getX()+<span class="hljs-number">64</span>;<br>                bullet_y = <span class="hljs-built_in">this</span>.getY()+<span class="hljs-number">20</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-built_in">this</span>.bullet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bullet</span>(bullet_x, bullet_y, <span class="hljs-built_in">this</span>.direction);<br>        <span class="hljs-type">TankAttackThread</span> <span class="hljs-variable">tankAttackThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TankAttackThread</span>(bullet);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(tankAttackThread);<br>        thread.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>子弹发射的实现：</strong></p><ul><li>新建线程类TankAttackThread，用来实现坦克发射子弹进行攻击；（<strong>子弹移动</strong>）</li><li>为了能够同时存在多颗子弹，需要使用多线程实现；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 子弹发射（多线程）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TankAttackThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    Bullet bullet;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TankAttackThread</span><span class="hljs-params">(Bullet bullet)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bullet = bullet;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-keyword">switch</span> (<span class="hljs-built_in">this</span>.bullet.direction)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-built_in">this</span>.bullet.y -= <span class="hljs-built_in">this</span>.bullet.speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-built_in">this</span>.bullet.y += <span class="hljs-built_in">this</span>.bullet.speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    <span class="hljs-built_in">this</span>.bullet.x -= <span class="hljs-built_in">this</span>.bullet.speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    <span class="hljs-built_in">this</span>.bullet.x += <span class="hljs-built_in">this</span>.bullet.speed;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(<span class="hljs-built_in">this</span>.bullet.x+<span class="hljs-string">&quot;==asa=&quot;</span> + <span class="hljs-built_in">this</span>.bullet.y);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.bullet.x &lt; -<span class="hljs-number">3</span> || <span class="hljs-built_in">this</span>.bullet.y &lt; -<span class="hljs-number">3</span> || <span class="hljs-built_in">this</span>.bullet.x &gt; <span class="hljs-number">1003</span> || <span class="hljs-built_in">this</span>.bullet.y &gt; <span class="hljs-number">803</span>  )&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>根据子弹的坐标和子弹的方向在GamePanel上绘制出子弹：</p><ul><li><strong>绘制必须在paint()方法中调用</strong>，才能在GamePanel上绘制出来；</li><li>考虑子弹的移动，需要<strong>不断地重绘面板</strong>，因此需要：<ul><li>1.让GamePanel实现Runnable接口成为线程类，并且实现Runnable接口中的run()方法，使得每间隔100ms重新绘制GamePanel；</li><li>2.在GameFrame类中启动GamePanel线程，让子弹动起来；</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 坦克大战绘图区域</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GamePanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span>, Runnable&#123;<span class="hljs-comment">//画板</span><br><br>......<br><br>    <span class="hljs-comment">//绘制    </span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br><br>        <span class="hljs-comment">//游戏窗口背景</span><br>        g.setColor(Color.BLACK);<br>        g.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">800</span>);<br><br>        <span class="hljs-comment">//标题</span><br>        g.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-string">&quot;楷体&quot;</span>, Font.BOLD, <span class="hljs-number">32</span>));<br>        g.setColor(Color.RED);<br>        g.drawString(<span class="hljs-string">&quot;TankGame V0.2 by SEA-365&quot;</span>, <span class="hljs-number">60</span>, <span class="hljs-number">40</span>);<br><br>        <span class="hljs-comment">//画出坦克-封装成方法</span><br>        drawTank(hero.getX(), hero.getY(), g, hero.getDirection(), <span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">//绘制玩家坦克的子弹</span><br>        <span class="hljs-keyword">if</span>(hero.getBullet()!=<span class="hljs-literal">null</span>)<br>            drawBullet(hero.getBullet().x, hero.getBullet().y, g, hero.getBullet().direction, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">for</span> (EnemyTank enemyTank : enemyTanks) &#123;<br>            drawTank(enemyTank.getX(), enemyTank.getY(), g, enemyTank.getDirection(), <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <br>    ......<br>        <br>   <span class="hljs-comment">//绘制子弹具体实现</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawBullet</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, Graphics g, <span class="hljs-type">int</span> direction, <span class="hljs-type">int</span> type)</span>&#123;<br>        <span class="hljs-comment">//不同坦克类型，子弹颜色不同</span><br>        <span class="hljs-keyword">switch</span> (type)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//玩家坦克</span><br>                g.setColor(Color.YELLOW);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//敌方坦克</span><br>                g.setColor(Color.CYAN);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>       <br>        g.fill3DRect(x, y, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//绘制矩形子弹</span><br>      <br>    &#125;<br><br>    ......<br>    <span class="hljs-comment">//在</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 监听玩家坦克移动</span><br><span class="hljs-comment">         * 方向键  /  wsad /  WSAD  ==&gt; 上下左右</span><br><span class="hljs-comment">         */</span><br>        ......<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 监听玩家坦克攻击</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span>(e.getKeyCode() == <span class="hljs-string">&#x27;j&#x27;</span> || e.getKeyCode() == <span class="hljs-string">&#x27;J&#x27;</span>)&#123;<br>            <span class="hljs-built_in">this</span>.hero.attack();<br>        &#125;<br>    &#125;<br>        <br>    ......<br><br>    <span class="hljs-comment">//run方法，实现每间隔100ms重新绘制GamePanel</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-built_in">this</span>.repaint();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-comment">//最后，在GameFrame中启动GamePanel线程</span><br></code></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/TankGame%20V0.2.gif?raw=true"></p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><ul><li>子弹射击时存在问题：<ul><li>1.玩家不能连续发射多颗子弹，发射新的子弹，旧的子弹就会消失；<ul><li>根据输出，旧子弹仅仅是没有绘制上panel，但是坐标依然在变；</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>TankGame</category>
      
      <category>TankGame V0.2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TankGame V0.2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-敌方坦克攻击（Vector实现发射多颗子弹并绘制）</title>
    <link href="/2023/04/14/Java-%E6%95%8C%E6%96%B9%E5%9D%A6%E5%85%8B%E6%94%BB%E5%87%BB%EF%BC%88Vector%E5%AE%9E%E7%8E%B0%E5%8F%91%E5%B0%84%E5%A4%9A%E9%A2%97%E5%AD%90%E5%BC%B9%E5%B9%B6%E7%BB%98%E5%88%B6%EF%BC%89/"/>
    <url>/2023/04/14/Java-%E6%95%8C%E6%96%B9%E5%9D%A6%E5%85%8B%E6%94%BB%E5%87%BB%EF%BC%88Vector%E5%AE%9E%E7%8E%B0%E5%8F%91%E5%B0%84%E5%A4%9A%E9%A2%97%E5%AD%90%E5%BC%B9%E5%B9%B6%E7%BB%98%E5%88%B6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-敌方坦克攻击（Vector实现发射多颗子弹并绘制）"><a href="#Java-敌方坦克攻击（Vector实现发射多颗子弹并绘制）" class="headerlink" title="Java-敌方坦克攻击（Vector实现发射多颗子弹并绘制）"></a>Java-敌方坦克攻击（Vector实现发射多颗子弹并绘制）</h1><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><ul><li><strong>子弹类（Bullet）</strong><ul><li>新增属性：<ul><li>(1)isLive:子弹是否有效<ul><li>当子弹超出边界后，子弹失效，不应该继续占用资源；</li></ul></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 子弹类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bullet</span> &#123;<br>    <span class="hljs-comment">//子弹坐标和发射方向</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>    <span class="hljs-type">int</span> direction;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<span class="hljs-comment">//子弹初始速度为 5</span><br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLive</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//子弹是否有效</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Bullet</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> direction)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>        <span class="hljs-built_in">this</span>.direction = direction;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSpeed</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSpeed</span><span class="hljs-params">(<span class="hljs-type">int</span> speed)</span> &#123;<br>        <span class="hljs-built_in">this</span>.speed = speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLive</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isLive;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLive</span><span class="hljs-params">(<span class="hljs-type">boolean</span> live)</span> &#123;<br>        isLive = live;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><strong>普通坦克类（Tank）</strong><ul><li>新增属性：<ul><li>（1）子弹对象集合bullets；</li></ul></li><li>新增方法：<ul><li>（1）setBullets() 和 getBullets();</li></ul></li><li>修改：<ul><li>（1）坦克攻击方法attack()中，每调用一次attack()方法：<ul><li>1）生成一个子弹对象bullet，并设置isLive为true；</li><li>2）将新生成的子弹对象bullet加入子弹对象集合bullets中;</li></ul></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 坦克</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tank</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x;<span class="hljs-comment">//坦克的横坐标</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> y;<span class="hljs-comment">//坦克的纵坐标</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> direction;<span class="hljs-comment">//坦克的朝向：0 =&gt; 向上 ，1 =&gt; 向下 ，2 =&gt; 向左 ， 3 =&gt; 向右</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<span class="hljs-comment">//坦克速度</span><br><br>    <span class="hljs-keyword">private</span> Bullet bullet;<span class="hljs-comment">//坦克子弹</span><br><br>    <span class="hljs-keyword">private</span> Vector&lt;Bullet&gt; bullets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;Bullet&gt;();<span class="hljs-comment">//子弹集合，使坦克可以发射多颗子弹并在panel绘制</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveUp</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.y -= <span class="hljs-built_in">this</span>.speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveDown</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.y += <span class="hljs-built_in">this</span>.speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveRight</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.x += <span class="hljs-built_in">this</span>.speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveLeft</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.x -= <span class="hljs-built_in">this</span>.speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getX</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setX</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getY</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setY</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDirection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> direction;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDirection</span><span class="hljs-params">(<span class="hljs-type">int</span> direction)</span> &#123;<br>        <span class="hljs-built_in">this</span>.direction = direction;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSpeed</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSpeed</span><span class="hljs-params">(<span class="hljs-type">int</span> speed)</span> &#123;<br>        <span class="hljs-built_in">this</span>.speed = speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Bullet <span class="hljs-title function_">getBullet</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bullet;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBullet</span><span class="hljs-params">(Bullet bullet)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bullet = bullet;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Vector&lt;Bullet&gt; <span class="hljs-title function_">getBullets</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bullets;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBullets</span><span class="hljs-params">(Vector&lt;Bullet&gt; bullets)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bullets = bullets;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//坦克攻击</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">bullet_x</span> <span class="hljs-operator">=</span> -<span class="hljs-number">10</span>, bullet_y = -<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-built_in">this</span>.getDirection())&#123;<span class="hljs-comment">//根据当前坦克的位置和方向来计算子弹的发射方向</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                bullet_x = <span class="hljs-built_in">this</span>.getX()+<span class="hljs-number">20</span>;<br>                bullet_y = <span class="hljs-built_in">this</span>.getY()-<span class="hljs-number">6</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                bullet_x = <span class="hljs-built_in">this</span>.getX()+<span class="hljs-number">20</span>;<br>                bullet_y = <span class="hljs-built_in">this</span>.getY()+<span class="hljs-number">64</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                bullet_x = <span class="hljs-built_in">this</span>.getX()-<span class="hljs-number">6</span>;<br>                bullet_y = <span class="hljs-built_in">this</span>.getY()+<span class="hljs-number">20</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                bullet_x = <span class="hljs-built_in">this</span>.getX()+<span class="hljs-number">64</span>;<br>                bullet_y = <span class="hljs-built_in">this</span>.getY()+<span class="hljs-number">20</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//这样写只能发射一颗子弹，因为每次攻击都会重新给子弹分配新的对象，repaint()后旧的对象将不会被绘制，但实际上仍然存在；</span><br>        <span class="hljs-comment">//1.我一开始想的是，怎么让本次攻击不影响上一次攻击，没想出来怎么实现；</span><br>        <span class="hljs-comment">//2.韩老师的思路：每次攻击创建一颗子弹，用vector保存，绘制的时候再取出来，到边界后再移除；</span><br>        <span class="hljs-built_in">this</span>.bullet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bullet</span>(bullet_x, bullet_y, <span class="hljs-built_in">this</span>.direction);<br>        <span class="hljs-built_in">this</span>.bullet.isLive = <span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">this</span>.bullets.add(<span class="hljs-built_in">this</span>.bullet);<br><br>        <span class="hljs-type">TankAttackThread</span> <span class="hljs-variable">tankAttackThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TankAttackThread</span>(bullet);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(tankAttackThread);<br>        thread.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>子弹发射：</strong></p><ul><li>修改：<ul><li>（1）当子弹超出边界时，设置子弹的isLive属性为false，该子弹应释放资源；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 子弹发射（多线程）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TankAttackThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    Bullet bullet;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TankAttackThread</span><span class="hljs-params">(Bullet bullet)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bullet = bullet;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-keyword">switch</span> (<span class="hljs-built_in">this</span>.bullet.direction)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-built_in">this</span>.bullet.y -= <span class="hljs-built_in">this</span>.bullet.speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-built_in">this</span>.bullet.y += <span class="hljs-built_in">this</span>.bullet.speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    <span class="hljs-built_in">this</span>.bullet.x -= <span class="hljs-built_in">this</span>.bullet.speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    <span class="hljs-built_in">this</span>.bullet.x += <span class="hljs-built_in">this</span>.bullet.speed;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(<span class="hljs-built_in">this</span>.bullet.x+<span class="hljs-string">&quot;==asa=&quot;</span> + <span class="hljs-built_in">this</span>.bullet.y);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.bullet.x &lt; -<span class="hljs-number">3</span> || <span class="hljs-built_in">this</span>.bullet.y &lt; -<span class="hljs-number">3</span> || <span class="hljs-built_in">this</span>.bullet.x &gt; <span class="hljs-number">1003</span> || <span class="hljs-built_in">this</span>.bullet.y &gt; <span class="hljs-number">803</span>  )&#123;<br>                <span class="hljs-built_in">this</span>.bullet.setLive(<span class="hljs-literal">false</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>坦克大战绘图区域：</strong></p></li><li><p>修改：</p><ul><li><p>（1）使用for循环，绘制玩家坦克子弹；</p></li><li><p>（2）使用for循环，绘制敌方坦克子弹；</p></li><li><p>（3）需要注意的点：</p><ul><li>遍历时，如果使用增强for遍历，会爆ConcurrentModificationException错误；</li><li>绘制时，当子弹的isLive属性为false时，及时移除子弹，释放资源；</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 坦克大战绘图区域</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GamePanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span>, Runnable&#123;<span class="hljs-comment">//画板</span><br><br>......<br><br>    <span class="hljs-comment">//绘制    </span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br><br>        <span class="hljs-comment">//游戏窗口背景</span><br>        g.setColor(Color.BLACK);<br>        g.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">800</span>);<br><br>        <span class="hljs-comment">//标题</span><br>        g.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-string">&quot;楷体&quot;</span>, Font.BOLD, <span class="hljs-number">32</span>));<br>        g.setColor(Color.RED);<br>        g.drawString(<span class="hljs-string">&quot;TankGame V0.2 by SEA-365&quot;</span>, <span class="hljs-number">60</span>, <span class="hljs-number">40</span>);<br><br>        <span class="hljs-comment">//画出坦克-封装成方法</span><br>        drawTank(heroTank.getX(), heroTank.getY(), g, heroTank.getDirection(), <span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">//绘制玩家坦克的子弹</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; heroTank.getBullets().size(); i++) &#123;<br>            <span class="hljs-type">Bullet</span> <span class="hljs-variable">bullet</span> <span class="hljs-operator">=</span> heroTank.getBullets().get(i);<span class="hljs-comment">//取出子弹</span><br>            <span class="hljs-keyword">if</span>(bullet!=<span class="hljs-literal">null</span> &amp;&amp; bullet.isLive)<br>                drawBullet(bullet.x, bullet.y, g, <span class="hljs-number">0</span>);<span class="hljs-comment">//绘制</span><br>            <span class="hljs-keyword">else</span><br>                heroTank.getBullets().remove(bullet);<span class="hljs-comment">//子弹超出边界，移除</span><br>        &#125;<br><br>        <span class="hljs-comment">//绘制敌方坦克子弹</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; enemyTankSize; i++) &#123;<br>            <span class="hljs-type">EnemyTank</span> <span class="hljs-variable">enemyTank</span> <span class="hljs-operator">=</span> enemyTanks.get(i);<br>            drawTank(enemyTank.getX(), enemyTank.getY(), g, enemyTank.getDirection(), <span class="hljs-number">1</span>);<br>            System.out.println(<span class="hljs-string">&quot;====================================【&quot;</span> + enemyTank.getBullets().size() + <span class="hljs-string">&quot;】==========&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; enemyTank.getBullets().size(); j++) &#123;<span class="hljs-comment">//这里应使用for遍历,不然会爆并发错误</span><br>                <span class="hljs-type">Bullet</span> <span class="hljs-variable">bullet</span> <span class="hljs-operator">=</span> enemyTank.getBullets().get(j);<span class="hljs-comment">//取出子弹</span><br>                <span class="hljs-keyword">if</span>(bullet != <span class="hljs-literal">null</span> &amp;&amp; bullet.isLive)<br>                    drawBullet(bullet.x, bullet.y, g, <span class="hljs-number">1</span>);<span class="hljs-comment">//绘制</span><br>                <span class="hljs-keyword">else</span><br>                    enemyTank.getBullets().remove(bullet);<span class="hljs-comment">//子弹超出边界，移除</span><br>            &#125;<br><br>        &#125;<br>    &#125;<br>    <br>    ......<br>        <br>   <span class="hljs-comment">//绘制子弹具体实现</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawBullet</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, Graphics g, <span class="hljs-type">int</span> direction, <span class="hljs-type">int</span> type)</span>&#123;<br>        <span class="hljs-comment">//不同坦克类型，子弹颜色不同</span><br>        <span class="hljs-keyword">switch</span> (type)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//玩家坦克</span><br>                g.setColor(Color.YELLOW);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//敌方坦克</span><br>                g.setColor(Color.CYAN);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>       <br>        g.fill3DRect(x, y, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//绘制矩形子弹</span><br>      <br>    &#125;<br><br>    ......<br>&#125;<br><br><br><br><span class="hljs-comment">//最后，在GameFrame中启动GamePanel线程</span><br></code></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/TankGame%20V0.2.1.gif?raw=true"></p><h2 id="待优化"><a href="#待优化" class="headerlink" title="待优化"></a>待优化</h2><ul><li><p>子弹击中敌方坦克后：</p><ul><li>1.爆炸效果；</li><li>2.敌方坦克消失；</li></ul></li><li><p>敌方坦克需要能够随机移动；</p></li><li><p>坦克移动范围未限制，可能移动至边界外；</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>TankGame</category>
      
      <category>TankGame V0.2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TankGame V0.2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-坦克攻击（敌方坦克消失）</title>
    <link href="/2023/04/14/Java-%E5%9D%A6%E5%85%8B%E6%94%BB%E5%87%BB%EF%BC%88%E6%95%8C%E6%96%B9%E5%9D%A6%E5%85%8B%E6%B6%88%E5%A4%B1%EF%BC%89/"/>
    <url>/2023/04/14/Java-%E5%9D%A6%E5%85%8B%E6%94%BB%E5%87%BB%EF%BC%88%E6%95%8C%E6%96%B9%E5%9D%A6%E5%85%8B%E6%B6%88%E5%A4%B1%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-坦克攻击（敌方坦克消失）"><a href="#Java-坦克攻击（敌方坦克消失）" class="headerlink" title="Java-坦克攻击（敌方坦克消失）"></a>Java-坦克攻击（敌方坦克消失）</h1><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><ul><li><strong>子弹类（Bullet）</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 子弹类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bullet</span> &#123;<br>    <span class="hljs-comment">//子弹坐标和发射方向</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>    <span class="hljs-type">int</span> direction;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<span class="hljs-comment">//子弹初始速度为 5</span><br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLive</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//子弹是否有效</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Bullet</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> direction)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>        <span class="hljs-built_in">this</span>.direction = direction;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSpeed</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSpeed</span><span class="hljs-params">(<span class="hljs-type">int</span> speed)</span> &#123;<br>        <span class="hljs-built_in">this</span>.speed = speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLive</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isLive;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLive</span><span class="hljs-params">(<span class="hljs-type">boolean</span> live)</span> &#123;<br>        isLive = live;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><strong>普通坦克类（Tank）</strong><ul><li>新增属性：<ul><li>（1）坦克是否存活isLive；</li></ul></li><li>新增方法：<ul><li>（1）setLive() 和 isLive();</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 坦克</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tank</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x;<span class="hljs-comment">//坦克的横坐标</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> y;<span class="hljs-comment">//坦克的纵坐标</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> direction;<span class="hljs-comment">//坦克的朝向：0 =&gt; 向上 ，1 =&gt; 向下 ，2 =&gt; 向左 ， 3 =&gt; 向右</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<span class="hljs-comment">//坦克速度</span><br><br>    <span class="hljs-keyword">private</span> Bullet bullet;<span class="hljs-comment">//坦克子弹</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isLive</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//坦克是否有效（是否被子弹击中）</span><br><br>    <span class="hljs-keyword">private</span> Vector&lt;Bullet&gt; bullets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;Bullet&gt;();<span class="hljs-comment">//子弹集合，使坦克可以发射多颗子弹并在panel绘制</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    ......<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLive</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isLive;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLive</span><span class="hljs-params">(<span class="hljs-type">boolean</span> live)</span> &#123;<br>        isLive = live;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//坦克攻击</span><br>        ......<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">(Vector&lt;EnemyTank&gt; enemyTanks)</span>&#123;<span class="hljs-comment">//坦克攻击</span><br>        ......<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>子弹发射：</strong></p><ul><li>修改：<ul><li>（1）增加子弹击中时销毁子弹的判断；</li><li>（2）考虑到是否击中敌方坦克判断属于玩家坦克特有，因此将判断代码放到了GamePanel类中；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 子弹发射（多线程）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TankAttackThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    Bullet bullet;<br>    Vector&lt;EnemyTank&gt; enemyTanks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;EnemyTank&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TankAttackThread</span><span class="hljs-params">(Bullet bullet)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bullet = bullet;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TankAttackThread</span><span class="hljs-params">(Bullet bullet, Vector&lt;EnemyTank&gt; enemyTanks)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bullet = bullet;<br>        <span class="hljs-built_in">this</span>.enemyTanks = enemyTanks;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-keyword">switch</span> (<span class="hljs-built_in">this</span>.bullet.direction)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-built_in">this</span>.bullet.y -= <span class="hljs-built_in">this</span>.bullet.speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-built_in">this</span>.bullet.y += <span class="hljs-built_in">this</span>.bullet.speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    <span class="hljs-built_in">this</span>.bullet.x -= <span class="hljs-built_in">this</span>.bullet.speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    <span class="hljs-built_in">this</span>.bullet.x += <span class="hljs-built_in">this</span>.bullet.speed;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;==== [&quot;</span> + <span class="hljs-built_in">this</span>.bullet.x + <span class="hljs-string">&quot;, &quot;</span> + <span class="hljs-built_in">this</span>.bullet.y + <span class="hljs-string">&quot;] ====&quot;</span>);<br><br>            <span class="hljs-comment">//到达边界以及子弹击中，销毁子弹</span><br>            <span class="hljs-keyword">if</span>((!<span class="hljs-built_in">this</span>.bullet.isLive()) || <span class="hljs-built_in">this</span>.bullet.x &lt; -<span class="hljs-number">3</span> || <span class="hljs-built_in">this</span>.bullet.y &lt; -<span class="hljs-number">3</span> || <span class="hljs-built_in">this</span>.bullet.x &gt; <span class="hljs-number">1003</span> || <span class="hljs-built_in">this</span>.bullet.y &gt; <span class="hljs-number">803</span>  )&#123;<br>                <span class="hljs-built_in">this</span>.bullet.setLive(<span class="hljs-literal">false</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><strong>坦克大战绘图区域：</strong></p></li><li><p>修改：</p><ul><li>（1）为了测试子弹是否击中敌方坦克，将敌方坦克的方向修改为各个方向都有；</li><li>（2）绘制玩家坦克的子弹时，增加子弹是否存活判断；</li><li>（3）绘制敌方坦克时，增加敌方坦克是否存活判断；</li></ul></li><li><p>新增：</p><ul><li>（1）增加玩家坦克子弹是否击中敌方坦克的判断函数EnemyTank isHitted(Bullet bullet, Vector<EnemyTank> enemyTanks);</EnemyTank></li><li>（2）在每次重绘前遍历玩家子弹集合和敌方坦克集合，判断玩家坦克是否击中任意敌方坦克；（双重遍历）</li></ul></li><li><p>删除：</p><ul><li>（1）标题的绘制改为设置游戏窗口标题</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.KeyEvent;<br><span class="hljs-keyword">import</span> java.awt.event.KeyListener;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 坦克大战绘图区域</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/2</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GamePanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span>, Runnable&#123;<span class="hljs-comment">//画板</span><br><br>    <span class="hljs-comment">//定义玩家的坦克</span><br>    <span class="hljs-type">HeroTank</span> <span class="hljs-variable">heroTank</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//考虑多线程问题，使用Vector来保存敌方坦克</span><br>    Vector&lt;EnemyTank&gt; enemyTanks = <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">enemyTankSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GamePanel</span><span class="hljs-params">()</span> &#123;<br>        heroTank = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroTank</span>(<span class="hljs-number">250</span>, <span class="hljs-number">400</span>);<span class="hljs-comment">//初始化玩家坦克</span><br><br>        enemyTanks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;EnemyTank&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; enemyTankSize; i++) &#123;<br>            <span class="hljs-type">EnemyTank</span> <span class="hljs-variable">enemyTank</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnemyTank</span>(<span class="hljs-number">100</span> * (i + <span class="hljs-number">1</span>), <span class="hljs-number">100</span>);<br>            enemyTank.setDirection(i % <span class="hljs-number">4</span>);<br>            <span class="hljs-comment">//让敌方坦克也能攻击</span><br>            enemyTank.attack();<br><br>            enemyTanks.add(enemyTank);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br><br>        <span class="hljs-comment">//游戏窗口背景</span><br>        g.setColor(Color.BLACK);<br>        g.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">800</span>);<br><br>        <span class="hljs-comment">//画出坦克-封装成方法</span><br>        drawTank(heroTank.getX(), heroTank.getY(), g, heroTank.getDirection(), <span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">//绘制玩家坦克的子弹</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; heroTank.getBullets().size(); i++) &#123;<br>            <span class="hljs-type">Bullet</span> <span class="hljs-variable">bullet</span> <span class="hljs-operator">=</span> heroTank.getBullets().get(i);<span class="hljs-comment">//取出子弹</span><br>            <span class="hljs-keyword">if</span>(bullet!=<span class="hljs-literal">null</span> &amp;&amp; bullet.isLive())<br>                drawBullet(bullet.x, bullet.y, g, <span class="hljs-number">0</span>);<span class="hljs-comment">//绘制</span><br>            <span class="hljs-keyword">else</span><br>                heroTank.getBullets().remove(bullet);<span class="hljs-comment">//子弹超出边界，移除</span><br>        &#125;<br><br>        <span class="hljs-comment">//绘制敌方坦克以及子弹</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; enemyTanks.size(); i++) &#123;<br>            <span class="hljs-type">EnemyTank</span> <span class="hljs-variable">enemyTank</span> <span class="hljs-operator">=</span> enemyTanks.get(i);<br>            <span class="hljs-keyword">if</span>(enemyTank.isLive())<br>                drawTank(enemyTank.getX(), enemyTank.getY(), g, enemyTank.getDirection(), <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; enemyTank.getBullets().size(); j++) &#123;<span class="hljs-comment">//这里应使用for遍历,不然会爆并发错误</span><br>                <span class="hljs-type">Bullet</span> <span class="hljs-variable">bullet</span> <span class="hljs-operator">=</span> enemyTank.getBullets().get(j);<span class="hljs-comment">//取出子弹</span><br>                <span class="hljs-keyword">if</span>(bullet != <span class="hljs-literal">null</span> &amp;&amp; bullet.isLive)<br>                    drawBullet(bullet.x, bullet.y, g, <span class="hljs-number">1</span>);<span class="hljs-comment">//绘制</span><br>                <span class="hljs-keyword">else</span><br>                    enemyTank.getBullets().remove(bullet);<span class="hljs-comment">//子弹超出边界，移除</span><br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> x 坦克左上方x轴坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> y 坦克左上方y轴坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> g 画笔</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> direction 坦克的朝向：0 =&gt; 向上 ，1 =&gt; 向下 ，2 =&gt; 向左 ， 3 =&gt; 向右</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 坦克类型：0 =&gt; 玩家坦克，1 =&gt; 敌方坦克</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawTank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, Graphics g, <span class="hljs-type">int</span> direction, <span class="hljs-type">int</span> type)</span>&#123;<br>       ......<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawBullet</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, Graphics g, <span class="hljs-type">int</span> type)</span>&#123;<br>       ......<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        ......<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br><br>    &#125;<br><br>        <span class="hljs-keyword">private</span> EnemyTank <span class="hljs-title function_">isHitted</span><span class="hljs-params">(Bullet bullet, Vector&lt;EnemyTank&gt; enemyTanks)</span> &#123;<br>            <span class="hljs-type">int</span> enemyTank_x_left;<span class="hljs-comment">//敌方坦克的左边缘x坐标</span><br>            <span class="hljs-type">int</span> enemyTank_x_right;<span class="hljs-comment">//敌方坦克的右边缘x坐标</span><br>            <span class="hljs-type">int</span> enemyTank_y_top;<span class="hljs-comment">//敌方坦克的上边缘y坐标</span><br>            <span class="hljs-type">int</span> enemyTank_y_bottom;<span class="hljs-comment">//敌方坦克的下边缘y坐标</span><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; enemyTanks.size(); i++) &#123;<br>                <span class="hljs-type">EnemyTank</span> <span class="hljs-variable">cur_enemyTank</span> <span class="hljs-operator">=</span> enemyTanks.get(i);<br>                <span class="hljs-keyword">if</span>(cur_enemyTank.getDirection() == <span class="hljs-number">0</span> || cur_enemyTank.getDirection() == <span class="hljs-number">1</span>)&#123;<br>                    enemyTank_y_bottom = cur_enemyTank.getY() + <span class="hljs-number">60</span>;<br>                    enemyTank_x_right = cur_enemyTank.getX() + <span class="hljs-number">44</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    enemyTank_y_bottom = cur_enemyTank.getY() + <span class="hljs-number">44</span>;<br>                    enemyTank_x_right = cur_enemyTank.getX() + <span class="hljs-number">60</span>;<br>                &#125;<br><br>                enemyTank_x_left = cur_enemyTank.getX();<br>                enemyTank_y_top = cur_enemyTank.getY();<br><br><br>                <span class="hljs-keyword">switch</span> (bullet.direction)&#123;<span class="hljs-comment">//发射子弹的方向</span><br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//向上</span><br>                        <span class="hljs-keyword">if</span>(bullet.x+<span class="hljs-number">6</span> &gt;= enemyTank_x_left &amp;&amp; bullet.x + <span class="hljs-number">6</span> &lt;= enemyTank_x_right &amp;&amp; bullet.y &lt;= enemyTank_y_bottom)<br>                            <span class="hljs-keyword">return</span> cur_enemyTank;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//向下</span><br>                        <span class="hljs-keyword">if</span>(bullet.x+<span class="hljs-number">6</span> &gt;= enemyTank_x_left &amp;&amp; bullet.x + <span class="hljs-number">6</span> &lt;= enemyTank_x_right &amp;&amp; bullet.y+<span class="hljs-number">6</span> &gt;= enemyTank_y_top)<br>                            <span class="hljs-keyword">return</span> cur_enemyTank;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//向左</span><br>                        <span class="hljs-keyword">if</span>(bullet.y+<span class="hljs-number">6</span> &lt;= enemyTank_y_bottom &amp;&amp; bullet.y+<span class="hljs-number">6</span> &gt;= enemyTank_y_top &amp;&amp; bullet.x+<span class="hljs-number">6</span> &lt;= enemyTank_x_right)<br>                            <span class="hljs-keyword">return</span> cur_enemyTank;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//向右</span><br>                        <span class="hljs-keyword">if</span>(bullet.y+<span class="hljs-number">6</span> &lt;= enemyTank_y_bottom &amp;&amp; bullet.y+<span class="hljs-number">6</span> &gt;= enemyTank_y_top &amp;&amp; bullet.x &lt;= enemyTank_x_left)<br>                            <span class="hljs-keyword">return</span> cur_enemyTank;<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(heroTank.getBullets() != <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; heroTank.getBullets().size(); i++) &#123;<br>                        <span class="hljs-type">Bullet</span> <span class="hljs-variable">cur_bullet</span> <span class="hljs-operator">=</span> heroTank.getBullets().get(i);<br>                        <span class="hljs-keyword">if</span> (cur_bullet != <span class="hljs-literal">null</span> &amp;&amp; cur_bullet.isLive())&#123;<br>                            <span class="hljs-comment">//是否击中敌方坦克判断</span><br>                            <span class="hljs-type">EnemyTank</span> <span class="hljs-variable">hittedTank</span> <span class="hljs-operator">=</span> isHitted(cur_bullet, enemyTanks);<br>                            <span class="hljs-keyword">if</span> (cur_bullet.isLive() &amp;&amp; hittedTank != <span class="hljs-literal">null</span>) &#123;<br>                                System.out.println(<span class="hljs-string">&quot;======击中了[&quot;</span>+ hittedTank.getX() + <span class="hljs-string">&quot;, &quot;</span> + hittedTank.getY() +<span class="hljs-string">&quot;]=======&quot;</span>);<br>                                <span class="hljs-comment">//销毁被击中的坦克以及该子弹</span><br>                                hittedTank.setLive(<span class="hljs-literal">false</span>);<br>                                cur_bullet.setLive(<span class="hljs-literal">false</span>);<br>                                enemyTanks.remove(hittedTank);<br>                                heroTank.getBullets().remove(cur_bullet);<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-built_in">this</span>.repaint();<br>            &#125;<br><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/TankGame%20V0.2.2.gif?raw=true" alt="TankGame V0.2.2"></p><h2 id="待优化"><a href="#待优化" class="headerlink" title="待优化"></a>待优化</h2><ul><li>子弹击中敌方坦克后：<ul><li>1.爆炸效果；</li></ul></li><li>敌方坦克需要能够随机移动；</li><li>坦克移动范围未限制，可能移动至边界外；</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>TankGame</category>
      
      <category>TankGame V0.2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TankGame V0.2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-坦克爆炸效果以及敌方坦克随机移动的实现（Toolkit实现读取图片资源）</title>
    <link href="/2023/04/14/Java-%E5%9D%A6%E5%85%8B%E7%88%86%E7%82%B8%E6%95%88%E6%9E%9C%E4%BB%A5%E5%8F%8A%E6%95%8C%E6%96%B9%E5%9D%A6%E5%85%8B%E9%9A%8F%E6%9C%BA%E7%A7%BB%E5%8A%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88Toolkit%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%EF%BC%89/"/>
    <url>/2023/04/14/Java-%E5%9D%A6%E5%85%8B%E7%88%86%E7%82%B8%E6%95%88%E6%9E%9C%E4%BB%A5%E5%8F%8A%E6%95%8C%E6%96%B9%E5%9D%A6%E5%85%8B%E9%9A%8F%E6%9C%BA%E7%A7%BB%E5%8A%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88Toolkit%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-坦克爆炸效果以及敌方坦克随机移动的实现（Toolkit实现读取图片资源）"><a href="#Java-坦克爆炸效果以及敌方坦克随机移动的实现（Toolkit实现读取图片资源）" class="headerlink" title="Java-坦克爆炸效果以及敌方坦克随机移动的实现（Toolkit实现读取图片资源）"></a>Java-坦克爆炸效果以及敌方坦克随机移动的实现（Toolkit实现读取图片资源）</h1><h2 id="Toolkit实现读取图片资源"><a href="#Toolkit实现读取图片资源" class="headerlink" title="Toolkit实现读取图片资源"></a>Toolkit实现读取图片资源</h2><h3 id="一、Toolkit读取图片资源"><a href="#一、Toolkit读取图片资源" class="headerlink" title="一、Toolkit读取图片资源"></a>一、Toolkit读取图片资源</h3><ul><li><p>情况1：该Project&#x2F;Module是普通项目</p><ul><li>图片资源文件应放在 当前Java文件在out目录下的同一个包中；</li><li><strong>存在的问题</strong>：每次rebuild项目时，该文件会被删除；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//例：</span><br><span class="hljs-type">Image</span> <span class="hljs-variable">img</span> <span class="hljs-operator">=</span> Toolkit.getDefaultToolkit().getImage(MyPanel.class.getResource(<span class="hljs-string">&quot;test.jpg&quot;</span>));<br></code></pre></td></tr></table></figure></li><li><p>情况2：该Project&#x2F;Module是Maven项目</p><ul><li>方式一：图片资源可以放在 当前Java文件在target目录下的同一个包中，但是也<strong>存在情况1中的问题</strong>；</li><li>方式二：图片资源放在resource目录下，但是需要注意的是，在读取图片时，应当<strong>使用绝对路径读取</strong>；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//例：</span><br><br><span class="hljs-comment">//1.准备绝对路径</span><br><span class="hljs-type">String</span> <span class="hljs-variable">cur_dir</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\TankGameV0.3\\src\\main\\resources\\&quot;</span>;<br><span class="hljs-comment">//2.Toolkit读取图片字眼</span><br><span class="hljs-type">Image</span> <span class="hljs-variable">img</span> <span class="hljs-operator">=</span> Toolkit.getDefaultToolkit().getImage(cur_dir + <span class="hljs-string">&quot;test.jpg&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="二、在JPanel上绘制图片"><a href="#二、在JPanel上绘制图片" class="headerlink" title="二、在JPanel上绘制图片"></a>二、在JPanel上绘制图片</h3><ul><li>有了图片资源对象img后，我们只需使用JPanel中绘制图片的方法drawImage()进行绘制即可；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//绘制图片对象</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        在坐标为(100, 100)的位置绘制宽高为400x400的图片对象img</span><br><span class="hljs-comment">        */</span><br>        g.drawImage(img, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">400</span>, <span class="hljs-number">400</span>, <span class="hljs-built_in">this</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="案例：绘制坦克被击中后的爆炸效果"><a href="#案例：绘制坦克被击中后的爆炸效果" class="headerlink" title="案例：绘制坦克被击中后的爆炸效果"></a>案例：绘制坦克被击中后的爆炸效果</h2><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><ul><li>新增坦克爆炸效果类<ul><li>注意的点：通过给坦克爆炸效果类设置生命周期属性，实现在生命周期的不同阶段显示不同的效果；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 坦克爆炸效果实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TankExplosionEffect</span> &#123;<br>    <span class="hljs-comment">//爆炸效果的坐标</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> y;<br>    <span class="hljs-comment">//爆炸效果的生命周期，在不同的阶段显示不同的效果</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">life</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>;<br>    <span class="hljs-comment">//爆炸效果是否显示</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isLive</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TankExplosionEffect</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getX</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setX</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getY</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setY</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLife</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> life;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLife</span><span class="hljs-params">(<span class="hljs-type">int</span> life)</span> &#123;<br>        <span class="hljs-built_in">this</span>.life = life;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLive</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isLive;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLive</span><span class="hljs-params">(<span class="hljs-type">boolean</span> live)</span> &#123;<br>        isLive = live;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">lifeDown</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.life &gt; <span class="hljs-number">0</span>)&#123;<br>            --<span class="hljs-built_in">this</span>.life;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.setLive(<span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>坦克大战绘图区域（GamePanel类）<ul><li>新增属性<ul><li>三个Image图片对象；</li><li>Vector&lt;TankExplosionEffect&gt; bombs：爆炸效果集合；</li></ul></li><li>修改：<ul><li>敌方坦克被击中时，在移除敌方坦克的同时，在该坦克的位置添加坦克爆炸效果，并放入爆炸效果集合；</li><li>遍历爆炸效果集合，根据爆炸效果的生命周期绘制爆炸效果；</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.KeyEvent;<br><span class="hljs-keyword">import</span> java.awt.event.KeyListener;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 坦克大战绘图区域</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/2</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GamePanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span>, Runnable&#123;<span class="hljs-comment">//画板</span><br><br>    <span class="hljs-comment">//定义玩家的坦克</span><br>    <span class="hljs-type">HeroTank</span> <span class="hljs-variable">heroTank</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//考虑多线程问题，使用Vector来保存敌方坦克</span><br>    Vector&lt;EnemyTank&gt; enemyTanks = <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">enemyTankSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br><span class="hljs-comment">//定义爆炸效果的三张图片</span><br>    <span class="hljs-type">Image</span> <span class="hljs-variable">image_1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">Image</span> <span class="hljs-variable">image_2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">Image</span> <span class="hljs-variable">image_3</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">//爆炸效果集合</span><br>    Vector&lt;TankExplosionEffect&gt; bombs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GamePanel</span><span class="hljs-params">()</span> &#123;<br>        heroTank = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroTank</span>(<span class="hljs-number">250</span>, <span class="hljs-number">400</span>);<span class="hljs-comment">//初始化玩家坦克</span><br><br>        enemyTanks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;EnemyTank&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; enemyTankSize; i++) &#123;<br>            <span class="hljs-type">EnemyTank</span> <span class="hljs-variable">enemyTank</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnemyTank</span>(<span class="hljs-number">100</span> * (i + <span class="hljs-number">1</span>), <span class="hljs-number">100</span>);<br>            enemyTank.setDirection(i % <span class="hljs-number">4</span>);<br>            <span class="hljs-comment">//让敌方坦克也能攻击</span><br>            enemyTank.attack();<br><br>            enemyTanks.add(enemyTank);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br><br>        <span class="hljs-comment">//游戏窗口背景</span><br>        g.setColor(Color.BLACK);<br>        g.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">800</span>);<br><br>        <span class="hljs-comment">//画出坦克-封装成方法</span><br>        drawTank(heroTank.getX(), heroTank.getY(), g, heroTank.getDirection(), <span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">//绘制玩家坦克的子弹</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; heroTank.getBullets().size(); i++) &#123;<br>            <span class="hljs-type">Bullet</span> <span class="hljs-variable">bullet</span> <span class="hljs-operator">=</span> heroTank.getBullets().get(i);<span class="hljs-comment">//取出子弹</span><br>            <span class="hljs-keyword">if</span>(bullet!=<span class="hljs-literal">null</span> &amp;&amp; bullet.isLive())<br>                drawBullet(bullet.x, bullet.y, g, <span class="hljs-number">0</span>);<span class="hljs-comment">//绘制</span><br>            <span class="hljs-keyword">else</span><br>                heroTank.getBullets().remove(bullet);<span class="hljs-comment">//子弹超出边界，移除</span><br>        &#125;<br><br>        <span class="hljs-comment">//绘制敌方坦克以及子弹</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; enemyTanks.size(); i++) &#123;<br>            <span class="hljs-type">EnemyTank</span> <span class="hljs-variable">enemyTank</span> <span class="hljs-operator">=</span> enemyTanks.get(i);<br>            <span class="hljs-keyword">if</span>(enemyTank.isLive())<br>                drawTank(enemyTank.getX(), enemyTank.getY(), g, enemyTank.getDirection(), <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; enemyTank.getBullets().size(); j++) &#123;<span class="hljs-comment">//这里应使用for遍历,不然会爆并发错误</span><br>                <span class="hljs-type">Bullet</span> <span class="hljs-variable">bullet</span> <span class="hljs-operator">=</span> enemyTank.getBullets().get(j);<span class="hljs-comment">//取出子弹</span><br>                <span class="hljs-keyword">if</span>(bullet != <span class="hljs-literal">null</span> &amp;&amp; bullet.isLive)<br>                    drawBullet(bullet.x, bullet.y, g, <span class="hljs-number">1</span>);<span class="hljs-comment">//绘制</span><br>                <span class="hljs-keyword">else</span><br>                    enemyTank.getBullets().remove(bullet);<span class="hljs-comment">//子弹超出边界，移除</span><br>            &#125;<br><br>        &#125;<br>        <br>        <span class="hljs-comment">//绘制爆炸效果（如果爆炸效果集合中有的话）</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bombs.size(); i++) &#123;<br>            <span class="hljs-type">TankExplosionEffect</span> <span class="hljs-variable">tankExplosionEffect</span> <span class="hljs-operator">=</span> bombs.get(i);<br>            <span class="hljs-keyword">if</span> (tankExplosionEffect.getLife() &gt; <span class="hljs-number">6</span>)&#123;<br>                g.drawImage(image_1, tankExplosionEffect.getX(), tankExplosionEffect.getY(), <span class="hljs-number">60</span>, <span class="hljs-number">60</span>, <span class="hljs-built_in">this</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tankExplosionEffect.getLife() &gt; <span class="hljs-number">3</span>) &#123;<br>                g.drawImage(image_2, tankExplosionEffect.getX(), tankExplosionEffect.getY(), <span class="hljs-number">60</span>, <span class="hljs-number">60</span>, <span class="hljs-built_in">this</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                g.drawImage(image_3, tankExplosionEffect.getX(), tankExplosionEffect.getY(), <span class="hljs-number">60</span>, <span class="hljs-number">60</span>, <span class="hljs-built_in">this</span>);<br>            &#125;<br>            tankExplosionEffect.lifeDown();<br>            <span class="hljs-keyword">if</span>(tankExplosionEffect.getLife() == <span class="hljs-number">0</span>)&#123;<br>                tankExplosionEffect.setLive(<span class="hljs-literal">false</span>);<br>                bombs.remove(tankExplosionEffect);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> x 坦克左上方x轴坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> y 坦克左上方y轴坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> g 画笔</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> direction 坦克的朝向：0 =&gt; 向上 ，1 =&gt; 向下 ，2 =&gt; 向左 ， 3 =&gt; 向右</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 坦克类型：0 =&gt; 玩家坦克，1 =&gt; 敌方坦克</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawTank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, Graphics g, <span class="hljs-type">int</span> direction, <span class="hljs-type">int</span> type)</span>&#123;<br>       ......<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawBullet</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, Graphics g, <span class="hljs-type">int</span> type)</span>&#123;<br>       ......<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        ......<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br><br>    &#125;<br>    <span class="hljs-comment">//是否击中敌方坦克判断，返回被击中的敌方坦克</span><br>    <span class="hljs-keyword">private</span> EnemyTank <span class="hljs-title function_">isHitted</span><span class="hljs-params">(Bullet bullet, Vector&lt;EnemyTank&gt; enemyTanks)</span> &#123;<br>        ......<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(heroTank.getBullets() != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; heroTank.getBullets().size(); i++) &#123;<br>                    <span class="hljs-type">Bullet</span> <span class="hljs-variable">cur_bullet</span> <span class="hljs-operator">=</span> heroTank.getBullets().get(i);<br>                    <span class="hljs-keyword">if</span> (cur_bullet != <span class="hljs-literal">null</span> &amp;&amp; cur_bullet.isLive())&#123;<br>                        <span class="hljs-comment">//是否击中敌方坦克判断</span><br>                        <span class="hljs-type">EnemyTank</span> <span class="hljs-variable">hittedTank</span> <span class="hljs-operator">=</span> isHitted(cur_bullet, enemyTanks);<br>                        <span class="hljs-keyword">if</span> (cur_bullet.isLive() &amp;&amp; hittedTank != <span class="hljs-literal">null</span>) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;======击中了[&quot;</span>+ hittedTank.getX() + <span class="hljs-string">&quot;, &quot;</span> + hittedTank.getY() +<span class="hljs-string">&quot;]=======&quot;</span>);<br>                            <span class="hljs-comment">//销毁被击中的坦克以及该子弹</span><br>                            hittedTank.setLive(<span class="hljs-literal">false</span>);<br>                            cur_bullet.setLive(<span class="hljs-literal">false</span>);<br>                            enemyTanks.remove(hittedTank);<br>                            heroTank.getBullets().remove(cur_bullet);<br>                            <span class="hljs-comment">//坦克移除时增加爆炸效果</span><br>                            <span class="hljs-type">TankExplosionEffect</span> <span class="hljs-variable">tankExplosionEffect</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TankExplosionEffect</span>(hittedTank.getX(), hittedTank.getY());<br>                            bombs.add(tankExplosionEffect);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-built_in">this</span>.repaint();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例：敌方坦克随机移动"><a href="#案例：敌方坦克随机移动" class="headerlink" title="案例：敌方坦克随机移动"></a>案例：敌方坦克随机移动</h2><h3 id="实现过程-1"><a href="#实现过程-1" class="headerlink" title="实现过程"></a>实现过程</h3><ul><li>敌方坦克类<ul><li>修改：<ul><li>1.为了使每一个敌方坦克随机移动，需要使敌方坦克类继承Runnable接口，并实现run()方法【变成一个线程类】；</li><li>2.run()方法中实现坦克随机移动，每个坦克每隔【500,1300】ms（此处随机产生一个时间）都会有一个随机的移动方向并移动一定的距离；</li></ul></li><li>需要注意的点：<ul><li>1.<strong>在编写多线程并发程序时，一定要写线程终止逻辑;</strong></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**敌方坦克类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnemyTank</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Tank</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EnemyTank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">super</span>(x, y);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">this</span>);<br>        thread.start();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">millis</span> <span class="hljs-operator">=</span>(<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">800</span>) + <span class="hljs-number">500</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(millis);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">direction</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">4</span>);<br>            <span class="hljs-built_in">this</span>.setDirection(direction);<br>            <span class="hljs-built_in">this</span>.setSpeed(<span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">switch</span> (direction) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-comment">//让坦克保持一个方向走10次</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>                        <span class="hljs-built_in">this</span>.moveUp();<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Thread.sleep(<span class="hljs-number">100</span>);<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-comment">//让坦克保持一个方向走10次</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>                        <span class="hljs-built_in">this</span>.moveDown();<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Thread.sleep(<span class="hljs-number">100</span>);<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    <span class="hljs-comment">//让坦克保持一个方向走10次</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>                        <span class="hljs-built_in">this</span>.moveLeft();<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Thread.sleep(<span class="hljs-number">100</span>);<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    <span class="hljs-comment">//让坦克保持一个方向走10次</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>                        <span class="hljs-built_in">this</span>.moveRight();<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Thread.sleep(<span class="hljs-number">100</span>);<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//注意：写多线程并发程序时，一定要写线程终止逻辑；</span><br>            <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">this</span>.isLive())<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/TankGame%20V0.3.1.gif?raw=true"></p><h2 id="待改进-x2F-完善"><a href="#待改进-x2F-完善" class="headerlink" title="待改进&#x2F;完善"></a>待改进&#x2F;完善</h2><ul><li>坦克活动范围限制；</li><li>坦克与坦克之间不能重叠；</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>TankGame</category>
      
      <category>TankGame V0.3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TankGame V0.3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-坦克大战V0.3</title>
    <link href="/2023/04/14/Java-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98V0.3/"/>
    <url>/2023/04/14/Java-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98V0.3/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-坦克大战V0-3"><a href="#Java-坦克大战V0-3" class="headerlink" title="Java-坦克大战V0.3"></a>Java-坦克大战V0.3</h1><h2 id="坦克大战游戏介绍"><a href="#坦克大战游戏介绍" class="headerlink" title="坦克大战游戏介绍"></a>坦克大战游戏介绍</h2><ul><li><strong>角色</strong><ul><li>多个敌方坦克，一个玩家坦克；</li></ul></li><li><strong>移动</strong><ul><li>玩家坦克由键盘控制移动，敌方坦克随机自由移动；</li><li>只能在游戏区域内移动；</li></ul></li><li><strong>攻击</strong><ul><li>敌方坦克每次只能发射一颗子弹，玩家坦克一次可以发射5颗子弹；（每次发射的子弹数：即屏幕上只能同时存在的子弹数）</li><li>坦克被子弹击中后，有爆炸效果；</li><li>玩家坦克被击中后，游戏结束；</li></ul></li></ul><h2 id="游戏效果"><a href="#游戏效果" class="headerlink" title="游戏效果"></a>游戏效果</h2><ul><li>2023年4月7日，至此，多线程基础学习完毕，坦克大战V0.3实现效果如下图。</li></ul><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/TankGame%20V0.3.gif?raw=true"></p>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>TankGame</category>
      
      <category>TankGame V0.3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TankGame V0.3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-事件处理机制</title>
    <link href="/2023/04/14/Java-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <url>/2023/04/14/Java-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-事件处理机制"><a href="#Java-事件处理机制" class="headerlink" title="Java-事件处理机制"></a>Java-事件处理机制</h1><ul><li>案例：小球移动</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//面板类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span> &#123;<span class="hljs-comment">//实现键盘监听事件接口</span><br>    <span class="hljs-comment">//为了让小球可以移动，需要将小球的坐标定义成参数；</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ball_x</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ball_y</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br><br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br><br>        g.setColor(Color.BLACK);<br>        g.fillOval(ball_x, ball_y, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<span class="hljs-comment">//绘制小球</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        <span class="hljs-comment">//当有字符输出时触发</span><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        <span class="hljs-comment">//当某个键被按下时触发</span><br><span class="hljs-comment">//        System.out.println((char)e.getKeyCode() + &quot;被按下。&quot;);</span><br><br>        <span class="hljs-comment">//根据用户按下的不同键，控制小球的移动（如：上下左右方向键）</span><br>        <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_DOWN || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;S&#x27;</span> || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;s&#x27;</span>)&#123;<span class="hljs-comment">//KeyEvent.VK_DOWN 常量表示： 向下方向键的Code值</span><br>            ball_y += <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_UP || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;W&#x27;</span> || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;w&#x27;</span>)&#123;<br>            ball_y -= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_RIGHT || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;D&#x27;</span> || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;d&#x27;</span>)&#123;<br>            ball_x += <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_LEFT || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;A&#x27;</span> || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;a&#x27;</span>)&#123;<br>            ball_x -= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-built_in">this</span>.repaint();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        <span class="hljs-comment">//当某个键释放时触发</span><br><span class="hljs-comment">//        System.out.println((char)e.getKeyCode() + &quot;已释放。&quot;);</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//窗口类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Draw</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br>    MyPanel myPanel;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span>&#123;<br>        myPanel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPanel</span>();<br>        <span class="hljs-built_in">this</span>.add(myPanel);<br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">//窗口JFrame对象可以监听键盘事件，即可以监听到JPanel中发生的键盘事件</span><br>        <span class="hljs-built_in">this</span>.addKeyListener(myPanel);<br><br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//主类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Event01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Draw</span>().draw();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="Java事件处理机制"><a href="#Java事件处理机制" class="headerlink" title="Java事件处理机制"></a>Java事件处理机制</h3><ul><li><p>采取 “委派事件模型” ；</p><ul><li>即：事件发生时，产生事件的对象会将 ”信息“ 传递给 ”事件的监听者“ 进行处理；</li><li>如下图所示：</li></ul><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/Event_1.jpg?raw=true"></p></li><li><p>事件源：事件源是一个产生事件的对象，如按钮，窗口；</p></li><li><p>事件：事件是承载事件源状态改变时的对象，对象中保存了当前事件的很多信息，如键盘事件(KeyEvent对象)、鼠标事件(MouseEvent)、窗口事件(WindowEvent)、文本事件(TextEvent)等；</p></li><li><p>事件监听接口：当事件源产生一个事件，可以传递给事件监听者进行处理。如KeyListener、MouseListener等；</p><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/Event_2.jpg?raw=true"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>TankGame</category>
      
      <category>TankGame V0.1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TankGame V0.1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-坦克移动（面向对象+集合选型）</title>
    <link href="/2023/04/14/Java-%E5%9D%A6%E5%85%8B%E7%A7%BB%E5%8A%A8%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1+%E9%9B%86%E5%90%88%E9%80%89%E5%9E%8B%EF%BC%89/"/>
    <url>/2023/04/14/Java-%E5%9D%A6%E5%85%8B%E7%A7%BB%E5%8A%A8%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1+%E9%9B%86%E5%90%88%E9%80%89%E5%9E%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-坦克移动（面向对象-集合选型）"><a href="#Java-坦克移动（面向对象-集合选型）" class="headerlink" title="Java-坦克移动（面向对象+集合选型）"></a>Java-坦克移动（面向对象+集合选型）</h1><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><ul><li>普通Tank类；<ul><li>1.增加了坦克朝向属性direction；</li><li>2.增加了坦克移动速度属性speed；</li><li>3.为了控制坦克移动，将移动操作（即改变坦克的横纵坐标，重新绘制的过程）封装为方法；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 坦克</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tank</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x;<span class="hljs-comment">//坦克的横坐标</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> y;<span class="hljs-comment">//坦克的纵坐标</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> direction;<span class="hljs-comment">//坦克的朝向：0 =&gt; 向上 ，1 =&gt; 向下 ，2 =&gt; 向左 ， 3 =&gt; 向右</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveUp</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.y -= <span class="hljs-built_in">this</span>.speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveDown</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.y += <span class="hljs-built_in">this</span>.speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveRight</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.x += <span class="hljs-built_in">this</span>.speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveLeft</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.x -= <span class="hljs-built_in">this</span>.speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getX</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setX</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getY</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setY</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDirection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> direction;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDirection</span><span class="hljs-params">(<span class="hljs-type">int</span> direction)</span> &#123;<br>        <span class="hljs-built_in">this</span>.direction = direction;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSpeed</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSpeed</span><span class="hljs-params">(<span class="hljs-type">int</span> speed)</span> &#123;<br>        <span class="hljs-built_in">this</span>.speed = speed;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>玩家坦克类；<ul><li>1.继承了普通坦克类；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 游戏玩家坦克</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Tank</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Hero</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">super</span>(x, y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>敌方坦克类；<ul><li>1.继承了普通坦克类；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnemyTank</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Tank</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EnemyTank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">super</span>(x, y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>坦克游戏窗口类；<ul><li>1.为了控制坦克移动，需要在游戏窗口类<strong>添加键盘监听</strong>KeyListener；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 坦克游戏窗口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GameFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<span class="hljs-comment">//画框</span><br>    <span class="hljs-type">GamePanel</span> <span class="hljs-variable">gamePanel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        gamePanel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GamePanel</span>();<br><br>        <span class="hljs-built_in">this</span>.add(gamePanel);<br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">1000</span>, <span class="hljs-number">800</span>);<br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-built_in">this</span>.addKeyListener(gamePanel);<span class="hljs-comment">//添加键盘监听</span><br><br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>坦克游戏绘制区域；<ul><li>1.在paint()方法中实现根据坦克朝向的不同，绘制不同的坦克；</li><li>2.实现<strong>键盘监听</strong>接口KeyListener，并重写该接口中的方法来实现控制坦克向上、向下、向左、向右、加速、减速等操作；</li><li>3.<strong>增加敌方坦克：</strong><ul><li>1）<strong>集合选型</strong>：考虑到后续需要<strong>多线程</strong>来操控敌方坦克，<strong>因此选择Vector</strong>来存储；</li><li>2）初始化敌方坦克：定义变量enemyTankSize作为默认敌方坦克数量，并使用for循环初始化；</li><li>3）绘制敌方坦克：考虑到后续敌方坦克可能被消灭，因此遍历Vector进行绘制时，可以使用普通for循环或者增强for循环，需要注意的是，使用普通for循环时，应遍历当前Vector中坦克的实际数量，例如使用enemyTanks.size()；</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.KeyEvent;<br><span class="hljs-keyword">import</span> java.awt.event.KeyListener;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 坦克大战绘图区域</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/3/2</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GamePanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span> &#123;<span class="hljs-comment">//画板</span><br><br>    <span class="hljs-comment">//定义玩家的坦克</span><br>    <span class="hljs-type">Hero</span> <span class="hljs-variable">hero</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//考虑多线程问题，使用Vector来保存敌方坦克</span><br>    Vector&lt;EnemyTank&gt; enemyTanks = <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">enemyTankSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GamePanel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//初始化玩家坦克</span><br>        hero = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>(<span class="hljs-number">250</span>, <span class="hljs-number">400</span>);<br><br><span class="hljs-comment">//初始化敌方坦克</span><br>        enemyTanks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;EnemyTank&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; enemyTankSize; i++) &#123;<br>            <span class="hljs-type">EnemyTank</span> <span class="hljs-variable">enemyTank</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnemyTank</span>(<span class="hljs-number">100</span> * (i + <span class="hljs-number">1</span>), <span class="hljs-number">100</span>);<br>            enemyTank.setDirection(<span class="hljs-number">1</span>);<br>            enemyTanks.add(enemyTank);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br><br>        <span class="hljs-comment">//游戏窗口背景</span><br>        g.setColor(Color.BLACK);<br>        g.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">800</span>);<br><br>        <span class="hljs-comment">//标题</span><br>        g.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-string">&quot;楷体&quot;</span>, Font.BOLD, <span class="hljs-number">32</span>));<br>        g.setColor(Color.RED);<br>        g.drawString(<span class="hljs-string">&quot;TankGame V0.1 by SEA-365&quot;</span>, <span class="hljs-number">60</span>, <span class="hljs-number">40</span>);<br><br>        <span class="hljs-comment">//画出坦克-封装成方法</span><br>        drawTank(hero.getX(), hero.getY(), g, hero.getDirection(), <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">for</span> (EnemyTank enemyTank : enemyTanks) &#123;<br>            drawTank(enemyTank.getX(), enemyTank.getY(), g, enemyTank.getDirection(), <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> x 坦克左上方x轴坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> y 坦克左上方y轴坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> g 画笔</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> direction 坦克的朝向：0 =&gt; 向上 ，1 =&gt; 向下 ，2 =&gt; 向左 ， 3 =&gt; 向右</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 坦克类型：0 =&gt; 玩家坦克，1 =&gt; 敌方坦克</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawTank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, Graphics g, <span class="hljs-type">int</span> direction, <span class="hljs-type">int</span> type)</span>&#123;<br><br>        <span class="hljs-comment">//不同坦克类型，颜色不同</span><br>        <span class="hljs-keyword">switch</span> (type)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//玩家坦克</span><br>                g.setColor(Color.YELLOW);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//敌方坦克</span><br>                g.setColor(Color.CYAN);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//不同方向的坦克</span><br>        <span class="hljs-keyword">switch</span> (direction)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//向上坦克</span><br>                g.fill3DRect(x, y, <span class="hljs-number">10</span>, <span class="hljs-number">60</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克左矩形（履带）</span><br>                g.fill3DRect(x+<span class="hljs-number">34</span>, y, <span class="hljs-number">10</span>, <span class="hljs-number">60</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克右矩形（履带）</span><br>                g.fill3DRect(x+<span class="hljs-number">10</span>, y+<span class="hljs-number">10</span>, <span class="hljs-number">24</span>, <span class="hljs-number">40</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克中间矩形（驾驶仓）</span><br>                g.fillOval(x+<span class="hljs-number">10</span>, y+<span class="hljs-number">18</span>, <span class="hljs-number">24</span>, <span class="hljs-number">24</span>   );<span class="hljs-comment">//坦克中间圆形（炮台）</span><br>                g.fill3DRect(x+<span class="hljs-number">22</span>, y, <span class="hljs-number">2</span>, <span class="hljs-number">22</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克中间矩形（炮筒）</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//向下坦克</span><br>                g.fill3DRect(x, y, <span class="hljs-number">10</span>, <span class="hljs-number">60</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克左矩形（履带）</span><br>                g.fill3DRect(x+<span class="hljs-number">34</span>, y, <span class="hljs-number">10</span>, <span class="hljs-number">60</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克右矩形（履带）</span><br>                g.fill3DRect(x+<span class="hljs-number">10</span>, y+<span class="hljs-number">10</span>, <span class="hljs-number">24</span>, <span class="hljs-number">40</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克中间矩形（驾驶仓）</span><br>                g.fillOval(x+<span class="hljs-number">10</span>, y+<span class="hljs-number">18</span>, <span class="hljs-number">24</span>, <span class="hljs-number">24</span>   );<span class="hljs-comment">//坦克中间圆形（炮台）</span><br>                g.fill3DRect(x+<span class="hljs-number">22</span>, y+<span class="hljs-number">42</span>, <span class="hljs-number">2</span>, <span class="hljs-number">22</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克中间矩形（炮筒）</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//向左坦克</span><br>                g.fill3DRect(x, y, <span class="hljs-number">60</span>, <span class="hljs-number">10</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克上矩形（履带）</span><br>                g.fill3DRect(x, y+<span class="hljs-number">34</span>, <span class="hljs-number">60</span>, <span class="hljs-number">10</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克下矩形（履带）</span><br>                g.fill3DRect(x+<span class="hljs-number">10</span>, y+<span class="hljs-number">10</span>, <span class="hljs-number">40</span>, <span class="hljs-number">24</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克中间矩形（驾驶仓）</span><br>                g.fillOval(x+<span class="hljs-number">18</span>, y+<span class="hljs-number">10</span>, <span class="hljs-number">24</span>, <span class="hljs-number">24</span>   );<span class="hljs-comment">//坦克中间圆形（炮台）</span><br>                g.fill3DRect(x, y+<span class="hljs-number">22</span>, <span class="hljs-number">22</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克中间矩形（炮筒）</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//向右坦克</span><br>                g.fill3DRect(x, y, <span class="hljs-number">60</span>, <span class="hljs-number">10</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克上矩形（履带）</span><br>                g.fill3DRect(x, y+<span class="hljs-number">34</span>, <span class="hljs-number">60</span>, <span class="hljs-number">10</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克下矩形（履带）</span><br>                g.fill3DRect(x+<span class="hljs-number">10</span>, y+<span class="hljs-number">10</span>, <span class="hljs-number">40</span>, <span class="hljs-number">24</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克中间矩形（驾驶仓）</span><br>                g.fillOval(x+<span class="hljs-number">18</span>, y+<span class="hljs-number">10</span>, <span class="hljs-number">24</span>, <span class="hljs-number">24</span>   );<span class="hljs-comment">//坦克中间圆形（炮台）</span><br>                g.fill3DRect(x+<span class="hljs-number">42</span>, y+<span class="hljs-number">22</span>, <span class="hljs-number">22</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//坦克中间矩形（炮筒）</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_DOWN || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;S&#x27;</span> || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;s&#x27;</span>)&#123;<br>            <span class="hljs-built_in">this</span>.hero.setDirection(<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">this</span>.hero.moveDown();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_UP || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;W&#x27;</span> || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;w&#x27;</span>)&#123;<br>            <span class="hljs-built_in">this</span>.hero.setDirection(<span class="hljs-number">0</span>);<br>            <span class="hljs-built_in">this</span>.hero.moveUp();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_RIGHT || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;D&#x27;</span> || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;d&#x27;</span>)&#123;<br>            <span class="hljs-built_in">this</span>.hero.setDirection(<span class="hljs-number">3</span>);<br>            <span class="hljs-built_in">this</span>.hero.moveRight();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_LEFT || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;A&#x27;</span> || (<span class="hljs-type">char</span>)e.getKeyCode() == <span class="hljs-string">&#x27;a&#x27;</span>)&#123;<br>            <span class="hljs-built_in">this</span>.hero.setDirection(<span class="hljs-number">2</span>);<br>            <span class="hljs-built_in">this</span>.hero.moveLeft();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(e.getKeyCode() == <span class="hljs-string">&#x27;=&#x27;</span>)&#123;<span class="hljs-comment">//按 j 键加快移动速度</span><br>            <span class="hljs-built_in">this</span>.hero.setSpeed(<span class="hljs-built_in">this</span>.hero.getSpeed() + <span class="hljs-number">2</span>);<br><br>        &#125;<br>        <span class="hljs-keyword">if</span>(e.getKeyCode() == <span class="hljs-string">&#x27;-&#x27;</span>)&#123;<span class="hljs-comment">//按 r 键恢复正常移动速度</span><br>            <span class="hljs-built_in">this</span>.hero.setSpeed(<span class="hljs-built_in">this</span>.hero.getSpeed() - <span class="hljs-number">2</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.repaint();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/TankGame%20V0.1.gif?raw=true"></p>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>TankGame</category>
      
      <category>TankGame V0.1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TankGame V0.1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习路线（ChatGPT版）</title>
    <link href="/2023/04/14/Java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%EF%BC%88ChatGPT%E7%89%88%EF%BC%89/"/>
    <url>/2023/04/14/Java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%EF%BC%88ChatGPT%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习路线（ChatGPT版）"><a href="#Java学习路线（ChatGPT版）" class="headerlink" title="Java学习路线（ChatGPT版）"></a>Java学习路线（ChatGPT版）</h1><h3 id="第一阶段：复习Java基础（2个月左右）"><a href="#第一阶段：复习Java基础（2个月左右）" class="headerlink" title="第一阶段：复习Java基础（2个月左右）"></a>第一阶段：复习Java基础（2个月左右）</h3><ul><li>复习Java语法基础，包括数据类型、运算符、表达式、控制语句等；<em><strong>（已完成）</strong></em></li><li>复习面向对象编程的相关知识，包括类和对象、继承、多态、接口等；<em><strong>（已完成）</strong></em></li><li>复习异常处理、集合框架、IO流等常用的Java API；<em><strong>（已完成）</strong></em></li><li>复习常用的设计模式。</li></ul><h3 id="第二阶段：深入Java进阶知识（4个月左右）"><a href="#第二阶段：深入Java进阶知识（4个月左右）" class="headerlink" title="第二阶段：深入Java进阶知识（4个月左右）"></a>第二阶段：深入Java进阶知识（4个月左右）</h3><ul><li>深入学习Java多线程编程，包括线程的创建与管理、线程同步与互斥、线程间通信等；<strong>（进行中）</strong></li><li>深入学习Java网络编程，包括Socket编程、HTTP协议、Web应用等；<strong>（进行中）</strong></li><li>深入学习Java虚拟机（JVM）的原理与应用；</li><li>深入学习Java内存模型、垃圾回收算法等。</li></ul><h3 id="第三阶段：Java框架学习（4个月左右）"><a href="#第三阶段：Java框架学习（4个月左右）" class="headerlink" title="第三阶段：Java框架学习（4个月左右）"></a>第三阶段：Java框架学习（4个月左右）</h3><ul><li>学习Spring框架的基础知识和原理；</li><li>学习Spring MVC和Spring Boot框架的应用；</li><li>学习MyBatis框架的应用和原理。</li></ul><h3 id="第四阶段：Java项目实战（4个月左右）"><a href="#第四阶段：Java项目实战（4个月左右）" class="headerlink" title="第四阶段：Java项目实战（4个月左右）"></a>第四阶段：Java项目实战（4个月左右）</h3><ul><li>实践一个完整的Java Web项目，例如电商平台、博客系统等；</li><li>学习项目管理、版本控制等工具的使用；<em><strong>（进行中）</strong></em></li><li>学习常用的性能优化手段。</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习路线</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习路线</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-坦克2D建模图</title>
    <link href="/2023/04/14/Java-%E5%9D%A6%E5%85%8B2D%E5%BB%BA%E6%A8%A1%E5%9B%BE/"/>
    <url>/2023/04/14/Java-%E5%9D%A6%E5%85%8B2D%E5%BB%BA%E6%A8%A1%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-坦克2D建模图"><a href="#Java-坦克2D建模图" class="headerlink" title="Java-坦克2D建模图"></a>Java-坦克2D建模图</h1><ul><li>如下图</li></ul><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/Tank_Model_2D.jpg?raw=true"></p>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>TankGame</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TankGame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-InputStream和OutputStream组合实现文件拷贝（二进制文件）</title>
    <link href="/2023/04/14/Java-InputStream%E5%92%8COutputStream%E7%BB%84%E5%90%88%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D%EF%BC%88%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%EF%BC%89/"/>
    <url>/2023/04/14/Java-InputStream%E5%92%8COutputStream%E7%BB%84%E5%90%88%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D%EF%BC%88%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-InputStream和OutputStream组合实现文件拷贝（二进制文件）"><a href="#Java-InputStream和OutputStream组合实现文件拷贝（二进制文件）" class="headerlink" title="Java-InputStream和OutputStream组合实现文件拷贝（二进制文件）"></a>Java-InputStream和OutputStream组合实现文件拷贝（二进制文件）</h1><h2 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h2><ul><li>使用字节流实现文件的拷贝时，需注意文件应尽量为二进制文件（图片、视频、音频等），避免文件损失，即使理论上，所有文件最终在计算机中都是字节；</li></ul><h3 id="不带缓冲区（节点流实现）"><a href="#不带缓冲区（节点流实现）" class="headerlink" title="不带缓冲区（节点流实现）"></a>不带缓冲区（节点流实现）</h3><ul><li>写入时，应使用write(buf, 0, read_len)指定写入数据的范围；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SEA</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileIO_fileCopy01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//图片/音乐的拷贝：bfu01.jpg ==&gt; bfu02.jpg</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath_in</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile\\bfu01.jpg&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath_out</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaCode\\projects\\JavaDemo\\hsp_ch19\\testfile\\bfu02.jpg&quot;</span>;<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fi</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fo</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">read_len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            fi = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath_in);<br>            fo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath_out);<br><br>            <span class="hljs-keyword">while</span> ( (read_len = fi.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>                fo.write(buf, <span class="hljs-number">0</span>, read_len);<span class="hljs-comment">//一定要使用这个方法写入，该方法指定了写入数据的范围，可能最后一次数据读取buf没有满；</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(fi != <span class="hljs-literal">null</span>)<br>                fi.close();<br>            <span class="hljs-keyword">if</span>(fo != <span class="hljs-literal">null</span>)<br>                fo.close();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="带缓冲区（处理流实现）"><a href="#带缓冲区（处理流实现）" class="headerlink" title="带缓冲区（处理流实现）"></a>带缓冲区（处理流实现）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: sea-365</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2023/4/21 17:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileIO_fileCopy03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath_in</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch19/testfile/bfu02.jpg&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath_out</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./hsp_ch19/testfile/bfu03.jpg&quot;</span>;<br><span class="hljs-comment">//        String filePath_in = &quot;./hsp_ch19/testfile/LargeImage_JS_ohos-1.mp4&quot;;</span><br><span class="hljs-comment">//        String filePath_out = &quot;./hsp_ch19/testfile/LargeImage_JS_ohos-11.mp4&quot;;</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">buf_in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath_in)));<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">buf_out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath_out)));<br><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>((readLen = buf_in.read(buf)) != -<span class="hljs-number">1</span>)&#123;<br>            buf_out.write(buf, <span class="hljs-number">0</span>, readLen);<br>        &#125;<br><br>        buf_in.close();<br>        buf_out.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
      <category>IO流</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>IO流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习--多表查询总结</title>
    <link href="/2023/04/13/MySQL-%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
    <url>/2023/04/13/MySQL-%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL学习–多表查询总结"><a href="#MySQL学习–多表查询总结" class="headerlink" title="MySQL学习–多表查询总结"></a>MySQL学习–多表查询总结</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>从多张表中查询出指定的数据；</li><li>“笛卡尔积”：笛卡尔乘积是指在数学中，两个集合：A集合 和 B集合 的所有组合情况。<ul><li>注意：<strong>在多表查询时，需要消除无效的笛卡尔积</strong>；</li></ul></li></ul><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/MySQL_multi-table04.jpg?raw=true"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 单表查询<br>select * from emp;<br><br>-- 多表查询 <br>select * from emp, dept where dept_id = dept.id;# 笛卡尔积，使用where消除无效的数据<br></code></pre></td></tr></table></figure><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><ul><li>相当于查询A,B<strong>两集合交集</strong>部分的数据；</li></ul><h5 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h5><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段列表 from 表1, 表2 where 条件...;<br></code></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询每一个员工的姓名、关联的部门名称 （隐式内连接实现）<br>select emp.name 员工姓名, dept.name 部门 from emp, dept where dept_id = dept.id;<br>-- 给表起别名<br>select e.name 员工姓名, d.name 部门 from emp e, dept d where e.dept_id = d.id;<br></code></pre></td></tr></table></figure><h5 id="显式内连接"><a href="#显式内连接" class="headerlink" title="显式内连接"></a>显式内连接</h5><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段列表 from 表1 [inner] join 表2 on 连接条件...;<br></code></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询每一个员工的姓名、关联的部门名称 （显式内连接实现）<br>select emp.name 员工姓名, dept.name 部门 from emp inner join dept on emp.dept_id = dept.id;<br>select e.name 员工姓名, d.name 部门 from emp e join dept d on e.dept_id = d.id;<br></code></pre></td></tr></table></figure><h5 id="显式和隐式内连接的区别"><a href="#显式和隐式内连接的区别" class="headerlink" title="显式和隐式内连接的区别"></a>显式和隐式内连接的区别</h5><ul><li>两种内连接的作用相同；</li><li>但是，<strong>通常建议使用显式内连接语法</strong>，因为它更易于阅读和理解，尤其是在复杂查询中；</li></ul><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><ul><li>左表是指outer join 左边的表；</li><li>右表是指outer join 右边的表；</li></ul><h5 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h5><ul><li>查询<strong>左表所有</strong>的数据，以及<strong>两张表交集</strong>部分的数据；</li></ul><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段列表 from 表1 left [outer] join 表2 on 连接条件...;<br></code></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询emp中的所有数据，和对应的部门信息（左外连接实现）<br>select * from emp left outer join dept on emp.dept_id = dept.id;<br></code></pre></td></tr></table></figure><p>注意：如果emp表中，有一条记录的dept_id字段值为null，则：若使用内连接查询，则不显示该记录；而使用左外连接可以显式；</p><h5 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h5><ul><li>查询<strong>右表所有</strong>的数据，以及<strong>两张表交集</strong>部分的数据；</li></ul><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段列表 from 表1 right [outer] join 表2 on 连接条件...;<br></code></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br>-- 查询dept中的所有数据，和对应的员工信息（右外连接实现）<br>select d.*, e.* from emp e right outer join dept d on e.dept_id = d.id;<br><br>-- 改成左外连接实现<br>select d.*, e.* from dept d left outer join emp e on e.dept_id = d.id;<br></code></pre></td></tr></table></figure><h5 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h5><ul><li>查询当前表与自身的连接查询，<strong>自连接必须使用表的别名</strong>；</li></ul><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段列表 from 表1 别名1 join 表2 别名2 on 连接条件...;<br></code></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询员工 及其 所属领导的名字（自连接-内连接查询）<br>select e1.*, e2.name 所属领导 from emp e1 join emp e2 on e1.managerid = e2.id;<br><br><br>-- 查询所有员工 及其 领导的名字，如果没有领导，也要查询出来；（自连接-外连接查询）<br>select e1.*, e2.name 所属领导 from emp e1 left join emp e2 on e1.managerid = e2.id;<br><br>-- 其实就是，自己和自己连接，再查询；<br></code></pre></td></tr></table></figure><h3 id="联合查询（union-x2F-union-all）"><a href="#联合查询（union-x2F-union-all）" class="headerlink" title="联合查询（union&#x2F;union all）"></a>联合查询（union&#x2F;union all）</h3><ul><li>把多次查询的结果合并起来，形成一个新的查询结果集；</li><li>多次查询的<strong>字段数量</strong>和<strong>类型</strong>需要相同；</li><li><strong>union和union all区别</strong>：去掉all，可以去除查询出来的重复记录；</li></ul><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段列表 from 表1 ...<br>union [all]<br>select 字段列表 from 表2 ...;<br></code></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 把薪资低于8000 的员工， 和 年龄小于 25 的员工都查询出来<br>select * from emp where salary &lt; 80000<br>union all<br>select * from emp where age &lt; 25;<br><br>-- 去掉all，可以去除重复记录<br>select * from emp where salary &lt; 80000<br>union<br>select * from emp where age &lt; 25;<br></code></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>SQL语句中嵌套select语句，又称<strong>嵌套查询</strong>。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from 表1 where 字段名1 = (select 字段名1 from 表2);<br><br>-- 子查询外部的语句可以insert/update/delete/select的任意一个；<br></code></pre></td></tr></table></figure><h4 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h4><ul><li><p>根据子查询结果的不同，分为：</p><ul><li><p>标量子查询（子查询结果为单个值）</p></li><li><p>列子查询（子查询结果为一列）</p></li><li><p>行子查询（子查询结果为一行）</p></li><li><p>表子查询（子查询结果为多行多列）</p></li></ul></li><li><p>根据子查询出现的位置，分为：</p><ul><li>where之后</li><li>from之后</li><li>select之后</li></ul></li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><ul><li><p>子查询结果为单个值</p></li><li><p>案例</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> -- 标量子查询(子查询结果为单个值)<br> <br> select * from emp;<br> <br> -- 1.查询“销售部”的所有员工信息<br>SELECT * FROM emp e WHERE e.dept_id = (<br>SELECT d.id FROM dept d WHERE d.name = &quot;销售部&quot;<br>)<br> <br> -- 2.查询在“赵敏” 之后入职的员工<br> SELECT * FROM emp WHERE entrydate &gt; (<br>SELECT entrydate from emp where name =&quot;赵敏&quot;<br>)<br></code></pre></td></tr></table></figure><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><ul><li>子查询结果为一列(或多列)</li><li>常用的操作符</li></ul><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围之内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><ul><li>案例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 列子查询（子查询结果为一列或多列）<br><br>-- 1.查询“销售部”和“市场部”的所有员工信息   =&gt; IN<br>SELECT * FROM emp WHERE dept_id in (<br>SELECT id FROM dept WHERE name in (&quot;销售部&quot;,&quot;市场部&quot;)<br>)<br><br>-- 2.查询比财务部所有人工资都高的员工信息   =&gt; ALL <br>SELECT * FROM emp WHERE salary &gt; ALL(<br>SELECT salary FROM emp WHERE dept_id = (<br>SELECT id FROM dept WHERE name = &quot;财务部&quot;<br>) <br>)<br><br>SELECT * FROM emp WHERE salary &gt; ( # max()<br>SELECT max(salary) FROM emp WHERE dept_id = (<br>SELECT id FROM dept WHERE name = &quot;财务部&quot;<br>) <br>)<br><br>-- 3.查询比研发部其中任意一人工资高的员工信息   =&gt; ANY/SOME<br>SELECT * FROM emp WHERE salary &gt; ANY(<br>SELECT salary FROM emp WHERE dept_id = (<br>SELECT id FROM dept WHERE name = &quot;研发部&quot;<br>)<br>)<br><br>SELECT * FROM emp WHERE salary &gt; SOME(<br>SELECT salary FROM emp WHERE dept_id = (<br>SELECT id FROM dept WHERE name = &quot;研发部&quot;<br>)<br>)<br></code></pre></td></tr></table></figure><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><ul><li>子查询结果为一行(或多行)</li><li>常用的操作符</li></ul><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>IN</td><td>在指定集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定集合范围内</td></tr></tbody></table><ul><li>案例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 行子查询（返回结果为一行或多行）<br><br>-- 1. 查询与“张无忌”的薪资及直属领导相同的员工信息；<br>SELECT * FROM emp WHERE salary = (<br>SELECT salary FROM emp WHERE name = &quot;张无忌&quot;<br>)<br>AND <br>managerid = (<br>SELECT managerid FROM emp WHERE name = &quot;张无忌&quot;<br>)<br><br><br>SELECT * FROM emp WHERE (salary, managerid) = (<br>SELECT salary, managerid FROM emp WHERE name = &quot;张无忌&quot;<br>)<br></code></pre></td></tr></table></figure><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><ul><li><p>子查询结果为多行多列</p></li><li><p>常用操作符：IN</p></li><li><p>案例</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 表子查询<br><br>-- 1.查询与“小张”，“小陈”的薪资和岗位相同的员工信息<br>SELECT * FROM emp WHERE (salary, job) IN (<br>SELECT salary, job FROM emp WHERE name IN (&quot;小张&quot;, &quot;小陈&quot;)<br>);<br><br><br>-- 2.查询入职日期是“2002-01-01”之后的员工及其部门信息<br><br>-- 隐式内连接 + 列子查询<br>SELECT e.*, d.name 部门 FROM emp e, dept d WHERE e.dept_id = d.id AND entrydate IN (<br>SELECT entrydate FROM emp WHERE entrydate &gt; &quot;2002-01-01&quot;<br>)<br><br>-- 左外连接 + 表子查询<br>SELECT e.*, d.name 部门 FROM (SELECT * FROM emp WHERE entrydate &gt; &quot;2002-01-01&quot;) e LEFT JOIN dept d ON e.dept_id = d.id<br></code></pre></td></tr></table></figure><h2 id="多表查询案例"><a href="#多表查询案例" class="headerlink" title="多表查询案例"></a>多表查询案例</h2><ul><li>案例描述</li></ul><p><img src="https://raw.githubusercontent.com/SEA-365/imgList/main/imgList/MySQL_multi-table05.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 多表查询总结<br><br>-- 1.查询员工的姓名、年龄、职位、部门信息。<br>SELECT emp.name, age, job, dept_id, d.name 部门 FROM emp, dept d WHERE emp.dept_id = d.id<br><br>-- 2.查询年龄小于30岁的员工姓名、年龄、职位、部门信息。<br>SELECT emp.name, age, job, dept_id, d.name 部门 FROM emp, dept d WHERE emp.dept_id = d.id AND age &lt; 30<br><br>-- 3.查询拥有员工的部门ID、部门名称。<br>SELECT id, name FROM dept WHERE (<br>SELECT COUNT(id) FROM emp<br>) &gt; 0<br><br>-- 4.查询所有年龄大于40岁的员工,及其归属的部门名称;如果员工没有分配部门,也需要展示出来。<br>SELECT e.*,d.name 部门 FROM emp e LEFT JOIN dept d ON e.dept_id = d.id WHERE e.age &gt; 40<br><br>-- 5.查询所有员工的工资等级。<br>create table salgrade(<br>    grade int,<br>    losal int,<br>    hisal int<br>) comment &#x27;薪资等级表&#x27;;<br><br>insert into salgrade values (1,0,3000);<br>insert into salgrade values (2,3001,5000);<br>insert into salgrade values (3,5001,8000);<br>insert into salgrade values (4,8001,10000);<br>insert into salgrade values (5,10001,15000);<br>insert into salgrade values (6,15001,20000);<br>insert into salgrade values (7,20001,25000);<br>insert into salgrade values (8,25001,300000);<br><br>SELECT e.name, e.salary, s.grade 薪资等级 FROM emp e LEFT JOIN salgrade s ON e.salary &gt;= s.losal AND e.salary &lt; s.hisal<br><br>-- 6.查询“研发部”所有员工的信息及工资等级。<br>SELECT e.*, s.grade 薪资等级 FROM emp e LEFT JOIN salgrade s ON e.salary &gt;= s.losal AND e.salary &lt; s.hisal WHERE e.dept_id = (<br>SELECT id FROM dept WHERE name = &quot;研发部&quot;<br>)<br><br>-- 7.查询“研发部”员工的平均工资。<br>SELECT AVG(e.salary) 平均薪资 FROM emp e JOIN dept d on e.dept_id = d.id WHERE d.name = &quot;研发部&quot; <br><br>-- 8.查询工资比“赵敏&quot;高的员工信息。<br>SELECT * FROM emp WHERE salary &gt; (<br>SELECT salary FROM emp WHERE name = &quot;赵敏&quot;<br>)<br><br>-- 9.查询比平均薪资高的员工信息。<br>SELECT * FROM emp WHERE salary &gt; (<br>SELECT AVG(e.salary) FROM emp e<br>)<br><br>-- 10.查询低于本部门平均工资的员工信息。<br>SELECT e.* FROM emp e<br>LEFT JOIN ( SELECT dept_id, AVG( salary ) avg_salary FROM emp GROUP BY dept_id ) avg_s ON e.salary &gt; avg_s.avg_salary <br>WHERE<br>e.dept_id = avg_s.dept_id<br><br>-- 11.查询所有的部门信息，并统计部门的员工人数。<br>SELECT d.name, COUNT(e.id) 部门人数 FROM emp e JOIN dept d ON e.dept_id = d.id GROUP BY e.dept_id<br><br>-- 12.查询所有学生的选课情况,展示出学生名称,学号，课程名称。<br>-- (1)3张表连接<br>SELECT s.name, s.no, c.name 课程名称 FROM student s, course c, student_course s_c WHERE s.id = s_c.stu_id AND s_c.course_id = c.id <br><br>-- (2) 表子查询 + 显示内连接<br>SELECT s.name, s.no, s_c_c.name 课程名称 FROM student s JOIN (SELECT s_c.stu_id, s_c.course_id, c.name FROM student_course s_c, course c WHERE s_c.course_id = c.id) s_c_c ON s.id = s_c_c.stu_id<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>多表查询</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>多表查询</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git-同一台电脑使用多个Gitee账号pull/push代码的配置方法</title>
    <link href="/2023/03/31/Git-%E5%90%8C%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AAGitee%E8%B4%A6%E5%8F%B7pullpush%E4%BB%A3%E7%A0%81%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    <url>/2023/03/31/Git-%E5%90%8C%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AAGitee%E8%B4%A6%E5%8F%B7pullpush%E4%BB%A3%E7%A0%81%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-同一台电脑使用多个Gitee账号pull-x2F-push代码的配置方法"><a href="#Git-同一台电脑使用多个Gitee账号pull-x2F-push代码的配置方法" class="headerlink" title="Git-同一台电脑使用多个Gitee账号pull&#x2F;push代码的配置方法"></a>Git-同一台电脑使用多个Gitee账号pull&#x2F;push代码的配置方法</h1><ol><li>生成另一个 SSH 密钥。为新帐户生成不同的密钥对，以便可以与该新帐户关联。您可以使用 <code>ssh-keygen</code> 命令生成另一个密钥对。</li><li>添加新密钥到 Gitee 帐户中。在“我的设置”&gt;“SSH 公钥”下添加新的公钥。</li><li><strong>将 <code>~/.ssh/config</code> 文件配置为使用新的密钥和主机别名。例如，您可以使用以下内容更新 <code>~/.ssh/config</code> 文件：</strong></li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Host gitee.com<br>  HostName gitee.com<br>  <span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>  IdentityFile ~/.ssh/id_rsa<br><br>Host gitee-second-account<br>  HostName gitee.com<br>  <span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>  IdentityFile ~/.ssh/id_rsa_second_account<br></code></pre></td></tr></table></figure><p>请注意，在第二个主机别名中，我们已经定义了一个新的别名 <code>gitee-second-account</code>，并且也指定了新的身份验证密钥 <code>IdentityFile ~/.ssh/id_rsa_second_account</code>。</p><ol><li>克隆存储库时指定要使用的主机别名。在克隆存储库时，使用要使用的主机别名来进行身份验证。例如：</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@gitee.com:user/repo.git<br>$ git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@gitee-second-account:user/repo.git<br></code></pre></td></tr></table></figure><p>这些命令将分别使用 <code>gitee.com</code> 和 <code>gitee-second-account</code> 主机别名来进行身份验证。</p>]]></content>
    
    
    <categories>
      
      <category>Git操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git-提交PR流程和注意事项</title>
    <link href="/2023/03/31/Git-%E6%8F%90%E4%BA%A4PR%E6%B5%81%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2023/03/31/Git-%E6%8F%90%E4%BA%A4PR%E6%B5%81%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-提交PR流程和注意事项"><a href="#Git-提交PR流程和注意事项" class="headerlink" title="Git-提交PR流程和注意事项"></a>Git-提交PR流程和注意事项</h1><ul><li>（1）fork仓库代码到自己的仓库中；</li><li>（2）在自己的仓库中新建分支A，用于修改：<ul><li>若没有权限修改源仓库对应分支代码，则分支A应基于需要修改的分支创建；</li><li>若有权限修改，则可以直接对源仓库对应分支进行修改；</li></ul></li><li>（3）修改完成后，使用以下提交方式进行提交：</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -s -m &quot;message&quot;<br>git push -u origin branch-<span class="hljs-type">name</span><br></code></pre></td></tr></table></figure><ul><li>（4）代码提交后，创建PR，源分支是你已经修改的分支，目标分支是源仓库的对应分支；</li><li>注意：<ul><li>签署“DCO协议”（开发者原创声明协议），<a href="https://gitee.com/link?target=https://dco.openharmony.cn/sign/Z2l0ZWUlMkZvcGVuX2hhcm1vbnk=">在线签署、查看签署状态</a>。<ul><li>这个在线签署即可；</li></ul></li><li>Commits 中未包含 Signed-off-by信息，<a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/contribute/FAQ.md">参考FAQ处理</a>。<ul><li>这个就是在commit时，加上-s，如上面提交方式中的命令；</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git-克隆远程仓库某个分支（两种方式：慢的+快的）</title>
    <link href="/2023/03/31/Git-%E5%85%8B%E9%9A%86%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%9F%90%E4%B8%AA%E5%88%86%E6%94%AF%EF%BC%88%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9A%E6%85%A2%E7%9A%84+%E5%BF%AB%E7%9A%84%EF%BC%89/"/>
    <url>/2023/03/31/Git-%E5%85%8B%E9%9A%86%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%9F%90%E4%B8%AA%E5%88%86%E6%94%AF%EF%BC%88%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9A%E6%85%A2%E7%9A%84+%E5%BF%AB%E7%9A%84%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-克隆远程仓库某个分支（两种方式：慢的-快的）"><a href="#Git-克隆远程仓库某个分支（两种方式：慢的-快的）" class="headerlink" title="Git-克隆远程仓库某个分支（两种方式：慢的+快的）"></a>Git-克隆远程仓库某个分支（两种方式：慢的+快的）</h1><ul><li>在 Git 中，执行 <code>git clone</code> 命令时，默认情况下会将整个仓库克隆下来。</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">//这样写也会先clone整个仓库，比较慢<br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> branch-name <span class="hljs-tag">&lt;repository-url&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>但是，如果你只需要某个分支的内容，可以使用 <code>--single-branch</code> 参数指定只克隆其中一个分支，这样可以减少克隆所需的时间和空间。</p></li><li><p>例如，如果你只需要克隆 <code>master</code> 分支，可以执行以下命令：</p></li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">//比较快<br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">--single-branch</span> -b branch-name <span class="hljs-tag">&lt;repository-url&gt;</span><br></code></pre></td></tr></table></figure><ul><li>这将只克隆 <code>master</code> 分支的内容，并且不会下载其他分支、标签或提交历史。这样可以加快克隆的速度，特别是对于大型仓库和慢速网络连接。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Git操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习-约束概述</title>
    <link href="/2023/03/19/MySQL--%E7%BA%A6%E6%9D%9F%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/03/19/MySQL--%E7%BA%A6%E6%9D%9F%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL学习–约束概述"><a href="#MySQL学习–约束概述" class="headerlink" title="MySQL学习–约束概述"></a>MySQL学习–约束概述</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>约束是作用于表中字段上的规则，用于限制存储在表中的数据。</li></ul><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>保证数据库中数据的正确性、有效性和完整性。</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该宇段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束**(8.0.16版本之后)**</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><ul><li>约束是作用于表中字段上的，在创建&#x2F;修改表时可以为表中的字段添加约束。</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>约束</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>约束</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习--多表关系介绍</title>
    <link href="/2023/03/19/MySQL-%E5%A4%9A%E8%A1%A8%E5%85%B3%E7%B3%BB%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/03/19/MySQL-%E5%A4%9A%E8%A1%A8%E5%85%B3%E7%B3%BB%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL学习–多表关系介绍"><a href="#MySQL学习–多表关系介绍" class="headerlink" title="MySQL学习–多表关系介绍"></a>MySQL学习–多表关系介绍</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>进行数据库表结构设计时，根据业务需求以及业务模块之间的关系，分析各个表结构之间的联系，基本分为以下三种：<ul><li>一对一</li><li>一对多</li><li>多对多</li></ul></li></ul><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><p>案例：用户 与 用户详情的关系</p><p>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，提升效率；</p><p>实现：在任意一方加入外键，关联另外一方的主键，并且<strong>设置外键字段值为唯一的</strong>（即不允许重复，设置UNIQUE约束）</p><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/MySQL_multi-table03.jpg?raw=true"></p><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><ul><li><p>案例：部门 与 员工 的关系；</p></li><li><p>关系：一个部门对应多个员工，一个员工仅对应一个部门；</p></li><li><p>实现：在 “多” 的一方（员工）建立外键，指向 “一” 的一方的主键；</p></li></ul><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/MySQL_multi-table01.jpg?raw=true"></p><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><ul><li>案例：学生 和 课程 的关系；</li><li>关系：一个学生可以选择多门课程，一门课程可以被多名学生选择；</li><li>实现：<strong>建立第三张中间表，中间表至少包含两个外键，分别关联两方的主键；</strong></li></ul><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/MySQL_multi-table02.jpg?raw=true"></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>多表查询</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>多表查询</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>背包问题-背包问题总结</title>
    <link href="/2023/03/19/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>/2023/03/19/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="背包问题-01背包问题"><a href="#背包问题-01背包问题" class="headerlink" title="背包问题-01背包问题"></a>背包问题-01背包问题</h1><h2 id="背包问题分类"><a href="#背包问题分类" class="headerlink" title="背包问题分类"></a>背包问题分类</h2><p>（图片来源：代码随想录）</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210117171307407.png"></p><ul><li>主要学习01背包和完全背包：<ul><li>01背包：物品数量是有限的。</li><li><strong>完全背包：物品数量是无限的</strong>。</li></ul></li></ul><h2 id="01背包举例"><a href="#01背包举例" class="headerlink" title="01背包举例"></a>01背包举例</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">有n件物品和一个最多能背重量为w 的背包。<br>第<span class="hljs-selector-tag">i</span>件物品的重量是weight<span class="hljs-selector-attr">[i]</span>，得到的价值是value<span class="hljs-selector-attr">[i]</span> 。<br>每件物品只能用一次，求解将哪些物品装入背包里物品价值总和最大。<br></code></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-number">1</span> <span class="hljs-number">15</span><br><span class="hljs-number">3</span> <span class="hljs-number">20</span><br><span class="hljs-number">4</span> <span class="hljs-number">30</span><br><br>解释：<br>第一行输入两个整数<span class="hljs-built_in">n</span>, w分别表示物品数量和背包最大容量；<br>后面接着输入<span class="hljs-built_in">n</span>行，每行两个整数，表示物品的重量和价值；<br></code></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">35<br></code></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>一般情况下，看到题目可以先把暴力解题的思路想出来，再考虑如何优化；<ul><li>1.暴力解法</li><li>2.01背包解法</li></ul></li></ul><h4 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h4><ul><li>每个物品都有 取 和 不取 两种状态，可以使用回溯法遍历所有情况，得出解；</li><li>时间复杂度：2^n</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>&#123;<br>    <span class="hljs-keyword">static</span> List&lt;Integer&gt; ans_value;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> cur_value;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> cur_weight;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backTrack</span><span class="hljs-params">(<span class="hljs-type">int</span>[] weight, <span class="hljs-type">int</span>[] value, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> index)</span>&#123;<br>        <span class="hljs-keyword">if</span>(index == weight.length)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> index; i &lt; weight.length; i++) &#123;<br>            cur_weight += weight[i];<br>            cur_value += value[i];<br><br>            <span class="hljs-keyword">if</span>(cur_weight &lt;= m)&#123;<span class="hljs-comment">//重量没有超出背包容量</span><br>                ans_value.add(cur_value);<br>                <span class="hljs-keyword">if</span>(cur_weight &lt; m)<span class="hljs-comment">//背包还能装</span><br>                    backTrack(weight, value, m, index+<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-comment">//装满了，或者超出背包容量了</span><br>            cur_weight -= weight[i];<br>            cur_value -= value[i];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getMaxValue</span><span class="hljs-params">(<span class="hljs-type">int</span>[] weight, <span class="hljs-type">int</span>[] value, <span class="hljs-type">int</span> m)</span>&#123;<br>        cur_value = <span class="hljs-number">0</span>;<br>        cur_weight = <span class="hljs-number">0</span>;<br>        ans_value = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        backTrack(weight, value, m, <span class="hljs-number">0</span>);<br><br>        System.out.println(ans_value);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Integer i : ans_value) &#123;<br>            <span class="hljs-keyword">if</span>(i &gt; ans)<br>                ans = i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">beibao_03</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">Solution</span> <span class="hljs-variable">solution</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Solution</span>();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span>[] weight = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-type">int</span>[] value = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            weight[i] = scanner.nextInt();<br>            value[i] = scanner.nextInt();<br>        &#125;<br>        System.out.println(solution.getMaxValue(weight, value, m));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="01背包解法"><a href="#01背包解法" class="headerlink" title="01背包解法"></a>01背包解法</h4>]]></content>
    
    
    <categories>
      
      <category>代码随想录</category>
      
      <category>背包问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>背包问题</tag>
      
      <tag>01背包</tag>
      
      <tag>完全背包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贪心算法-LeetCode_134</title>
    <link href="/2023/03/19/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-LeetCode_134/"/>
    <url>/2023/03/19/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-LeetCode_134/</url>
    
    <content type="html"><![CDATA[<h1 id="贪心算法-LeetCode-134"><a href="#贪心算法-LeetCode-134" class="headerlink" title="贪心算法-LeetCode_134"></a>贪心算法-LeetCode_134</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">在一条环路上有 n 个加油站，其中第 <span class="hljs-selector-tag">i</span> 个加油站有汽油 gas<span class="hljs-selector-attr">[i]</span> 升。<br><br>你有一辆油箱容量无限的的汽车，从第 <span class="hljs-selector-tag">i</span> 个加油站开往第 <span class="hljs-selector-tag">i</span>+<span class="hljs-number">1</span> 个加油站需要消耗汽油 cost<span class="hljs-selector-attr">[i]</span> 升。你从其中的一个加油站出发，开始时油箱为空。<br><br>给定两个整数数组 gas 和 cost ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -<span class="hljs-number">1</span> 。如果存在解，则 保证 它是 唯一 的。<br></code></pre></td></tr></table></figure><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]<br>输出: 3<br>解释:<br>从<span class="hljs-number"> 3 </span>号加油站(索引为<span class="hljs-number"> 3 </span>处)出发，可获得<span class="hljs-number"> 4 </span>升汽油。此时油箱有 =<span class="hljs-number"> 0 </span>+<span class="hljs-number"> 4 </span>=<span class="hljs-number"> 4 </span>升汽油<br>开往<span class="hljs-number"> 4 </span>号加油站，此时油箱有<span class="hljs-number"> 4 </span>-<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 5 </span>=<span class="hljs-number"> 8 </span>升汽油<br>开往<span class="hljs-number"> 0 </span>号加油站，此时油箱有<span class="hljs-number"> 8 </span>-<span class="hljs-number"> 2 </span>+<span class="hljs-number"> 1 </span>=<span class="hljs-number"> 7 </span>升汽油<br>开往<span class="hljs-number"> 1 </span>号加油站，此时油箱有<span class="hljs-number"> 7 </span>-<span class="hljs-number"> 3 </span>+<span class="hljs-number"> 2 </span>=<span class="hljs-number"> 6 </span>升汽油<br>开往<span class="hljs-number"> 2 </span>号加油站，此时油箱有<span class="hljs-number"> 6 </span>-<span class="hljs-number"> 4 </span>+<span class="hljs-number"> 3 </span>=<span class="hljs-number"> 5 </span>升汽油<br>开往<span class="hljs-number"> 3 </span>号加油站，你需要消耗<span class="hljs-number"> 5 </span>升汽油，正好足够你返回到<span class="hljs-number"> 3 </span>号加油站。<br>因此，3 可为起始索引。<br></code></pre></td></tr></table></figure><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入: gas = [2,3,4], cost = [3,4,3]<br>输出: -1<br>解释:<br>你不能从<span class="hljs-number"> 0 </span>号或<span class="hljs-number"> 1 </span>号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。<br>我们从<span class="hljs-number"> 2 </span>号加油站出发，可以获得<span class="hljs-number"> 4 </span>升汽油。 此时油箱有 =<span class="hljs-number"> 0 </span>+<span class="hljs-number"> 4 </span>=<span class="hljs-number"> 4 </span>升汽油<br>开往<span class="hljs-number"> 0 </span>号加油站，此时油箱有<span class="hljs-number"> 4 </span>-<span class="hljs-number"> 3 </span>+<span class="hljs-number"> 2 </span>=<span class="hljs-number"> 3 </span>升汽油<br>开往<span class="hljs-number"> 1 </span>号加油站，此时油箱有<span class="hljs-number"> 3 </span>-<span class="hljs-number"> 3 </span>+<span class="hljs-number"> 3 </span>=<span class="hljs-number"> 3 </span>升汽油<br>你无法返回<span class="hljs-number"> 2 </span>号加油站，因为返程需要消耗<span class="hljs-number"> 4 </span>升汽油，但是你的油箱只有<span class="hljs-number"> 3 </span>升汽油。<br>因此，无论怎样，你都不可能绕环路行驶一周。<br></code></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/gas-station">https://leetcode.cn/problems/gas-station</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h3><ul><li><p>一般情况下，看到题目都是先想暴力解法，对于本题，我想的暴力解法如下：</p><ul><li>1.计算每个加油站能够剩余的gas。即经过当前加油站能够加的汽油减去下一加油站耗费的汽油；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; profits.length; i++) &#123;<span class="hljs-comment">//o(n)</span><br>            profits[i] =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Profit</span>(gas[i] - cost[i], <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>2.遍历从每一个加油站出发，是否能够到达终点；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; profits.length; i++) &#123;<span class="hljs-comment">//o(n)</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> getMaxIndex(profits);<span class="hljs-comment">//o(n)</span><br>    <span class="hljs-keyword">if</span>(profits[index].profit &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    profits[index].isUsed = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(isloop(profits, index)) &#123;<span class="hljs-comment">//o(n)</span><br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>不出意外地，超时了。。。</p></li></ul><h3 id="贪心解法"><a href="#贪心解法" class="headerlink" title="贪心解法"></a>贪心解法</h3><ul><li>害，这个贪心算法，我其实到现在也不太能上道。</li><li>回归正题，贪心思路是在题解区看到的，挺简洁的：<ul><li>1.累加经过所有加油站能够剩余的汽油total_gas；</li><li>2.在1的同时，累加从index出发的剩余汽油量cur_gas：<ul><li>直到经过当前加油站去往下一汽油站时，剩余汽油量cur_gas小于0时，将出发起点index重置为当前汽油站的下一站i+1；</li><li>重置剩余汽油量cur_gas &#x3D; 0;</li></ul></li><li>3.遍历完后，如果total_gas &lt; 0，说明走完一周耗费的汽油大于能够加到的汽油量，因此返回-1；否则返回index，表示出发点；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">total_gas</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">cur_gas</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; gas.length; i++) &#123;<br>    total_gas += gas[i] - cost[i];<br>    cur_gas += gas[i] - cost[i];<br><br>    <span class="hljs-keyword">if</span>(cur_gas &lt; <span class="hljs-number">0</span>)&#123;<br>        index = i + <span class="hljs-number">1</span>;<br>        cur_gas = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (total_gas &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> index;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录</category>
      
      <category>贪心算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
      <tag>代码随想录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯2020-天干地支（纪年法常识）</title>
    <link href="/2023/03/11/%E8%93%9D%E6%A1%A5%E6%9D%AF2020-%E5%A4%A9%E5%B9%B2%E5%9C%B0%E6%94%AF%EF%BC%88%E7%BA%AA%E5%B9%B4%E6%B3%95%E5%B8%B8%E8%AF%86%EF%BC%89/"/>
    <url>/2023/03/11/%E8%93%9D%E6%A1%A5%E6%9D%AF2020-%E5%A4%A9%E5%B9%B2%E5%9C%B0%E6%94%AF%EF%BC%88%E7%BA%AA%E5%B9%B4%E6%B3%95%E5%B8%B8%E8%AF%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="蓝桥杯2020-天干地支（纪年法常识）"><a href="#蓝桥杯2020-天干地支（纪年法常识）" class="headerlink" title="蓝桥杯2020-天干地支（纪年法常识）"></a>蓝桥杯2020-天干地支（纪年法常识）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>古代中国使用天干地支来记录当前的年份。<br>天干一共有十个，分别为：甲（jiǎ）、乙（yǐ）、丙（bǐng）、丁（dīng）、戊<br>（wù）、己（jǐ）、庚（gēng）、辛（xīn）、壬（rén）、癸（guǐ）。<br>地支一共有十二个，分别为：子（zǐ）、丑（chǒu）、寅（yín）、卯（mǎo）、辰（chén）、巳（sì）、午（wǔ）、未（wèi）、申（shēn）、酉（yǒu）、戌（xū）、亥（hài）。<br>将天干和地支连起来，就组成了一个天干地支的年份，例如：甲子。2020 年是庚子年。<br>每过一年，天干和地支都会移动到下一个。例如 2021 年是辛丑年。<br>每过 60 年，天干会循环 6 轮，地支会循环 5 轮，所以天干地支纪年每 60年轮回一次。例如 1900 年，1960 年，2020 年都是庚子年。<br>给定一个公元纪年的年份，请输出这一年的天干地支年份。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入一行包含一个正整数，表示公元年份。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个拼音，表示天干地支的年份，天干和地支都用小写拼音表示（不表示声调），之间不要加入任何多余的字符。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">2020</span><br></code></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">gengzi</span><br></code></pre></td></tr></table></figure><p>题目链接：<a href="https://www.dotcpp.com/oj/problem2599.html">https://www.dotcpp.com/oj/problem2599.html</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>本题思路简单，本质是需要知道天干地支纪念法是从公元4年为甲子开始计算的，因此需要用：<ul><li>（年份-4）% 10 得到天干；</li><li>（年份-4）% 12 得到地支；</li></ul></li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> T_2599;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br><span class="hljs-keyword">static</span> String[] tiangan = &#123;<br><span class="hljs-string">&quot;jia&quot;</span>, <span class="hljs-string">&quot;yi&quot;</span>, <span class="hljs-string">&quot;bing&quot;</span>, <span class="hljs-string">&quot;ding&quot;</span>, <span class="hljs-string">&quot;wu&quot;</span>, <br><span class="hljs-string">&quot;ji&quot;</span>, <span class="hljs-string">&quot;geng&quot;</span>, <span class="hljs-string">&quot;xin&quot;</span>, <span class="hljs-string">&quot;ren&quot;</span>, <span class="hljs-string">&quot;gui&quot;</span><br>&#125;;<br><br><span class="hljs-keyword">static</span> String[] dizhi = &#123;<br><span class="hljs-string">&quot;zi&quot;</span>, <span class="hljs-string">&quot;chou&quot;</span>, <span class="hljs-string">&quot;yin&quot;</span>, <span class="hljs-string">&quot;mao&quot;</span>, <span class="hljs-string">&quot;chen&quot;</span>, <span class="hljs-string">&quot;si&quot;</span>,<br><span class="hljs-string">&quot;wu&quot;</span>, <span class="hljs-string">&quot;wei&quot;</span>, <span class="hljs-string">&quot;shen&quot;</span>, <span class="hljs-string">&quot;you&quot;</span>, <span class="hljs-string">&quot;xu&quot;</span>, <span class="hljs-string">&quot;hai&quot;</span><br>&#125;;<br><br><span class="hljs-keyword">static</span> String <span class="hljs-title function_">getAns</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> &#123;<br><span class="hljs-keyword">return</span> tiangan[Math.floorMod((year-<span class="hljs-number">4</span>), <span class="hljs-number">10</span>)] + <span class="hljs-string">&quot;&quot;</span> + dizhi[Math.floorMod((year-<span class="hljs-number">4</span>), <span class="hljs-number">12</span>)];<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        System.out.println(getAns(year));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>蓝桥杯</category>
      
      <category>2020年</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯2020-答疑（涉及一个key多个value排序问题的解决策略）</title>
    <link href="/2023/03/11/%E8%93%9D%E6%A1%A5%E6%9D%AF2020-%E7%AD%94%E7%96%91%EF%BC%88%E6%B6%89%E5%8F%8A%E4%B8%80%E4%B8%AAkey%E5%A4%9A%E4%B8%AAvalue%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    <url>/2023/03/11/%E8%93%9D%E6%A1%A5%E6%9D%AF2020-%E7%AD%94%E7%96%91%EF%BC%88%E6%B6%89%E5%8F%8A%E4%B8%80%E4%B8%AAkey%E5%A4%9A%E4%B8%AAvalue%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="蓝桥杯2020-答疑（涉及一个key多个value排序问题的解决策略）"><a href="#蓝桥杯2020-答疑（涉及一个key多个value排序问题的解决策略）" class="headerlink" title="蓝桥杯2020-答疑（涉及一个key多个value排序问题的解决策略）"></a>蓝桥杯2020-答疑（涉及一个key多个value排序问题的解决策略）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 n 位同学同时找老师答疑。每位同学都预先估计了自己答疑的时间。老师可以安排答疑的顺序，同学们要依次进入老师办公室答疑。<br>一位同学答疑的过程如下：<br>首先进入办公室，编号为 i 的同学需要 s i 毫秒的时间。然后同学问问题老师解答，编号为 i 的同学需要 a i 毫秒的时间。<br>答疑完成后，同学很高兴，会在课程群里面发一条消息，需要的时间可以忽略。最后同学收拾东西离开办公室，需要 e i 毫秒的时间。一般需要 10 秒、20 秒或 30 秒，即 e i 取值为 10000，20000 或 30000。一位同学离开办公室后，紧接着下一位同学就可以进入办公室了。答疑从 0 时刻开始。老师想合理的安排答疑的顺序，使得同学们在课程群里面发消息的时刻之和最小。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入第一行包含一个整数 n，表示同学的数量。<br>接下来 n 行，描述每位同学的时间。其中第 i 行包含三个整数 s i , a i , e i ，意<br>义如上所述。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个整数，表示同学们在课程群里面发消息的时刻之和最小是多少。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">10000 </span><span class="hljs-number">10000</span> <span class="hljs-number">10000</span><br><span class="hljs-symbol">20000 </span><span class="hljs-number">50000</span> <span class="hljs-number">20000</span><br><span class="hljs-symbol">30000 </span><span class="hljs-number">20000</span> <span class="hljs-number">30000</span><br></code></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">280000<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【样例说明】<br>按照 1, 3, 2 的顺序答疑，发消息的时间分别是 20000, 80000, 180000。<br>【评测用例规模与约定】<br>对于 30% 的评测用例，1 ≤ n ≤ 20。<br>对于 60% 的评测用例，1 ≤ n ≤ 200。<br>对于所有评测用例，1 ≤ n ≤ 1000，1 ≤ s i ≤ 60000，1 ≤ a i ≤ 1000000，e i ∈ {10000,20000,30000}，即 e i 一定是 10000、20000、30000 之一</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li><p>为了使得发消息的时刻和最小，需要根据所有学生的三个操作总耗时来安排顺序；</p><ul><li>1.定义了三个数组s[i], a[i], e[i]，分别表示每个同学的三个操作分别耗时；</li><li>2.根据三个操作总耗时来安排顺序；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getSeq(<span class="hljs-type">int</span>[] spent3_time) &#123;<br>Integer[] seq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[spent3_time.length];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; seq.length; i++) &#123;<br>seq[i] = i;<br>&#125;<br>       <br>Arrays.sort(seq, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<span class="hljs-comment">//根据总耗时获取顺序</span><br>  <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer i1, Integer i2)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>               <span class="hljs-keyword">return</span> Integer.compare(spent3_time[i1], spent3_time[i2]);<br>&#125;<br><br>&#125;);<br><br><span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[seq.length];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; seq.length; i++) &#123;<br>        result[i] = seq[i].intValue();<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAns</span><span class="hljs-params">(<span class="hljs-type">int</span>[] s, <span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span>[] e)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">cur_time</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">send_time</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span>[] spent3_time = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[a.length];<br>  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; spent3_time.length; i++) &#123;<br>spent3_time[i] = s[i]+a[i]+e[i];<br>&#125;<br>  <br><br><span class="hljs-type">int</span>[] seq = getSeq(spent3_time);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; seq.length; i++) &#123;<br>cur_time += s[seq[i]];<span class="hljs-comment">//进</span><br>cur_time += a[seq[i]];<span class="hljs-comment">//问</span><br><br>send_time += cur_time;<span class="hljs-comment">//发信息时刻</span><br><br>cur_time += e[seq[i]];<span class="hljs-comment">//出</span><br>&#125;<br><br><span class="hljs-keyword">return</span> send_time;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>发现，不行，提交之后，只有45分。。。。</p></li><li><p>为啥呢，按照我的理解，并没有发现问题啊，然后发现大家遇到类似这种需要根据某一个值对多元组进行排序时，都会写成结构体（C）或类（C++&#x2F;Java）;</p></li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> T_2594;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Object&gt;&#123;<span class="hljs-comment">//写成类，模拟多个value根据一个key进行排序</span><br><span class="hljs-type">long</span> s;<br><span class="hljs-type">long</span> a;<br><span class="hljs-type">long</span> e;<br><span class="hljs-type">long</span> sum;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Stu</span><span class="hljs-params">()</span> &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Stu</span><span class="hljs-params">(<span class="hljs-type">long</span> s, <span class="hljs-type">long</span> a, <span class="hljs-type">long</span> e)</span> &#123;<br><span class="hljs-built_in">this</span>.s = s;<br><span class="hljs-built_in">this</span>.a = a;<br><span class="hljs-built_in">this</span>.e = e;<br><span class="hljs-built_in">this</span>.sum = s+a+e;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object o)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) (<span class="hljs-built_in">this</span>.sum - ((Stu)o).sum);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot; stu : s=&quot;</span> + <span class="hljs-built_in">this</span>.s + <span class="hljs-string">&quot;  a=&quot;</span> + <span class="hljs-built_in">this</span>.a + <span class="hljs-string">&quot;  e=&quot;</span> + <span class="hljs-built_in">this</span>.e + <span class="hljs-string">&quot; sum=&quot;</span> + <span class="hljs-built_in">this</span>.sum;<br>&#125;<br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <br><span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getAns</span><span class="hljs-params">(Stu[] stus)</span> &#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">send_time</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">cur_time</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>Arrays.sort(stus);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; stus.length; i++) &#123;<br>cur_time += stus[i].s;<br>cur_time += stus[i].a;<br>            <br>send_time += cur_time;<span class="hljs-comment">//记录时刻</span><br>            <br>cur_time += stus[i].e;<br>&#125;<br><br><span class="hljs-keyword">return</span> send_time;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br><span class="hljs-type">long</span> s, a, e;<br><br>Stu[] stus = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stu</span>[n];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>s = scanner.nextLong();<br>a = scanner.nextLong();<br>e = scanner.nextLong();<br>stus[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stu</span>(s, a, e);<br>&#125;<br><br>System.out.println(getAns(stus));<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>我认为思路上来看，不写成类也是可以的，但是提交后只有45分。。。</li></ul>]]></content>
    
    
    <categories>
      
      <category>蓝桥杯</category>
      
      <category>2020年</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯2020-八次求和（大数加法+大数取余）</title>
    <link href="/2023/03/08/%E8%93%9D%E6%A1%A5%E6%9D%AF2020-%E5%85%AB%E6%AC%A1%E6%B1%82%E5%92%8C%EF%BC%88%E5%A4%A7%E6%95%B0%E5%8A%A0%E6%B3%95+%E5%A4%A7%E6%95%B0%E5%8F%96%E4%BD%99%EF%BC%89/"/>
    <url>/2023/03/08/%E8%93%9D%E6%A1%A5%E6%9D%AF2020-%E5%85%AB%E6%AC%A1%E6%B1%82%E5%92%8C%EF%BC%88%E5%A4%A7%E6%95%B0%E5%8A%A0%E6%B3%95+%E5%A4%A7%E6%95%B0%E5%8F%96%E4%BD%99%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="蓝桥杯2020-八次求和（大数加法-大数取余）"><a href="#蓝桥杯2020-八次求和（大数加法-大数取余）" class="headerlink" title="蓝桥杯2020-八次求和（大数加法+大数取余）"></a>蓝桥杯2020-八次求和（大数加法+大数取余）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定正整数n ，求(1^8 + 2^8 + … + n^8) mod 123456789。其中 mod 表示取余。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入的第一行包含一个整数 。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行，包含一个整数，表示答案。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">257<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 20% 的评测用例，1 &lt;&#x3D; n &lt;&#x3D; 20 。</p><p>对于 60% 的评测用例，1 &lt;&#x3D; n &lt;&#x3D; 1000 。</p><p>对于所有评测用例， 1 &lt;&#x3D; n &lt;&#x3D; 1000000。</p><p>题目链接：<a href="https://www.dotcpp.com/oj/problem2587.html">https://www.dotcpp.com/oj/problem2587.html</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>一看题目，先不考虑n的取值范围的话，直接写；</li><li>考虑到n的范围，最大能到1000000，n^8就是10^48，远远超出了long类型的范围；</li><li>因此，刚学习了Java的BigInteger，可以用上；</li><li>需要注意的是，我在使用大数的过程中，不能定义多余的变量或者数组，尤其避免在循环中定义新的变量，会爆内存！</li><li>（在不考虑n的范围时，将代码写到最简形式，后面可以直接换成大数BIgInteger）</li></ul><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 思路：大数加法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> n</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">static</span> BigInteger <span class="hljs-title function_">getAns</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> BigInteger.ZERO;<br>BigInteger bigInteger;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>bigInteger = BigInteger.valueOf(i).pow(<span class="hljs-number">8</span>);<br>ans = ans.add(bigInteger);<br>&#125;<br><br><span class="hljs-keyword">return</span> ans.mod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;123456789&quot;</span>));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>System.out.println(getAns(n));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判题结果"><a href="#判题结果" class="headerlink" title="判题结果"></a>判题结果</h3><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/T_2587_Java.png?raw=true"></p><ul><li>但凡多定义了一个临时变量，都没满分；</li></ul>]]></content>
    
    
    <categories>
      
      <category>蓝桥杯</category>
      
      <category>2020年</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯2020-数字三角形（动态规划+找规律）</title>
    <link href="/2023/03/07/%E8%93%9D%E6%A1%A5%E6%9D%AF2020-%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92+%E6%89%BE%E8%A7%84%E5%BE%8B%EF%BC%89/"/>
    <url>/2023/03/07/%E8%93%9D%E6%A1%A5%E6%9D%AF2020-%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92+%E6%89%BE%E8%A7%84%E5%BE%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="蓝桥杯2020-数字三角形（动态规划-找规律）"><a href="#蓝桥杯2020-数字三角形（动态规划-找规律）" class="headerlink" title="蓝桥杯2020-数字三角形（动态规划+找规律）"></a>蓝桥杯2020-数字三角形（动态规划+找规律）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="https://www.dotcpp.com/oj/upload/image/20210808/20210808164024_93532.png" alt="蓝桥杯2020年第十一届省赛真题-数字三角形"></p><p>上图给出了一个数字三角形。从三角形的顶部到底部有很多条不同的路径。对于每条路径，把路径上面的数加起来可以得到一个和，你的任务就是找到最大的和。<br>路径上的每一步只能从一个数走到下一层和它最近的左边的那个数或者右边的那个数。此外，向左下走的次数与向右下走的次数相差不能超过 1。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入的第一行包含一个整数N(1&lt;N≤100)，表示三角形的行数。下面的 N行给出数字三角形。数字三角形上的数都是 0至 100之间的整数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个整数，表示答案。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-number">7</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <br><span class="hljs-symbol">2 </span><span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">27<br></code></pre></td></tr></table></figure><p>题目链接：<a href="https://www.dotcpp.com/oj/problem2584.html">https://www.dotcpp.com/oj/problem2584.html</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li><p>首先，题目有两个重要的点：</p><ul><li>要点1：每一步只能从一个数走到下一层和它最近的左边的那个数或者右边的那个数（即在二维数组中，当前节点（i, j）要么是从节点(i - 1, j) 来的，要么是从节点(i - 1, j - 1)来的两种情况）；</li><li>要点2：向左下走的次数与向右下走的次数相差不能超过 1（<strong>这个条件最为关键，需要找规律</strong>）；</li></ul></li><li><p>解决要点1只需要动态规划即可：</p><ul><li>分三种情况：<ul><li>1.当前节点（i, j）既可以是从节点(i - 1, j) 来的，也可以是从节点(i - 1, j - 1)来的，取最大值；</li><li>2.当前节点（i, j）只能从节点(i - 1, j)来；</li><li>3.当前节点（i, j）只能从节点(i - 1, j - 1)来；</li></ul></li></ul></li><li><p>解决要点2则需要找规律，这里我做的时候没有想到，参考的是下图，将每一层都看做最底层来找出每一层符合条件的终点。</p><ul><li>根据下图可以发现:<ul><li>当最底层（以最上层为第1层来算）为奇数层时，符合条件的终点只会是最底层的中间节点（只有一个）；</li><li>当最底层（以最上层为第1层来算）为偶数层时，符合条件的终点只会是最底层的中间两个节点（取大者）；</li></ul></li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/f0507c1719f14cb1bb55087df811c924.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATm90IFRvZGF5IQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> T_2584;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAns</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] a)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[a.length][a[<span class="hljs-number">0</span>].length];<br><br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<span class="hljs-comment">// dp[i][j]到达当前节点的最大路径和</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; dp.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; dp[<span class="hljs-number">0</span>].length; j++) &#123;<br><span class="hljs-keyword">if</span>(a[i][j] == -<span class="hljs-number">1</span>)<br><span class="hljs-keyword">continue</span>;<br><span class="hljs-comment">//分三种情况</span><br><span class="hljs-keyword">if</span>(i-<span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; a[i-<span class="hljs-number">1</span>][j] &gt;=<span class="hljs-number">0</span> &amp;&amp; j-<span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; a[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]&gt;=<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span>(dp[i-<span class="hljs-number">1</span>][j] &gt; dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]) &#123;<br>dp[i][j] = a[i][j] + dp[i-<span class="hljs-number">1</span>][j];<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>dp[i][j] = a[i][j] + dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>];<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i-<span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; a[i-<span class="hljs-number">1</span>][j] &gt;= <span class="hljs-number">0</span>) &#123;<br>dp[i][j] = a[i][j] + dp[i-<span class="hljs-number">1</span>][j];<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j-<span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; a[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>] &gt;= <span class="hljs-number">0</span>)&#123;<br>dp[i][j] = a[i][j] + dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>];<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">for (int i = 0; i &lt; dp.length; i++) &#123;</span><br><span class="hljs-comment">for (int j = 0; j &lt; dp[0].length; j++) &#123;</span><br><span class="hljs-comment">System.out.print(dp[i][j] + &quot;\t&quot;);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">System.out.println();</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">if</span>(dp.length % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)<span class="hljs-comment">//层数为奇数</span><br>ans = dp[dp.length-<span class="hljs-number">1</span>][(dp.length-<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>];<br><span class="hljs-keyword">else</span><span class="hljs-comment">//层数为奇数</span><br>ans = Math.max(dp[dp.length-<span class="hljs-number">1</span>][(dp.length-<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>], dp[dp.length-<span class="hljs-number">1</span>][(dp.length-<span class="hljs-number">1</span>)/<span class="hljs-number">2</span> + <span class="hljs-number">1</span>]);<br><br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><span class="hljs-type">int</span>[][] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt;= i; j++) &#123;<br>a[i][j] = scanner.nextInt();<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>a[i][j] = -<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br>System.out.println(getAns(a));<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="判题结果"><a href="#判题结果" class="headerlink" title="判题结果"></a>判题结果</h3><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/T_2584_Java.png?raw=true"></p>]]></content>
    
    
    <categories>
      
      <category>蓝桥杯</category>
      
      <category>2020年</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯2020-子串分值和（不会写）</title>
    <link href="/2023/03/06/%E8%93%9D%E6%A1%A5%E6%9D%AF2020-%E5%AD%90%E4%B8%B2%E5%88%86%E5%80%BC%E5%92%8C/"/>
    <url>/2023/03/06/%E8%93%9D%E6%A1%A5%E6%9D%AF2020-%E5%AD%90%E4%B8%B2%E5%88%86%E5%80%BC%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="蓝桥杯2020-子串分值和（不会写）"><a href="#蓝桥杯2020-子串分值和（不会写）" class="headerlink" title="蓝桥杯2020-子串分值和（不会写）"></a>蓝桥杯2020-子串分值和（不会写）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>对于一个字符串S，我们定义S 的分值 f(S) 为S中恰好出现一次的字符个数。例如f (”aba”) &#x3D; 2，f (”abc”) &#x3D; 3, f (”aaa”) &#x3D; 1。<br>现在给定一个字符串S[0…n-1]（长度为n），请你计算对于所有S的非空子串S[i…j](0 ≤ i ≤ j &lt; n)， f (S[i… j]) 的和是多少。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入一行包含一个由小写字母组成的字符串 S。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个整数表示答案。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ababc</span><br></code></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">28<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">子串  f值<br>a     <span class="hljs-number">1</span><br>ab    <span class="hljs-number">2</span><br>aba   <span class="hljs-number">2</span><br>abab  <span class="hljs-number">2</span><br>ababc <span class="hljs-number">3</span><br> b    <span class="hljs-number">1</span><br> ba   <span class="hljs-number">2</span><br> bab  <span class="hljs-number">2</span><br> babc <span class="hljs-number">3</span><br>  a   <span class="hljs-number">1</span><br>  ab  <span class="hljs-number">2</span><br>  abc <span class="hljs-number">3</span><br>   b  <span class="hljs-number">1</span><br>   bc <span class="hljs-number">2</span><br>    c <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>只会暴力求解（40分），网上看dalao们写的题解，不是很能理解；</li><li>希望以后回头看能看懂；</li></ul><p>题目链接：<a href="https://www.dotcpp.com/oj/problem2572.html">https://www.dotcpp.com/oj/problem2572.html</a></p>]]></content>
    
    
    <categories>
      
      <category>蓝桥杯</category>
      
      <category>2020年</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯2020-字符编码（关于Java和C++两种语言提交的区别）</title>
    <link href="/2023/03/06/%E8%93%9D%E6%A1%A5%E6%9D%AF2020-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%88%E5%85%B3%E4%BA%8EJava%E5%92%8CC++%E4%B8%A4%E7%A7%8D%E8%AF%AD%E8%A8%80%E6%8F%90%E4%BA%A4%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%89/"/>
    <url>/2023/03/06/%E8%93%9D%E6%A1%A5%E6%9D%AF2020-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%88%E5%85%B3%E4%BA%8EJava%E5%92%8CC++%E4%B8%A4%E7%A7%8D%E8%AF%AD%E8%A8%80%E6%8F%90%E4%BA%A4%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="蓝桥杯2020-字符编码（关于Java和C-两种语言提交的区别）"><a href="#蓝桥杯2020-字符编码（关于Java和C-两种语言提交的区别）" class="headerlink" title="蓝桥杯2020-字符编码（关于Java和C++两种语言提交的区别）"></a>蓝桥杯2020-字符编码（关于Java和C++两种语言提交的区别）</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>小明发明了一种给由全大写字母组成的字符串编码的方法。对于每一个大写字母，小明将它转换成它在 26 个英文字母中序号，即 A → 1, B → 2, … Z →26。</p><p>这样一个字符串就能被转化成一个数字序列：比如 ABCXYZ → 123242526。</p><p>现在给定一个转换后的数字序列，小明想还原出原本的字符串。当然这样的还原有可能存在多个符合条件的字符串。小明希望找出其中字典序最大的字符串。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一个数字序列。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个只包含大写字母的字符串，代表答案</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">123242526</span><br></code></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">LCXYZ</span><br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 20% 的评测用例，输入的长度不超过 20。</p><p>对于所有评测用例，输入的长度不超过 200000。</p><p>题目链接：<a href="https://www.dotcpp.com/oj/problem2581.html">https://www.dotcpp.com/oj/problem2581.html</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="Java版本"><a href="#Java版本" class="headerlink" title="Java版本"></a>Java版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> T_2581;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><br><span class="hljs-comment">// 服气，用Java提交不仅时间超时，内存还超了，而用C++，一样的代码，就是100分；</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">char</span>[] chars = &#123;<br><span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>,<br><span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>,<br><span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>,<br><span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>,<br><span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <br><span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <br><span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Z&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">static</span> String <span class="hljs-title function_">getAns</span><span class="hljs-params">(String s)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> s.length();<br><span class="hljs-comment">//System.out.println(list);</span><br><span class="hljs-type">int</span> index;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>index = s.charAt(i)-<span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span> &lt; len &amp;&amp; index * <span class="hljs-number">10</span> + (s.charAt(i+<span class="hljs-number">1</span>)-<span class="hljs-string">&#x27;0&#x27;</span>) &lt;= <span class="hljs-number">26</span>) &#123;<br>index = index * <span class="hljs-number">10</span> + (s.charAt(i+<span class="hljs-number">1</span>) - <span class="hljs-string">&#x27;0&#x27;</span>);<br>i++;<br>&#125;<br>ans += chars[index-<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> scanner.next();<br><br>System.out.println(getAns(s));<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="判题结果"><a href="#判题结果" class="headerlink" title="判题结果"></a>判题结果</h4><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/T_2581_Java.png?raw=true"></p><h3 id="C-版本"><a href="#C-版本" class="headerlink" title="C++版本"></a>C++版本</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200010</span>;<br><br><span class="hljs-type">char</span> chars[<span class="hljs-number">27</span>] =&#123;<br>               <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>,<br>               <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>,<br>               <span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>,<br>               <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>,<br>               <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span><br>&#125;;<br><br><span class="hljs-function">string <span class="hljs-title">getAns</span><span class="hljs-params">(string s)</span> </span>&#123;<br>    string ans;<br><br>    <span class="hljs-type">int</span> len = s.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-type">int</span> index;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        index = s[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span> &lt; len &amp;&amp; index * <span class="hljs-number">10</span> + (s[i+<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>) &lt;= <span class="hljs-number">26</span>) &#123;<br>            index = index * <span class="hljs-number">10</span> + (s[i+<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>            i++;<br>        &#125;<br>        ans += chars[index<span class="hljs-number">-1</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    string s;<br>    cin &gt;&gt; s;<br><br>    cout &lt;&lt; <span class="hljs-built_in">getAns</span>(s) &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="判题结果-1"><a href="#判题结果-1" class="headerlink" title="判题结果"></a>判题结果</h4><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/T_2581_C++.png?raw=true"></p><h3 id="真的很不李姐啊啊啊啊啊啊。。。。。。。"><a href="#真的很不李姐啊啊啊啊啊啊。。。。。。。" class="headerlink" title="真的很不李姐啊啊啊啊啊啊。。。。。。。"></a>真的很不李姐啊啊啊啊啊啊。。。。。。。</h3>]]></content>
    
    
    <categories>
      
      <category>蓝桥杯</category>
      
      <category>2020年</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习-SQL函数</title>
    <link href="/2023/03/04/MySQL-%E5%87%BD%E6%95%B0/"/>
    <url>/2023/03/04/MySQL-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL学习–SQL函数"><a href="#MySQL学习–SQL函数" class="headerlink" title="MySQL学习–SQL函数"></a>MySQL学习–SQL函数</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>指一段可以直接被另一段程序直接调用的程序或代码；</li></ul><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(S1,S2,..Sn)</td><td>字符串拼接，将S1，S2，… ,Sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串str全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串str全部转为大写</td></tr><tr><td>LPAD(str,n,pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str,n,pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><ul><li>案例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>字符串函数<br>CONCAT(S1,S2,..Sn)<br>LOWER(str)<br>UPPER(str)<br>LPAD(str,n,pad)<br>RPAD(str,n,pad)<br>TRIM(str)<br>SUBSTRING(str, start, len)<br>*/<br><br>SELECT CONCAT(&quot;HELLO&quot;, &quot;小温&quot;);<br><br>SELECT LOWER(&quot;HELLO&quot;);<br><br>SELECT LPAD(&quot;01&quot;, 5, &quot;-&quot;);<br><br>SELECT RPAD(&quot;01&quot;, 5, &quot;-&quot;);<br><br>SELECT TRIM(&quot;      HELLO  小温             &quot;);<br><br>SELECT SUBSTRING(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;, 4, 10); #下标从1开始<br><br>-- 由于业务需求变更，企业员工的工号，统一为5位数，目前不足5位数的全部在前面补0。比如: 1号员工的工号应该为00001；<br>UPDATE EMP SET workno = LPAD(workno, 5, &quot;0&quot;);<br></code></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(X)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回x&#x2F;y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数x的四舍五入的值，保留y位小数</td></tr></tbody></table><ul><li>案例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>数值函数<br>CEIL(X)<br>FLOOR(x)<br>MOD(x;y)<br>RAND0<br>ROUND(Xy)<br>*/<br>SELECT CEIL(1.5);<br><br>SELECT FLOOR(1.5);<br><br>SELECT MOD(7, 3);<br><br>SELECT RAND();<br><br>SELECT ROUND(1.23456789, 3);<br><br><br>-- 通过数据库的函数，生成一个六位数的随机验证码<br><br>SELECT LPAD(fLOOR(RAND() * 1000000), 6, &quot;0&quot;);<br></code></pre></td></tr></table></figure><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回 起始时间date1 和 结束时间date2 之间的天数</td></tr></tbody></table><ul><li>案例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>日期函数<br>CURDATE()<br>CURTIME()<br>NOW()<br>YEAR(date)<br>MONTH(date)<br>DAY(date)<br>DATE_ADD(date,INTERVAL expr type)<br>DATEDIFF(date1,date2)<br>*/<br>SELECT CURDATE();<br><br>SELECT CURTIME();<br><br>SELECT NOW();<br><br>SELECT YEAR(NOW());<br><br>SELECT MONTH(NOW());<br><br>SELECT DAY(NOW());<br><br>SELECT DATE_ADD(NOW(), INTERVAL 70 DAY);<br>SELECT DATE_ADD(NOW(), INTERVAL 70 MONTH);<br><br>SELECT DATEDIFF(&quot;2022-01-01&quot;, &quot;2021-01-01&quot;);<br><br>-- 查询所有员工的入职天数，并根据入职天数倒序排序<br><br>SELECT workno, emp_name, DATEDIFF(CURDATE(), entrydate) AS entryday FROM EMP ORDER BY entryday DESC; <br></code></pre></td></tr></table></figure><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [val1] THEN [res1] … ELSE [default] END</td><td>如果val1为true，返回res1，…否则返回default默认值</td></tr><tr><td>CASE[expr] WHEN [val1] THEN [res1] … ELSE[ default] END</td><td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table><ul><li>案例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br>/*<br>流程控制函数<br>IF(value ,t , f)<br>IFNULL(value1,value2)<br>CASE WHEN [val1 ] THEN [res1] ... ELSE[ default] END<br>CASE[expr] WHEN [val1 ] THEN [res1] ... ELSE[ default] END<br>*/<br><br><br>SELECT IF(FALSE, &#x27;OK&#x27;, &#x27;ERROR&#x27;);<br><br>SELECT IFNULL(&#x27;0K&#x27;, &#x27;DEFAULT&#x27;);<br><br>SELECT IFNULL(&#x27;&#x27;, &#x27;DEFAULT&#x27;);<br><br>SELECT IFNULL(NULL, &#x27;DEFAULT&#x27;);<br><br><br>-- 查询emp表的员工姓名和工作地址(北京/上海 ----&gt; 一线城市 ， 其他 ---&gt; 二线城市)<br>SELECT emp_name, workaddress, ( CASE workaddress WHEN &#x27;北京&#x27; THEN &#x27;一线城市&#x27; WHEN &#x27;上海&#x27; THEN &#x27;一线城市&#x27; ELSE &#x27;二线城市&#x27; END ) AS &#x27;工作地址&#x27; FROM EMP;<br><br><br>-- 统计班级各个学员的成绩，展示的规则如下:<br>-- &gt;= 85，展示优秀  <br>--   &gt;= 60，展示及格<br>-- 否则，展示不及格<br><br>-- 创建成绩信息表<br>CREATE TABLE SCORE(<br>id INT COMMENT &#x27;ID&#x27;,<br>stu_name VARCHAR(20) COMMENT &#x27;姓名&#x27;,<br>math INT COMMENT &#x27;数学&#x27;,<br>chinese INT COMMENT &#x27;语文&#x27;,<br>english INT COMMENT &#x27;英语&#x27;<br>)COMMENT &#x27;学生成绩信息表&#x27;;<br><br>INSERT INTO SCORE VALUES <br>(1, &#x27;小王&#x27;, 90, 78, 85),<br>(2, &#x27;小张&#x27;, 83, 92, 88),<br>(3, &#x27;小李&#x27;, 91, 89, 83),<br>(4, &#x27;小陈&#x27;, 93, 87, 86),<br>(5, &#x27;小谢&#x27;, 89, 84, 87),<br>(6, &#x27;小常&#x27;, 88, 80, 90)<br><br>SELECT * FROM SCORE;<br><br>SELECT <br>stu_name, <br>math,<br>(case when math &gt;= 85 then &#x27;优秀&#x27; when math &gt;= 60 then &#x27;及格&#x27; else &#x27;不及格&#x27; end) as &#x27;math_level&#x27;, <br>chinese,<br>(case when chinese &gt;= 85 then &#x27;优秀&#x27; when chinese &gt;= 60 then &#x27;及格&#x27; else &#x27;不及格&#x27; end) as &#x27;chinese_level&#x27;, <br>english,<br>(case when english &gt;= 85 then &#x27;优秀&#x27; when english &gt;= 60 then &#x27;及格&#x27; else &#x27;不及格&#x27; end) as &#x27;english_level&#x27; <br>from SCORE;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯-比赛注意事项</title>
    <link href="/2023/03/02/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E6%AF%94%E8%B5%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2023/03/02/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E6%AF%94%E8%B5%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="蓝桥杯-比赛考察范围和注意事项"><a href="#蓝桥杯-比赛考察范围和注意事项" class="headerlink" title="蓝桥杯-比赛考察范围和注意事项"></a>蓝桥杯-比赛考察范围和注意事项</h1><h2 id="考察范围"><a href="#考察范围" class="headerlink" title="考察范围"></a>考察范围</h2><ul><li>Java软件开发基础：包含使用Java编写程序的能力。该部分不考查选手对某一语法的理解程度，选手可以使用自己喜欢的语句编写程序。选手可在程序中使用JDK中自带的类，但不能使用其它的第三方类。</li><li>计算机算法：枚举、排序、搜索、计数、贪心、动态规划、图论、数论、博弈论<em>、概率论</em>、计算几何、字符串算法等。</li><li>数据结构：数组、对象&#x2F;结构、字符串、队列、栈、树、图、堆、平衡树&#x2F;线段树、复杂数据结构、嵌套数据结构等。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>Java选手请务必不要使用package语句，并且确保自己的主类名称为Main，否则会导致评测系统运行时找不到主类而得0分。</li></ul><h2 id="代码提示设置"><a href="#代码提示设置" class="headerlink" title="代码提示设置"></a>代码提示设置</h2><ul><li><p>打开Windows→Preferences→Java→Editor→Content Assist；在Auto Activation triggers for java输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>蓝桥杯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯2020-回文日期</title>
    <link href="/2023/03/02/%E8%93%9D%E6%A1%A5%E6%9D%AF2020-%E5%9B%9E%E6%96%87%E6%97%A5%E6%9C%9F/"/>
    <url>/2023/03/02/%E8%93%9D%E6%A1%A5%E6%9D%AF2020-%E5%9B%9E%E6%96%87%E6%97%A5%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="蓝桥杯2020-回文日期"><a href="#蓝桥杯2020-回文日期" class="headerlink" title="蓝桥杯2020-回文日期"></a>蓝桥杯2020-回文日期</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>2020年春节期间，有一个特殊的日期引起了大家的注意：2020年2月2日。因为如果将这个日期按 <code>yyyymmdd</code> 的格式写成一个8位数是 20200202，恰好是一个回文数。我们称这样的日期是回文日期。</p><p>有人表示 20200202 是“千年一遇”的特殊日子。对此小明很不认同，因为不到2年之后就是下一个回文日期：20211202 即2021年12月2日。</p><p>也有人表示 20200202 并不仅仅是一个回文日期，还是一个 ABABBABA 型的回文日期。对此小明也不认同，因为大约 100 年后就能遇到下一个 ABABBABA 型的回文日期：21211212 即2121年12月12日。算不上“千年一遇”，顶多算“千年两遇”。</p><p>给定一个8位数的日期，请你计算该日期之后下一个回文日期和下一个ABABBABA型的回文日期各是哪一天。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入包含一个八位整数N，表示日期。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出两行，每行1个八位数。<br>第一行表示下一个回文日期，第二行表示下一个ABABBABA型的回文日期。</p><p>题目链接：<a href="https://www.dotcpp.com/oj/problem2571.html">https://www.dotcpp.com/oj/problem2571.html</a></p><h2 id="我的题解-只有90分…"><a href="#我的题解-只有90分…" class="headerlink" title="我的题解 - 只有90分…"></a>我的题解 - 只有90分…</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><span class="hljs-keyword">static</span> String <span class="hljs-title function_">reverswString</span><span class="hljs-params">(String s)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">r_s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> s.length()-<span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>r_s += s.charAt(i);<br>&#125;<br><span class="hljs-keyword">return</span> r_s;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">RunNian</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> &#123;<br><span class="hljs-keyword">if</span>(year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDate</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">d_s</span> <span class="hljs-operator">=</span> reverswString(n + <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//System.out.println(d_s);</span><br><br><br><span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> n;<br><span class="hljs-type">int</span> <span class="hljs-variable">mon</span> <span class="hljs-operator">=</span> Integer.valueOf(d_s.substring(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>));<br><span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> Integer.valueOf(d_s.substring(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>));<br><span class="hljs-keyword">if</span>(mon &gt; <span class="hljs-number">12</span> || mon == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mon == <span class="hljs-number">2</span>) &#123;<br><span class="hljs-comment">//System.out.println(&quot;==2==&quot;);</span><br><span class="hljs-keyword">if</span>(RunNian(year) &amp;&amp; day &gt; <span class="hljs-number">29</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(!RunNian(year) &amp;&amp; day &gt; <span class="hljs-number">28</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mon == <span class="hljs-number">1</span> || mon == <span class="hljs-number">3</span> || mon == <span class="hljs-number">5</span> || mon == <span class="hljs-number">7</span> || mon == <span class="hljs-number">8</span> || mon == <span class="hljs-number">10</span> || mon == <span class="hljs-number">12</span>) &#123;<br><span class="hljs-comment">//System.out.println(&quot;==3==&quot;);</span><br><span class="hljs-keyword">if</span>(day &gt; <span class="hljs-number">31</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//System.out.println(&quot;==4==&quot;);</span><br><span class="hljs-keyword">if</span>(day &gt; <span class="hljs-number">30</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">//System.out.println(&quot;==5==&quot;);</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAB</span><span class="hljs-params">(String s)</span> &#123;<br><span class="hljs-keyword">if</span>(s.charAt(<span class="hljs-number">0</span>) == s.charAt(<span class="hljs-number">2</span>) &amp;&amp; s.charAt(<span class="hljs-number">0</span>) == s.charAt(<span class="hljs-number">5</span>) &amp;&amp; s.charAt(<span class="hljs-number">0</span>) == s.charAt(<span class="hljs-number">7</span>)) &#123;<br><span class="hljs-keyword">if</span>(s.charAt(<span class="hljs-number">1</span>) == s.charAt(<span class="hljs-number">3</span>) &amp;&amp; s.charAt(<span class="hljs-number">1</span>) == s.charAt(<span class="hljs-number">4</span>) &amp;&amp; s.charAt(<span class="hljs-number">1</span>) == s.charAt(<span class="hljs-number">6</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> scanner.next();<br><br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-comment">//遍历日期，1000-01-01 ~ 8999-12-31</span><br><span class="hljs-comment">//时间复杂度高；需要过滤日期</span><br><br><span class="hljs-comment">//回文型，里面包含ABABBABA型</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>; i &lt;= <span class="hljs-number">8999</span>; i++) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">d_s</span> <span class="hljs-operator">=</span> i + <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">if</span>(isDate(i)) &#123;<br>list.add(d_s + reverswString(d_s));<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br><span class="hljs-keyword">if</span>(list.get(i).compareTo(date) &gt; <span class="hljs-number">0</span>) &#123;<br>System.out.println(list.get(i));<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br><span class="hljs-keyword">if</span>(list.get(i).compareTo(date) &gt; <span class="hljs-number">0</span> &amp;&amp; isAB(list.get(i))) &#123;<br>System.out.println(list.get(i));<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>不知道为啥第二个测试数据没有通过。。。。</li></ul><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/T_2571.png?raw=true"></p>]]></content>
    
    
    <categories>
      
      <category>蓝桥杯</category>
      
      <category>2020年</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划-LeetCode_T376（里面还有贪心思路的题解！！）</title>
    <link href="/2023/02/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-LeetCode_T376/"/>
    <url>/2023/02/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-LeetCode_T376/</url>
    
    <content type="html"><![CDATA[<h2 id="动态规划-LeetCode-T376"><a href="#动态规划-LeetCode-T376" class="headerlink" title="动态规划_LeetCode_T376"></a>动态规划_LeetCode_T376</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p><p>例如， [1, 7, 4, 9, 2, 5] 是一个 摆动序列 ，因为差值 (6, -3, 5, -7, 3) 是正负交替出现的。</p><p>相反，[1, 4, 7, 2, 5] 和 [1, 7, 4, 5, 5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</p><p>子序列 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p><p>给你一个整数数组 nums ，返回 nums 中作为 摆动序列 的 最长子序列的长度 。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/wiggle-subsequence">https://leetcode.cn/problems/wiggle-subsequence</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>这道题，说实话，我没有写出来（动态规划太难了啊T-T），然后看那个代码随想录的题解，一开始看到下图时，顿时有了思路，并写了出来，这个思路还是可以的，赞。</li></ul><p><img src="https://img-blog.csdnimg.cn/20201124174327597.png"></p><ul><li>然后听说这叫贪心思想；</li><li>最后看了LeetCode题解区的几个大佬，看到了一个写得比较清晰的动态规划，记录一下；</li></ul><p><img src="https://github.com/SEA-365/SEA-365.github.io/blob/master/myImgList/1633692974.png?raw=true"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="贪心解法"><a href="#贪心解法" class="headerlink" title="贪心解法"></a>贪心解法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">wiggleMaxLength</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<span class="hljs-comment">//记录最长子序列长度</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">//记录状态：升序 =&gt; 1, 降序 =&gt; 0, 持平 =&gt; -1</span><br><br>        <span class="hljs-comment">//这一波操作是：</span><br>        <span class="hljs-comment">//1.判断第一次是升序还是降序;</span><br>        <span class="hljs-comment">//2.防止一开始都是相同的值,例如0 0 0 0 1；</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(nums[i] != num) &#123;<br>                <span class="hljs-keyword">if</span>(nums[i] - num &gt; <span class="hljs-number">0</span>)<br>                    flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span><br>                    flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag == -<span class="hljs-number">1</span>)<span class="hljs-comment">//如果整个序列都是同一个值</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//根据图1的思想，连续多个单调升/降的值仅计算最后一个升/降</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">if</span>(nums[i] - nums[i-<span class="hljs-number">1</span>] &gt;= <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                count++;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">if</span>(nums[i] - nums[i-<span class="hljs-number">1</span>] &lt;= <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                count++;<br>                flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="动态递归解法"><a href="#动态递归解法" class="headerlink" title="动态递归解法"></a>动态递归解法</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">wiggleMaxLength</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">//1.确定dp数组以及下标的含义</span><br>        <span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length][<span class="hljs-number">2</span>];<br>        <span class="hljs-comment">//dp[i][0]: 表示到当前位置nums[i], 以 降序 结尾的摆动数组的最长子序列的长度；</span><br>        <span class="hljs-comment">//dp[i][1]: 表示到当前位置nums[i], 以 升序 结尾的摆动数组的最长子序列的长度；</span><br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(nums[i] - nums[i-<span class="hljs-number">1</span>] &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//当前元素与上一个值是升序的</span><br>                dp[i][<span class="hljs-number">0</span>] = dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>                dp[i][<span class="hljs-number">1</span>] = dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>;<span class="hljs-comment">//前一次降 + 1</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(nums[i] - nums[i-<span class="hljs-number">1</span>] &lt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//当前元素与上一个值是降序的</span><br>                dp[i][<span class="hljs-number">0</span>] = dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<span class="hljs-comment">//前一次升 + 1</span><br>                dp[i][<span class="hljs-number">1</span>] = dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(nums[i] - nums[i-<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//当前元素与上一个值是持平的</span><br>                dp[i][<span class="hljs-number">0</span>] = dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<span class="hljs-comment">//与上一次保持一致</span><br>                dp[i][<span class="hljs-number">1</span>] = dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Math.max(dp[nums.length-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], dp[nums.length-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯算法-经典同分支去重（flag标记数组）</title>
    <link href="/2023/02/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95-%E7%BB%8F%E5%85%B8%E5%90%8C%E5%88%86%E6%94%AF%E5%8E%BB%E9%87%8D%EF%BC%88flag%E6%A0%87%E8%AE%B0%E6%95%B0%E7%BB%84%EF%BC%89/"/>
    <url>/2023/02/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95-%E7%BB%8F%E5%85%B8%E5%90%8C%E5%88%86%E6%94%AF%E5%8E%BB%E9%87%8D%EF%BC%88flag%E6%A0%87%E8%AE%B0%E6%95%B0%E7%BB%84%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="回溯算法-经典同分支去重（flag标记数组）"><a href="#回溯算法-经典同分支去重（flag标记数组）" class="headerlink" title="回溯算法-经典同分支去重（flag标记数组）"></a>回溯算法-经典同分支去重（flag标记数组）</h3><h4 id="LeetCode参考题目："><a href="#LeetCode参考题目：" class="headerlink" title="LeetCode参考题目："></a>LeetCode参考题目：</h4><ul><li>LeetCode_46</li></ul><p>给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/permutations">https://leetcode.cn/problems/permutations</a></p><p><strong>flag标记数组可以用于同层去重也可以用于同分支去重！！！</strong></p><p><strong>下面是去重的写法</strong></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">static</span> List&lt;List&lt;Integer&gt;&gt; ansList;<br>    <span class="hljs-keyword">static</span> List&lt;Integer&gt; cur_list;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backTrack</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> index,<span class="hljs-type">int</span>[] flag)</span>&#123;<br>        <span class="hljs-comment">//关键点：</span><br>        <span class="hljs-comment">//1.回溯算法中，for循环是同层遍历，回溯递归是遍历所有分支；</span><br>        <span class="hljs-keyword">if</span>(index == nums.length)&#123;<br>            ansList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(cur_list));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(flag[nums[i] + <span class="hljs-number">10</span>] == <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            cur_list.add(nums[i]);<br>            flag[nums[i] + <span class="hljs-number">10</span>] = <span class="hljs-number">1</span>;<span class="hljs-comment">//题目给出nums[i]的范围是[-10, 10],因此加上10，避免下标越界；</span><br>        <span class="hljs-comment">//2.本题需要同分支去重，因此需要将标记数组传给回溯递归函数；</span><br>            backTrack(nums, index+<span class="hljs-number">1</span>, flag);<br>            <span class="hljs-comment">//3.每次回溯返回是，flag数组也需要&quot;撤销&quot;操作;</span><br>            flag[nums[i] + <span class="hljs-number">10</span>] = <span class="hljs-number">0</span>;<br>            cur_list.remove(cur_list.size()-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">permute</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        ansList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        cur_list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-type">int</span>[] flag = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">25</span>];<br><br>        backTrack(nums, <span class="hljs-number">0</span>, flag);<br><br>        <span class="hljs-keyword">return</span> ansList;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录</category>
      
      <category>回溯算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贪心算法-解题思路</title>
    <link href="/2023/02/17/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/"/>
    <url>/2023/02/17/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="贪心算法-解题思路"><a href="#贪心算法-解题思路" class="headerlink" title="贪心算法-解题思路"></a>贪心算法-解题思路</h3><ul><li><p>没什么固定的套路，一来说就是，常识性推导+举反例。</p></li><li><p>能够从 局部最优 推出 全局最优即可。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>代码随想录</category>
      
      <category>贪心算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习路线（ChatGPT版）</title>
    <link href="/2023/02/17/MySQL%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%EF%BC%88ChatGPT%E7%89%88%EF%BC%89/"/>
    <url>/2023/02/17/MySQL%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%EF%BC%88ChatGPT%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL学习路线（ChatGPT版）"><a href="#MySQL学习路线（ChatGPT版）" class="headerlink" title="MySQL学习路线（ChatGPT版）"></a>MySQL学习路线（ChatGPT版）</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>掌握 SQL 基本语法和常用函数</li><li>学会使用 SQL 进行数据查询和数据分析</li><li>能够使用 SQL 对数据进行增、删、改操作</li><li>了解 MySQL 数据库的设计和优化原则</li></ul><h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><ul><li>B 站黑马程序员 SQL 视频课程：<a href="https://www.bilibili.com/video/BV1YJ411P7dU">https://www.bilibili.com/video/BV1YJ411P7dU</a></li><li>MySQL 官方文档：<a href="https://dev.mysql.com/doc/">https://dev.mysql.com/doc/</a></li></ul><h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><h3 id="第-1-2-周：SQL-基础知识"><a href="#第-1-2-周：SQL-基础知识" class="headerlink" title="第 1-2 周：SQL 基础知识"></a>第 1-2 周：SQL 基础知识</h3><ul><li>观看黑马程序员 SQL 视频课程第 1-11 讲</li><li>学习 SQL 基本语法、查询语句、条件查询、排序查询、分组查询等基础知识</li></ul><h3 id="第-3-4-周：SQL-函数和操作"><a href="#第-3-4-周：SQL-函数和操作" class="headerlink" title="第 3-4 周：SQL 函数和操作"></a>第 3-4 周：SQL 函数和操作</h3><ul><li>观看黑马程序员 SQL 视频课程第 12-20 讲</li><li>学习 SQL 中常用的函数，如字符串函数、数学函数、日期函数等</li><li>学习 SQL 中的增、删、改操作</li></ul><h3 id="第-5-6-周：高级-SQL-操作和数据分析"><a href="#第-5-6-周：高级-SQL-操作和数据分析" class="headerlink" title="第 5-6 周：高级 SQL 操作和数据分析"></a>第 5-6 周：高级 SQL 操作和数据分析</h3><ul><li>观看黑马程序员 SQL 视频课程第 21-31 讲</li><li>学习 SQL 中的高级操作，如子查询、联合查询、事务、视图等</li><li>学习如何使用 SQL 进行数据分析，如聚合统计、数据透视等</li></ul><h3 id="第-7-8-周：MySQL-数据库设计和优化"><a href="#第-7-8-周：MySQL-数据库设计和优化" class="headerlink" title="第 7-8 周：MySQL 数据库设计和优化"></a>第 7-8 周：MySQL 数据库设计和优化</h3><ul><li>观看黑马程序员 SQL 视频课程第 32-38 讲</li><li>学习 MySQL 数据库的设计原则和优化方法</li><li>了解 MySQL 数据库的常用工具和技巧，如索引优化、存储过程、触发器等</li></ul><h2 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h2><ul><li>每天至少花 2 小时学习 SQL，建议在学习期间尽量集中注意力，减少干扰和分心。</li><li>在学习过程中，尝试使用 SQL 对实际数据进行操作和查询，以加深印象和提高实战能力。</li><li>学习过程中，可以结合官方文档和其他 SQL 学习资源，以更好地理解和掌握 SQL 知识。</li><li>如果时间允许，建议参加在线课程或者线下培训，与老师和同学交流，提高学习效果。</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习路线</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>SQL</tag>
      
      <tag>学习路线</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯算法-LeetCode_T332（回溯算法章节暂时告一段落）</title>
    <link href="/2023/02/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95-LeetCode_T332%EF%BC%88%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%AB%A0%E8%8A%82%E6%9A%82%E6%97%B6%E5%91%8A%E4%B8%80%E6%AE%B5%E8%90%BD%EF%BC%89/"/>
    <url>/2023/02/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95-LeetCode_T332%EF%BC%88%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%AB%A0%E8%8A%82%E6%9A%82%E6%97%B6%E5%91%8A%E4%B8%80%E6%AE%B5%E8%90%BD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="回溯算法-LeetCode-T332（回溯算法章节暂时告一段落）"><a href="#回溯算法-LeetCode-T332（回溯算法章节暂时告一段落）" class="headerlink" title="回溯算法-LeetCode_T332（回溯算法章节暂时告一段落）"></a>回溯算法-LeetCode_T332（回溯算法章节暂时告一段落）</h3><ul><li>题目描述</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html">给你一份航线列表 tickets ，其中 tickets[i] = [fromi, toi] 表示飞机出发和降落的机场地点。请你对该行程进行重新规划排序。<br><br>所有这些机票都属于一个从 JFK（肯尼迪国际机场）出发的先生，所以该行程必须从 JFK 开始。如果存在多种有效的行程，请你按字典排序返回最小的行程组合。<br><br>例如，行程 [&quot;JFK&quot;, &quot;LGA&quot;] 与 [&quot;JFK&quot;, &quot;LGB&quot;] 相比就更小，排序更靠前。<br>假定所有机票至少存在一种合理的行程。且所有的机票 必须都用一次 且 只能用一次。<br><br>示例 1：<br>输入：tickets = [[&quot;MUC&quot;,&quot;LHR&quot;],[&quot;JFK&quot;,&quot;MUC&quot;],[&quot;SFO&quot;,&quot;SJC&quot;],[&quot;LHR&quot;,&quot;SFO&quot;]]<br>输出：[&quot;JFK&quot;,&quot;MUC&quot;,&quot;LHR&quot;,&quot;SFO&quot;,&quot;SJC&quot;]<br><br>示例 2：<br>输入：tickets = [[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]<br>输出：[&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]<br>解释：另一种有效的行程是 [&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;] ，但是它字典排序更大更靠后。<br><br>来源：力扣（LeetCode）<br>链接：https://leetcode.cn/problems/reconstruct-itinerary<br></code></pre></td></tr></table></figure><p><strong>今天是2023年02月16日</strong></p><p><strong>LeetCode上刷到的第一道Hard题，mark一下</strong></p><p><strong>代码随想录中回溯算法章节还剩下3到Hard题，希望能够通过多刷题，终有一天我能够独立写出来的！</strong></p><p><strong>先开始下一章节的学习，冲！</strong></p>]]></content>
    
    
    <categories>
      
      <category>代码随想录</category>
      
      <category>回溯算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习-SQL语言（整理完毕!）</title>
    <link href="/2023/02/16/MySQL-SQL%E8%AF%AD%E8%A8%80/"/>
    <url>/2023/02/16/MySQL-SQL%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL学习–SQL语言"><a href="#MySQL学习–SQL语言" class="headerlink" title="MySQL学习–SQL语言"></a>MySQL学习–SQL语言</h1><h2 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h2><ul><li>1.SQL语句可以单行或多行书写，以分号结尾；</li><li>2.SQL语句可以使用空格&#x2F;缩进来增强语句的可读性；</li><li>3.MySQL数据库的SQL语句不区分大小写，关键字建议使用大写；</li><li>4.注释：<ul><li>单行注释：– 注释内容 或 # 注释内容<strong>（MySQL特有）</strong></li><li>多行注释：&#x2F;* 注释内容 *&#x2F;</li></ul></li></ul><h2 id="数据定义语言（DDL）"><a href="#数据定义语言（DDL）" class="headerlink" title="数据定义语言（DDL）"></a>数据定义语言（DDL）</h2><ul><li>主要用来定义数据库对象（数据库、视图、索引、表、字段等）</li></ul><h3 id="1-数据库操作"><a href="#1-数据库操作" class="headerlink" title="1.数据库操作"></a>1.数据库操作</h3><h4 id="1）查询"><a href="#1）查询" class="headerlink" title="1）查询"></a>1）查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询所有的数据库</span><br><span class="hljs-keyword">SHOW</span> DATABASES;<br><br><span class="hljs-comment">-- 查询当前数据库</span><br><span class="hljs-keyword">SELECT</span> DATABASE();<br></code></pre></td></tr></table></figure><h4 id="2）创建"><a href="#2）创建" class="headerlink" title="2）创建"></a>2）创建</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建数据库</span><br><span class="hljs-keyword">CREATE</span> DATABASE [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] 数据库名 [<span class="hljs-keyword">DEFAULT</span> CHARSET 字符集] [<span class="hljs-keyword">COLLATE</span> 排序规则];<br><span class="hljs-comment">-- [] 中的选项是可选的</span><br><span class="hljs-comment">-- IF NOT EXISTS表示如果该数据库不存在则创建；</span><br><br><span class="hljs-comment">-- 例如：1.创建一个名为 DATABASE_SEA_1 的数据库的SQL语句如下：</span><br><span class="hljs-keyword">CREATE</span> DATABASE DATABASE_SEA_1;<br><br><span class="hljs-comment">-- 2.加入可选项IF NOT EXISTS，当数据库中已经有该名称的数据库时不进行创建；反之，则创建；</span><br><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> DATABASE_SEA_1;<br><br><span class="hljs-comment">-- 3.加入可选项DEFAULT CHARSET 字符集，指定默认字符集为UTF8；</span><br><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> DATABASE_SEA_1 <span class="hljs-keyword">DEFAULT</span> CHARSET UTF8;<br></code></pre></td></tr></table></figure><h4 id="3）删除"><a href="#3）删除" class="headerlink" title="3）删除"></a>3）删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除数据库</span><br><span class="hljs-keyword">DROP</span> DATABASE [IF <span class="hljs-keyword">EXISTS</span>] 数据库名;<br></code></pre></td></tr></table></figure><h4 id="4）使用"><a href="#4）使用" class="headerlink" title="4）使用"></a>4）使用</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 进入mysql</span><br>mysql <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>p # 然后根据提示，输入root用户的密码即可；<br><br><span class="hljs-comment">-- 使用数据库</span><br>USE 数据库名;<br><br><span class="hljs-comment">-- 查看当前正在使用的数据库</span><br><span class="hljs-keyword">SELECT</span> DATABASE();<br></code></pre></td></tr></table></figure><h3 id="2-表操作"><a href="#2-表操作" class="headerlink" title="2.表操作"></a>2.表操作</h3><h4 id="1）查询-1"><a href="#1）查询-1" class="headerlink" title="1）查询"></a>1）查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询当前数据库所有表</span><br><span class="hljs-keyword">SHOW</span> TABLES;<br><br><span class="hljs-comment">-- 查询表结构</span><br><span class="hljs-keyword">DESC</span> 表名;<br><br><span class="hljs-comment">-- 查询指定表的建表语句</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure><h4 id="2）创建-1"><a href="#2）创建-1" class="headerlink" title="2）创建"></a>2）创建</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>字段<span class="hljs-number">1</span> 字段<span class="hljs-number">1</span>类型[COMMENT <span class="hljs-string">&#x27;字段1注释&#x27;</span>],<br>    字段<span class="hljs-number">2</span> 字段<span class="hljs-number">2</span>类型[COMMENT <span class="hljs-string">&#x27;字段2注释&#x27;</span>],<br>    字段<span class="hljs-number">2</span> 字段<span class="hljs-number">3</span>类型[COMMENT <span class="hljs-string">&#x27;字段3注释&#x27;</span>],<br>    ...<br>    字段N 字段N类型[COMMENT <span class="hljs-string">&#x27;字段N注释&#x27;</span>]<br>)[COMMENT <span class="hljs-string">&#x27;表注释&#x27;</span>];<br><br><span class="hljs-comment">-- 例如：1.在数据库中DATABASE_SEA_1创建用户表USER；</span><br>USE DATABASE_SEA_1;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">USER</span>(<br>id <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) comment <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>    age <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    gender <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;性别&#x27;</span><br>)COMMENT <span class="hljs-string">&#x27;用户表&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="3）数据类型"><a href="#3）数据类型" class="headerlink" title="3）数据类型"></a>3）数据类型</h4><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a><strong>数值类型</strong></h5><table><thead><tr><th>类型</th><th>大小</th><th>有符号(SIGNED)范围</th><th>无符号(UNSIGNED)范围</th><th>描述</th></tr></thead><tbody><tr><td>TINYINT</td><td>1 byte</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2  bytes</td><td>(-32768，32767)</td><td>(0，65535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3  bytes</td><td>(-8388608，8388607)</td><td>(0，16777215)</td><td>大整数值</td></tr><tr><td>INT或INTEGER</td><td>4  bytes</td><td>(-2147483648，2147483647)</td><td>(0，4294967295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8  bytes</td><td>(-2^63，2^63-1)</td><td>(0，2^64-1)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4  bytes</td><td>(-3.402823466 E+38，3.402823466351  E+38)</td><td>0 和 (1.175494351  E-38，3.402823466 E+38)</td><td>单精度浮点数值</td></tr><tr><td>DOUBLE</td><td>8  bytes</td><td>(-1.7976931348623157 E+308，1.7976931348623157 E+308)</td><td>0 和  (2.2250738585072014 E-308，1.7976931348623157 E+308)</td><td>双精度浮点数值</td></tr><tr><td>DECIMAL</td><td></td><td>依赖于M(精度)和D(标度)的值</td><td>依赖于M(精度)和D(标度)的值</td><td>小数值(精确定点数)</td></tr></tbody></table><p><strong>注意：</strong></p><p>​<strong>1.DECIMAL类型中的精度（M）和标度（D）的含义：例如123.45的精度M&#x3D;5(整个数字的长度), 标度D&#x3D;2(小数位数)；例如score double(4, 1)可以指定考试成绩字段score最大长度为4，小数位数为1位，如100.0,90.5；</strong></p><p>​<strong>2.使用无符号范围，例如年龄age不可能为负数，只需age TINYINT UNSIGNED即可。</strong></p><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a><strong>字符串类型</strong></h5><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><p><strong>注意：</strong></p><p>​<strong>1.BLOB一般是二进制数据，TEXT一般是文本数据；</strong></p><p>​<strong>2.CHAR表示定长字符串，即使只存放了1个字符也会占用指定大小的空间 &#x3D;&#x3D;&gt; 性能好；</strong></p><p>​<strong>3.VARCHAR表示变长字符串，根据实际存放的字符数指定该数据存储空间大小 &#x3D;&#x3D;&gt; 需要计算，性能较差；</strong></p><h5 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a><strong>日期时间类型</strong></h5><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01 至  9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59 至  838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01 至 <strong>2038</strong>-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><p><strong>注意：</strong></p><p>​<strong>1.TIMESTAMP类型只能表示到2038年。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/* 案例 设计一张员工信息表，要求如下：</span><br><span class="hljs-comment">1.编号（纯数字）</span><br><span class="hljs-comment">2.员工工号（字符串类型，长度不超过10）</span><br><span class="hljs-comment">3.员工姓名（字符串类型，长度不超过10）</span><br><span class="hljs-comment">4.性别（男/女，存储一个汉字）</span><br><span class="hljs-comment">5.年龄（正常年龄，不可能为负数）</span><br><span class="hljs-comment">6.身份证号（二代身份证号均为18位，身份证中有X字符）</span><br><span class="hljs-comment">7.入职时间（取值年月日即可）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Employee(<br>ID <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;编号&#x27;</span>,<br>empl_id <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) COMMENT <span class="hljs-string">&#x27;员工工号&#x27;</span>,<br>empl_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) COMMENT <span class="hljs-string">&#x27;员工姓名&#x27;</span>,<br>gender <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>) COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>age TINYINT UNSIGNED COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>identify_id <span class="hljs-type">CHAR</span>(<span class="hljs-number">18</span>) COMMENT <span class="hljs-string">&#x27;身份证号&#x27;</span>,<br>entry_time <span class="hljs-type">DATE</span> COMMENT <span class="hljs-string">&#x27;入职时间&#x27;</span><br>)COMMENT <span class="hljs-string">&#x27;员工信息表&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="4）修改"><a href="#4）修改" class="headerlink" title="4）修改"></a>4）修改</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 添加字段</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> 字段名 字段类型(长度) [COMMENT 注释] [约束];<br><br><span class="hljs-comment">-- 修改字段数据类型</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 字段名 新的数据类型(长度);<br><br><span class="hljs-comment">-- 修改字段名和字段类型</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];<br><br><span class="hljs-comment">-- 删除字段</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> 字段名;<br><br><span class="hljs-comment">-- 修改表名</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 RENAME <span class="hljs-keyword">TO</span> 新的表名;<br></code></pre></td></tr></table></figure><h4 id="5）删除"><a href="#5）删除" class="headerlink" title="5）删除"></a>5）删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">EXISTS</span>] 表名;<br><br><span class="hljs-comment">-- 删除指定表，并重新创建该表；（相当于清空表）</span><br><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure><h2 id="数据操纵语言（DML）"><a href="#数据操纵语言（DML）" class="headerlink" title="数据操纵语言（DML）"></a>数据操纵语言（DML）</h2><ul><li>主要用来对数据库表中的数据进行增删改；</li></ul><h3 id="添加数据（INSERT）"><a href="#添加数据（INSERT）" class="headerlink" title="添加数据（INSERT）"></a>添加数据（INSERT）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 添加数据</span><br><br><span class="hljs-comment">-- 给指定字段添加数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 (字段<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span>, ...) <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, 值<span class="hljs-number">3</span>, ...);<br><br><span class="hljs-comment">-- 给全部字段添加数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, 值<span class="hljs-number">3</span>, ...);<br><br><span class="hljs-comment">-- 批量添加数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 (字段<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span>, ...) <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, 值<span class="hljs-number">3</span>, ...), (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...), (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的；</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 指定的字段顺序需要与值的顺序是一一对应的</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> employee (empl_id, empl_name, gender, age) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, &quot;test&quot;, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">18</span>);<br></code></pre></td></tr></table></figure><ul><li>字符串和日期型数据应该包含在引号中；</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 字符串和日期型数据应该包含在引号中</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> employee (empl_id, empl_name, gender, age, entry_time) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, &quot;test&quot;, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;2023-02-19&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>插入的数据大小，应该在字段的规定范围内；</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 插入的数据大小，应该在字段的规定范围内</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> employee (empl_id, empl_name, gender, age) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, &quot;test&quot;, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">-18</span>);<br><br><span class="hljs-comment">/*报错如下</span><br><span class="hljs-comment">INSERT INTO employee (empl_id, empl_name, gender, age) VALUES (1, &quot;test&quot;, &#x27;男&#x27;, -18)</span><br><span class="hljs-comment">&gt; 1264 - Out of range value for column &#x27;age&#x27; at row 1</span><br><span class="hljs-comment">&gt; 时间: 0.001s</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="修改数据（UPDATE）"><a href="#修改数据（UPDATE）" class="headerlink" title="修改数据（UPDATE）"></a>修改数据（UPDATE）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改数据</span><br><span class="hljs-keyword">UPDATE</span> 表名 <span class="hljs-keyword">SET</span> 字段名<span class="hljs-number">1</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">1</span>, 字段名<span class="hljs-number">2</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">2</span>, ...[<span class="hljs-keyword">WHERE</span> 条件];<br><br><span class="hljs-comment">-- 例如：</span><br><span class="hljs-comment">-- 修改18岁的员工的性别和薪资</span><br><span class="hljs-keyword">UPDATE</span> employee <span class="hljs-keyword">SET</span> gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;女&#x27;</span>, salary_num <span class="hljs-operator">=</span> <span class="hljs-number">10000</span> <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br><span class="hljs-comment">-- 设置所有员工的身份证号</span><br><span class="hljs-keyword">UPDATE</span> employee <span class="hljs-keyword">SET</span> identify_id <span class="hljs-operator">=</span> <span class="hljs-number">360735</span>;<br><span class="hljs-comment">-- 设置所有员工的入职日期</span><br><span class="hljs-keyword">UPDATE</span> employee <span class="hljs-keyword">SET</span> entry_time <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2008-01-01&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="删除数据（DELETE）"><a href="#删除数据（DELETE）" class="headerlink" title="删除数据（DELETE）"></a>删除数据（DELETE）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除数据</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">WHERE</span> 条件];<br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li>DELETE语句的条件是可选项，若没有，则会删除整张表的所有数据；</li><li>DELETE不能删除某一个字段的值（可以使用UPDATE语句实现）；</li></ul><h2 id="数据查询语言（DQL）"><a href="#数据查询语言（DQL）" class="headerlink" title="数据查询语言（DQL）"></a>数据查询语言（DQL）</h2><ul><li>主要用来查询数据库中表的记录；</li></ul><h3 id="DQL-单表查询"><a href="#DQL-单表查询" class="headerlink" title="DQL 单表查询"></a>DQL 单表查询</h3><ul><li>DQL语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表<br><span class="hljs-keyword">FROM</span> 表名列表<br><span class="hljs-keyword">WHERE</span> 条件列表<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 分组字段列表<br><span class="hljs-keyword">HAVING</span> 分组后条件列表<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 排序字段列表<br>LIMIT 分页参数<br></code></pre></td></tr></table></figure><h4 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h4><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1.查询多个字段</span><br><span class="hljs-keyword">SELECT</span> 字段<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span>, 字段<span class="hljs-number">3</span>, ... <span class="hljs-keyword">FROM</span> 表名;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名;<br><br><span class="hljs-comment">-- 2.设置别名</span><br><span class="hljs-keyword">SELECT</span> 字段<span class="hljs-number">1</span> [<span class="hljs-keyword">AS</span> 别名<span class="hljs-number">1</span>], 字段<span class="hljs-number">2</span> [<span class="hljs-keyword">AS</span> 别名<span class="hljs-number">2</span>], ... <span class="hljs-keyword">FROM</span> 表名;<br><br><span class="hljs-comment">-- 3.去除重复记录</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名;<br><br></code></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 基本查询</span><br><span class="hljs-keyword">SELECT</span> emp_name, workno, age <span class="hljs-keyword">FROM</span> emp;<br><br><span class="hljs-keyword">SELECT</span> id, workno, emp_name, gender, age, idcard, workaddress, entrydate <span class="hljs-keyword">FROM</span> emp;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp; # 尽量不要写<span class="hljs-operator">*</span>，效率比较低<br><br><span class="hljs-comment">-- 设置别名</span><br><span class="hljs-keyword">SELECT</span> workaddress <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;工作地址&#x27;</span> <span class="hljs-keyword">FROM</span> emp;<br><br><span class="hljs-comment">-- 去除重复元素</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> workaddress <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;工作地址&#x27;</span> <span class="hljs-keyword">FROM</span> emp;<br></code></pre></td></tr></table></figure><h4 id="条件查询（WHERE）"><a href="#条件查询（WHERE）" class="headerlink" title="条件查询（WHERE）"></a>条件查询（WHERE）</h4><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 条件查询</span><br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件列表；<br></code></pre></td></tr></table></figure><ul><li>条件</li></ul><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>BETWEEN…AND…</td><td>在某个闭区间内</td></tr><tr><td>IN(…)</td><td>在IN之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（ _ 匹配单个字符，% 匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr><tr><td><strong>逻辑运算符</strong></td><td><strong>功能</strong></td></tr><tr><td>AND 或 &amp;&amp;</td><td>且</td></tr><tr><td>OR 或 ||</td><td>或</td></tr><tr><td>NOT 或 !</td><td>非</td></tr></tbody></table><ul><li>案例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- WHERE 条件查询</span><br><br><span class="hljs-comment">-- 1.查询年龄等于28的员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">=</span> <span class="hljs-number">28</span>;<br><br><span class="hljs-comment">-- 2.查询年龄小于28的员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">28</span>;<br><br><span class="hljs-comment">-- 3.查询年龄小于等于28的员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">28</span>;<br><br><span class="hljs-comment">-- 4.查询没有身份证号的员工</span><br><span class="hljs-comment">-- 先放2条没有idcard的记录进去</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP(id, workno, emp_name, gender, age, workaddress, entrydate) <br><span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;11&#x27;</span>, <span class="hljs-string">&#x27;小十一&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">27</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2020-01-01&#x27;</span>),<br>(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-string">&#x27;小十二&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">27</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2020-01-01&#x27;</span>)<br><span class="hljs-comment">-- 然后再查询</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> idcard <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br><br><span class="hljs-comment">-- 5.查询有身份证号的员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> idcard <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br><br><span class="hljs-comment">-- 6.查询年龄不等于28的员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">28</span>;<br><br><span class="hljs-comment">-- 7.查询年龄在18（包含）到 30（包含）之间的员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> age <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">18</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">28</span>;<br><br><span class="hljs-comment">-- 8.查询性别为&#x27;女&#x27;，年龄小于28岁的员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-operator">&amp;&amp;</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">28</span>;# <span class="hljs-operator">&amp;&amp;</span> 可以换成 <span class="hljs-keyword">AND</span><br><br><span class="hljs-comment">-- 9.查询年龄等于18或23或27的员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">=</span> <span class="hljs-number">18</span> <span class="hljs-operator">||</span> age <span class="hljs-operator">=</span> <span class="hljs-number">23</span> <span class="hljs-operator">||</span> age <span class="hljs-operator">=</span> <span class="hljs-number">27</span>; # <span class="hljs-operator">||</span> 可以换成 <span class="hljs-keyword">OR</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> age <span class="hljs-keyword">IN</span> ( <span class="hljs-number">18</span>, <span class="hljs-number">23</span>, <span class="hljs-number">27</span>);<br><br><span class="hljs-comment">-- 10.查询姓名为两个字的员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> emp_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;__&#x27;</span>;# 通配符，每一个 <span class="hljs-string">&#x27;_&#x27;</span> 表示一个字符<br><br><span class="hljs-comment">-- 11.查询身份证号最后以为是&#x27;X&#x27;的员工</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP(id, workno, emp_name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-number">13</span>, <span class="hljs-string">&#x27;13&#x27;</span>, <span class="hljs-string">&#x27;小十三&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;12345678X&#x27;</span>, <span class="hljs-string">&#x27;重庆&#x27;</span>, <span class="hljs-string">&#x27;2020-01-01&#x27;</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-string">&#x27;14&#x27;</span>, <span class="hljs-string">&#x27;小十四&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">29</span>, <span class="hljs-string">&#x27;12345678X&#x27;</span>, <span class="hljs-string">&#x27;江西&#x27;</span>, <span class="hljs-string">&#x27;2020-01-01&#x27;</span>)<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> idcard <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%X&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><ul><li>介绍</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 将一列数据作为一个整体，进行纵向计算；</span><br></code></pre></td></tr></table></figure><ul><li>常见的聚合函数</li></ul><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 聚合函数(字段列表) <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 聚合函数</span><br><br><span class="hljs-comment">-- 1.统计该企业的员工数量</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(id) <span class="hljs-keyword">FROM</span> EMP;<br><br><span class="hljs-comment">-- 2.统计该企业员工的平均年龄</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(age) <span class="hljs-keyword">FROM</span> EMP;<br><br><span class="hljs-comment">-- 3.统计该企业员工的最大年龄</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(age) <span class="hljs-keyword">FROM</span> EMP;<br><br><span class="hljs-comment">-- 4.统计该企业员工的最小年龄</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(age) <span class="hljs-keyword">FROM</span> EMP;<br><br><span class="hljs-comment">-- 5.统计北京地区员工的年龄总和</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(age) <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> workaddress <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;北京&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="分组查询（GROUP-BY）"><a href="#分组查询（GROUP-BY）" class="headerlink" title="分组查询（GROUP BY）"></a>分组查询（GROUP BY）</h4><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- GROUP BY 分组查询</span><br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">WHERE</span> 条件] <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 分组字段名 [<span class="hljs-keyword">HAVING</span> 分组后的数据过滤条件];<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">WHERE 和 HAVING 区别</span><br><span class="hljs-comment">1.执行时机不同：</span><br><span class="hljs-comment">1）WHERE是分组之前进行过滤，不满足WHERE条件的记录，不参与分组；</span><br><span class="hljs-comment">2）HAVING是分组之后根据过滤条件对分组结果进行过滤；</span><br><span class="hljs-comment">2.判断条件不同：WHERE不能对聚合函数进行判断，而HAVING可以；</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 分组查询 GROUP BY</span><br><br><span class="hljs-comment">-- 1.根据性别分组，统计男性员工 和 女性员工的数量</span><br><span class="hljs-keyword">SELECT</span> gender, <span class="hljs-built_in">COUNT</span>(id) <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> gender;<br><br><span class="hljs-comment">-- 2.根据性别分组，统计男性员工 和 女性员工的平均年龄</span><br><span class="hljs-keyword">SELECT</span> gender, <span class="hljs-built_in">AVG</span>(age) <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> gender;<br><br><span class="hljs-comment">-- 3.查询年龄小于45的员工，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP(id, workno, emp_name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-number">15</span>, <span class="hljs-string">&#x27;15&#x27;</span>, <span class="hljs-string">&#x27;小十五&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;12345678X&#x27;</span>, <span class="hljs-string">&#x27;江西&#x27;</span>, <span class="hljs-string">&#x27;2020-01-01&#x27;</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;16&#x27;</span>, <span class="hljs-string">&#x27;小十六&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">29</span>, <span class="hljs-string">&#x27;12345678X&#x27;</span>, <span class="hljs-string">&#x27;江西&#x27;</span>, <span class="hljs-string">&#x27;2020-01-01&#x27;</span>)<br><br><span class="hljs-keyword">SELECT</span> workaddress, <span class="hljs-built_in">count</span>(id) <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">45</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> workaddress <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(id) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><ul><li>注意<ul><li>1.执行顺序：WHERE &gt; 聚合函数 &gt; HAVING；</li><li>2.分组之后，查询的字段一般是 <strong>聚合函数</strong> 和 <strong>分组字段</strong>， 查询其他字段没有意义；</li></ul></li></ul><h4 id="排序查询（ORDER-BY）"><a href="#排序查询（ORDER-BY）" class="headerlink" title="排序查询（ORDER BY）"></a>排序查询（ORDER BY）</h4><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ORDER BY 排序查询</span><br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 字段<span class="hljs-number">1</span> 排序方式<span class="hljs-number">2</span>, 字段<span class="hljs-number">2</span> 排序方式<span class="hljs-number">2</span>;<br><br><span class="hljs-comment">-- 排序方式</span><br><span class="hljs-keyword">ASC</span> 升序（默认值）<br><span class="hljs-keyword">DESC</span> 降序<br><br><span class="hljs-comment">-- 注意：多个字段进行排序时，先根据第一个字段进行排序，第一个字段相同则根据第二个字段排序，依次类推；</span><br></code></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ORDER BY 排序查询</span><br><br><span class="hljs-comment">-- 1.根据年龄对公司的员工进行升序排序</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age <span class="hljs-keyword">ASC</span>;<br><br><span class="hljs-comment">-- 2.根据入职时间对公司的员工进行降序排序</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP(id, workno, emp_name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-number">17</span>, <span class="hljs-string">&#x27;17&#x27;</span>, <span class="hljs-string">&#x27;小十七&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;12345678X&#x27;</span>, <span class="hljs-string">&#x27;江西&#x27;</span>, <span class="hljs-string">&#x27;2020-01-04&#x27;</span>),<br>(<span class="hljs-number">18</span>, <span class="hljs-string">&#x27;18&#x27;</span>, <span class="hljs-string">&#x27;小十八&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">29</span>, <span class="hljs-string">&#x27;12345678X&#x27;</span>, <span class="hljs-string">&#x27;江西&#x27;</span>, <span class="hljs-string">&#x27;2023-01-01&#x27;</span>)<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> entrydate <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-comment">-- 3.根据年龄对公司员工进行升序排序，年龄相同则根据入职时间进行降序排序；</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age <span class="hljs-keyword">ASC</span>, entrydate <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h4 id="分页查询（LIMIT）"><a href="#分页查询（LIMIT）" class="headerlink" title="分页查询（LIMIT）"></a>分页查询（LIMIT）</h4><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- LIMIT 分页查询</span><br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 LIMIT 起始索引, 查询记录数;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">注意：</span><br><span class="hljs-comment">1.起始索引从 0 开始，起始索引 = （查询页码 - 1）*起始索引=（页码数 - 1）* 每页展示的记录数；</span><br><span class="hljs-comment">2.分页查询是数据库的 &#x27;方言&#x27;，不同数据库有不同的实现，MySQL中使用的是LIMIT；</span><br><span class="hljs-comment">3.如果查询的是第一页数据，起始索引可以省略;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- LIMIT 分页查询</span><br><br><span class="hljs-comment">-- 1.查询第1页员工数据，每页展示10条；</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP LIMIT <span class="hljs-number">0</span>, <span class="hljs-number">10</span>; <br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP LIMIT <span class="hljs-number">10</span>; # 查询第<span class="hljs-number">1</span>页，可以省略起始索引<br><br><span class="hljs-comment">-- 2.查询第2页员工数据，每页展示10条；</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP LIMIT <span class="hljs-number">10</span>, <span class="hljs-number">10</span>; # 起始索引 <span class="hljs-operator">=</span> （页码数 <span class="hljs-operator">-</span> <span class="hljs-number">1</span>） <span class="hljs-operator">*</span> 每页展示的记录数<br></code></pre></td></tr></table></figure><h3 id="DQL-单表查询案例"><a href="#DQL-单表查询案例" class="headerlink" title="DQL 单表查询案例"></a>DQL 单表查询案例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">要求：</span><br><span class="hljs-comment">1.查询年龄为20,21,22,23岁的员工信息。</span><br><span class="hljs-comment">2．查询性别为 男，并且年龄在 20-40 岁(含)以内的姓名为三个字的员工。</span><br><span class="hljs-comment">3. 统计员工表中，年龄小于60岁的，男性员工和女性员工的人数。</span><br><span class="hljs-comment">4. 查询所有年龄小于等于35岁员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按入职时间降序排序。</span><br><span class="hljs-comment">5. 查询性别为男，且年龄在20-40 岁(含)以内的前5个员工信息，对查询的结果按年龄升序排序，年龄相同按入职时间升序排序。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 1.查询年龄为20,21,22,23岁的员工信息。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> age <span class="hljs-keyword">IN</span> (<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>);<br><br><span class="hljs-comment">-- 2．查询性别为 男，并且年龄在 20-40 岁(含)以内的姓名为三个字的员工。</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP(id, workno, emp_name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-number">19</span>, <span class="hljs-string">&#x27;19&#x27;</span>, <span class="hljs-string">&#x27;小十九&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">29</span>, <span class="hljs-string">&#x27;12345678X&#x27;</span>, <span class="hljs-string">&#x27;江西&#x27;</span>, <span class="hljs-string">&#x27;2020-01-04&#x27;</span>),<br>(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;20&#x27;</span>, <span class="hljs-string">&#x27;小二十&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;12345678X&#x27;</span>, <span class="hljs-string">&#x27;江西&#x27;</span>, <span class="hljs-string">&#x27;2023-01-01&#x27;</span>)<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-operator">&amp;&amp;</span> age <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">20</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">40</span> <span class="hljs-operator">&amp;&amp;</span> emp_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;___&#x27;</span>;<br><br><span class="hljs-comment">-- 3. 统计员工表中，年龄小于60岁的，男性员工和女性员工的人数。</span><br><span class="hljs-keyword">SELECT</span> gender, <span class="hljs-built_in">COUNT</span>(id) <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">60</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> gender;<br><br><span class="hljs-comment">-- 4. 查询所有年龄小于等于35岁员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按入职时间降序排序。</span><br><span class="hljs-keyword">SELECT</span> emp_name, age <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">35</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age <span class="hljs-keyword">ASC</span>, entrydate <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-comment">-- 5. 查询性别为男，且年龄在20-40 岁(含)以内的前5个员工信息，对查询的结果按年龄升序排序，年龄相同按入职时间升序排序。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-operator">&amp;&amp;</span> age <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">20</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">40</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age <span class="hljs-keyword">ASC</span>, entrydate <span class="hljs-keyword">DESC</span> LIMIT <span class="hljs-number">0</span>, <span class="hljs-number">5</span>;# <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 应该在 LIMIT之前<br></code></pre></td></tr></table></figure><h3 id="DQL-语句执行顺序"><a href="#DQL-语句执行顺序" class="headerlink" title="DQL 语句执行顺序"></a>DQL 语句执行顺序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FROM</span> 表名列表          <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>   <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> 指定查询哪张表（多张也可）<br><br><span class="hljs-keyword">WHERE</span> 条件列表   <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>   <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> 指定查询条件列表<br><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 分组字段列表   <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>   <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> 指定分组字段列表<br><br><span class="hljs-keyword">HAVING</span> 分组后条件列表   <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>   <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> 指定分组后的过滤条件列表<br><br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>   <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> 指定查询的字段列表<br><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 排序字段列表<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>   <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> 指定排序字段以及排序方式列表<br><br>LIMIT 分页参数 <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">7</span>   <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> 指定分页参数<br></code></pre></td></tr></table></figure><ul><li>可以通过给字段、表取别名等方式来验证；</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> emp_name, age <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">35</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age <span class="hljs-keyword">ASC</span>;<br><br><span class="hljs-comment">-- 给表取别名em，WHERE 条件中可以使用别名em，验证 FROM &gt; WHERE</span><br><span class="hljs-keyword">SELECT</span> emp_name, age <span class="hljs-keyword">FROM</span> EMP em <span class="hljs-keyword">WHERE</span> em.age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">35</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age <span class="hljs-keyword">ASC</span>;<br><br><span class="hljs-comment">-- 给字段取别名，WHERE 条件中不能使用该别名，并报错，验证 WHERE &gt; SELECT</span><br><span class="hljs-keyword">SELECT</span> emp_name ename, age eage <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> eage <span class="hljs-operator">&lt;=</span> <span class="hljs-number">35</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age <span class="hljs-keyword">ASC</span>;<br><br><span class="hljs-comment">-- 给字段取别名，ORDER BY 中可以使用该别名，验证 SELECT &gt; ORDER BY</span><br><span class="hljs-keyword">SELECT</span> emp_name ename, age eage <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">35</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> eage <span class="hljs-keyword">ASC</span>;<br><br></code></pre></td></tr></table></figure><h2 id="数据控制语言（DCL）"><a href="#数据控制语言（DCL）" class="headerlink" title="数据控制语言（DCL）"></a>数据控制语言（DCL）</h2><ul><li>主要用来<strong>管理数据库用户</strong>和<strong>控制数据库的访问权限</strong>；</li></ul><h3 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h3><ul><li>查询用户</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE mysql;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><ul><li>创建用户</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;密码&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>修改用户密码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;<br></code></pre></td></tr></table></figure><ul><li>删除用户</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    1.创建用户 root1 ，只能够在当前主机Localhost访问，密码123456；</span><br><span class="hljs-comment">    2.创建用户 sea1 ，可以在任意主机访问该数据库，密码123456；</span><br><span class="hljs-comment">    3.修改用户 sea1 的访问密码为 1234；</span><br><span class="hljs-comment">    4.删除root1@localhost用户；</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 1.创建用户 root1，只能够在当前主机Localhost访问，密码123456；</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root1&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>; <br><br><span class="hljs-comment">-- 2.创建用户 sea1 ，可以在任意主机访问该数据库，密码123456；</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;sea1&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>; <br><br><span class="hljs-comment">-- 3.修改用户 sea1 的访问密码为 1234；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;sea1&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;1234&#x27;</span>;<br><br><span class="hljs-comment">-- 4.删除root1@localhost用户；</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root1&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="控制访问权限"><a href="#控制访问权限" class="headerlink" title="控制访问权限"></a>控制访问权限</h3><ul><li>常用的权限</li></ul><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL，ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td>CREATE</td><td>创建数据库&#x2F;表</td></tr></tbody></table><ul><li>查询权限</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>授予权限</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> 权限列表 <span class="hljs-keyword">ON</span> 数据库名.表名 <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>撤销权限</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">REVOKE</span> 权限列表 <span class="hljs-keyword">ON</span> 数据库名.表名 <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习-数据模型</title>
    <link href="/2023/02/16/MySQL-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    <url>/2023/02/16/MySQL-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL学习–数据模型"><a href="#MySQL学习–数据模型" class="headerlink" title="MySQL学习–数据模型"></a>MySQL学习–数据模型</h1><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><ul><li><p>英文简称：RDBMS；</p></li><li><p>概念：建立在关系模型基础上，由<strong>多张相互连接的二维表</strong>组成的数据库。</p></li><li><p>特点：</p><ul><li>使用表结构存储数据，格式统一，便于维护；</li><li>使用SQL语言操作数据，标准统一，使用方便；</li></ul></li></ul><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><ul><li>角色：<ul><li>客户端</li><li>DBMS</li><li>数据库</li><li>数据表</li><li>记录</li><li>MySQL数据库服务器</li></ul></li><li>关系<ul><li>计算机安装了MySQL后，就成为了<strong>MySQL数据库服务器</strong>；</li><li><strong>客户端</strong>通过连接<strong>DBMS</strong>来管理<strong>数据库</strong>；</li><li>客户端使用<strong>SQL语句</strong>通过DBMS来：<ul><li>创建多个数据库；</li><li>在数据库中创建多张<strong>数据表</strong>；</li><li>在表中增加多条<strong>记录</strong>；</li><li>等等；</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习-MySQL介绍</title>
    <link href="/2023/02/14/MySQL-%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/02/14/MySQL-%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL学习-MySQL介绍"><a href="#MySQL学习-MySQL介绍" class="headerlink" title="MySQL学习-MySQL介绍"></a>MySQL学习-MySQL介绍</h1><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li><p>Database，简称DB；</p></li><li><p>存储数据的仓库，数据是有组织的进行存储；</p></li></ul><h3 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h3><ul><li><p>Database Management System，简称DBMS；</p></li><li><p>操纵和管理数据库的大型软件；</p></li></ul><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><ul><li>Structured Query Language，简称SQL；</li><li>操作关系型数据库的编程语言，定义了一套操作关系型数据库的统一标准；</li></ul><h3 id="三者之间的关系"><a href="#三者之间的关系" class="headerlink" title="三者之间的关系"></a>三者之间的关系</h3><ul><li><p><strong>程序员</strong> 通过 <strong>SQL</strong> 操作 <strong>数据库管理系统</strong>；</p></li><li><p>通过 <strong>数据库管理系统</strong> 来操作 <strong>数据库以及数据库中的数据</strong>；</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯算法-经典同层去重（flag标记数组）</title>
    <link href="/2023/02/14/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95-%E7%BB%8F%E5%85%B8%E5%90%8C%E5%B1%82%E5%8E%BB%E9%87%8D%EF%BC%88flag%E6%A0%87%E8%AE%B0%E6%95%B0%E7%BB%84%EF%BC%89/"/>
    <url>/2023/02/14/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95-%E7%BB%8F%E5%85%B8%E5%90%8C%E5%B1%82%E5%8E%BB%E9%87%8D%EF%BC%88flag%E6%A0%87%E8%AE%B0%E6%95%B0%E7%BB%84%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="回溯算法-经典同层去重（flag标记数组）"><a href="#回溯算法-经典同层去重（flag标记数组）" class="headerlink" title="回溯算法-经典同层去重（flag标记数组）"></a>回溯算法-经典同层去重（flag标记数组）</h3><h4 id="LeetCode参考题目："><a href="#LeetCode参考题目：" class="headerlink" title="LeetCode参考题目："></a>LeetCode参考题目：</h4><ul><li>LeetCode_491</li></ul><p>给你一个整数数组 nums ，找出并返回所有该数组中不同的递增子序列，递增子序列中 至少有两个元素 。你可以按 任意顺序 返回答案。</p><p>数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/non-decreasing-subsequences">https://leetcode.cn/problems/non-decreasing-subsequences</a></p><p><strong>flag标记数组去重也可以解决LeetCode_40和LeetCode_90中同层去重问题！！所以，尽量使用这个进行同层去重！！！</strong></p><p><strong>下面是去重的写法</strong></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;List&lt;Integer&gt;&gt; ansList;<br>    List&lt;Integer&gt; cur_s;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">backTrack</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> index)</span>&#123;<br>        <span class="hljs-keyword">if</span>(index == nums.length)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span>[] flag = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">205</span>];<span class="hljs-comment">//标记数组，同层遍历时，前面已经使用过的数字，不能在使用了！</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> index; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>((cur_s.size()&gt;<span class="hljs-number">0</span> &amp;&amp; nums[i] &lt; cur_s.get(cur_s.size()-<span class="hljs-number">1</span>)) || flag[nums[i] +<span class="hljs-number">100</span>] == <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            cur_s.add(nums[i]);<br>            <span class="hljs-comment">//使用过的数字就标记为1，由于nums[i]的范围在【-100，100】之间，因此需要加上100，避免下标为负数</span><br>            flag[nums[i] + <span class="hljs-number">100</span>] = <span class="hljs-number">1</span>;<br><br>            <span class="hljs-keyword">if</span>(cur_s.size() &gt;= <span class="hljs-number">2</span>)<br>                ansList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(cur_s));<br><br>            backTrack(nums, i+<span class="hljs-number">1</span>);<br><br>            cur_s.remove(cur_s.size()-<span class="hljs-number">1</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">findSubsequences</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        ansList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        cur_s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        backTrack(nums, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">return</span> ansList;<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录</category>
      
      <category>回溯算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯算法-经典同层去重（剪枝）</title>
    <link href="/2023/02/13/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95-%E7%BB%8F%E5%85%B8%E5%90%8C%E5%B1%82%E5%8E%BB%E9%87%8D%EF%BC%88%E5%89%AA%E6%9E%9D%EF%BC%89/"/>
    <url>/2023/02/13/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95-%E7%BB%8F%E5%85%B8%E5%90%8C%E5%B1%82%E5%8E%BB%E9%87%8D%EF%BC%88%E5%89%AA%E6%9E%9D%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="回溯算法-经典同层去重（剪枝）"><a href="#回溯算法-经典同层去重（剪枝）" class="headerlink" title="回溯算法-经典同层去重（剪枝）"></a>回溯算法-经典同层去重（剪枝）</h3><h4 id="LeetCode参考题目："><a href="#LeetCode参考题目：" class="headerlink" title="LeetCode参考题目："></a>LeetCode参考题目：</h4><ul><li>LeetCode_40</li></ul><p>给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。</p><p>解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/subsets">https://leetcode.cn/problems/subsets</a></p><ul><li>LeetCode_90</li></ul><p>给你一个整数数组 nums ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。</p><p>解集 不能 包含重复的子集。返回的解集中，子集可以按 任意顺序 排列。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/subsets-ii">https://leetcode.cn/problems/subsets-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p><strong>LeetCode_40之前发过一篇文章，没怎么懂，但是回溯过程如果不去重（剪枝），会超出时间限制！！</strong></p><p><strong>下面是去重的写法</strong></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">static</span> List&lt;List&lt;Integer&gt;&gt; ansList;<br>    <span class="hljs-keyword">static</span> List&lt;Integer&gt; cur_list;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backTrack</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> index)</span>&#123;<br>        <span class="hljs-keyword">if</span>(index == nums.length)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> index; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-comment">//关键地方：同层去重，剪枝操作！</span><br>            <span class="hljs-keyword">if</span>(i &gt; index &amp;&amp; nums[i] == nums[i-<span class="hljs-number">1</span>])<br>                <span class="hljs-keyword">continue</span>;<br>            <br>            cur_list.add(nums[i]);<br><br>            List&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(cur_list);<span class="hljs-comment">//重新保存，防止覆盖</span><br>            ansList.add(list1);<br><br>            backTrack(nums, i+<span class="hljs-number">1</span>);<br><br>            cur_list.remove(cur_list.size()-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">subsetsWithDup</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        ansList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        cur_list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Arrays.sort(nums);<br><br>        ansList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<span class="hljs-comment">//先把空集加入</span><br><br>        backTrack(nums, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">return</span> ansList;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录</category>
      
      <category>回溯算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯算法一般解题步骤</title>
    <link href="/2023/02/10/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E4%B8%80%E8%88%AC%E8%A7%A3%E9%A2%98%E6%AD%A5%E9%AA%A4/"/>
    <url>/2023/02/10/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E4%B8%80%E8%88%AC%E8%A7%A3%E9%A2%98%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="回溯算法一般解题步骤"><a href="#回溯算法一般解题步骤" class="headerlink" title="回溯算法一般解题步骤"></a>回溯算法一般解题步骤</h3><ul><li><p><strong>确定回溯函数模板返回值以及参数</strong></p><ul><li>返回值：一般是void；</li><li>参数：先写回溯逻辑，需要什么参数再填进去；</li></ul></li><li><p><strong>回溯函数终止条件</strong></p><ul><li>遍历到叶子结点时终止：即将回溯遍历整个过程遍历成二叉树；</li></ul></li><li><p><strong>回溯搜索过程的遍历过程</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">backtracking</span><span class="hljs-params">(参数)</span> &#123;<br>    <span class="hljs-keyword">if</span> (终止条件) &#123;<br>        存放结果;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;<br>        处理节点;<br>        backtracking(路径，选择列表); <span class="hljs-comment">// 递归</span><br>        回溯，撤销处理结果<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="回溯算法解决的问题"><a href="#回溯算法解决的问题" class="headerlink" title="回溯算法解决的问题"></a>回溯算法解决的问题</h3><p><strong>回溯法解决的问题都可以抽象为树形结构</strong>，一般可以解决如下几种问题：</p><ul><li>组合问题：N个数里面按一定规则找出k个数的集合；</li><li>切割问题：一个字符串按一定规则有几种切割方式；</li><li>子集问题：一个N个数的集合里有多少符合条件的子集；</li><li>排列问题：N个数按一定规则全排列，有几种排列方式；</li><li>棋盘问题：N皇后，解数独等等；</li></ul>]]></content>
    
    
    <categories>
      
      <category>代码随想录</category>
      
      <category>回溯算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯算法-LeetCode_T40</title>
    <link href="/2023/02/08/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95_LeetCode_T40/"/>
    <url>/2023/02/08/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95_LeetCode_T40/</url>
    
    <content type="html"><![CDATA[<h3 id="回溯算法-LeetCode-T40"><a href="#回溯算法-LeetCode-T40" class="headerlink" title="回溯算法_LeetCode_T40"></a>回溯算法_LeetCode_T40</h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li><p>给定一个候选人编号的集合 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的每个数字在每个组合中只能使用 一次 。</p><p>注意：解集不能包含重复的组合。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/combination-sum-ii">https://leetcode.cn/problems/combination-sum-ii</a></p></li></ul><h3 id="超时写法"><a href="#超时写法" class="headerlink" title="超时写法"></a>超时写法</h3><ul><li>回溯遍历所有组合；</li><li>最后对所有满足条件的组合进行去重；</li><li>ps：我一开始就是这么写的，然后直接提交，“超出时间限制”。</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ul><li>代码随想录给出的题解；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>  LinkedList&lt;Integer&gt; path = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>  <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <br>  <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">combinationSum2</span><span class="hljs-params">( <span class="hljs-type">int</span>[] candidates, <span class="hljs-type">int</span> target )</span> &#123;<br>    <span class="hljs-comment">//为了将重复的数字都放到一起，所以先进行排序</span><br>    Arrays.sort( candidates );<br>    backTracking( candidates, target, <span class="hljs-number">0</span> );<br>    <span class="hljs-keyword">return</span> res;<br>  &#125;<br>  <br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backTracking</span><span class="hljs-params">( <span class="hljs-type">int</span>[] candidates, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span> start )</span> &#123;<br>    <span class="hljs-keyword">if</span> ( sum == target ) &#123;<br>      res.add( <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;( path ) );<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt; candidates.length &amp;&amp; sum + candidates[i] &lt;= target; i++ ) &#123;<br>      <span class="hljs-comment">//正确剔除重复解的办法</span><br>      <span class="hljs-comment">//跳过同一树层使用过的元素</span><br>      <span class="hljs-keyword">if</span> ( i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="hljs-number">1</span>] ) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br><br>      sum += candidates[i];<br>      path.add( candidates[i] );<br>      <span class="hljs-comment">// i+1 代表当前组内元素只选取一次</span><br>      backTracking( candidates, target, i + <span class="hljs-number">1</span> );<br><br>      <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> path.getLast();<br>      sum -= temp;<br>      path.removeLast();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录</category>
      
      <category>回溯算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划一般解题步骤</title>
    <link href="/2023/02/07/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%80%E8%88%AC%E8%A7%A3%E9%A2%98%E6%AD%A5%E9%AA%A4/"/>
    <url>/2023/02/07/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%80%E8%88%AC%E8%A7%A3%E9%A2%98%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="动态规划一般解题步骤"><a href="#动态规划一般解题步骤" class="headerlink" title="动态规划一般解题步骤"></a>动态规划一般解题步骤</h3><ul><li><p><strong>确定dp数组以及下标含义</strong></p></li><li><p><strong>确定递推公式</strong></p></li><li><p><strong>dp数组如何初始化</strong></p></li><li><p><strong>确定遍历顺序</strong></p></li><li><p><strong>举例推导dp数组</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>代码随想录</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo上传文章、分类及标签等操作</title>
    <link href="/2023/02/07/Hexo%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0%E3%80%81%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/"/>
    <url>/2023/02/07/Hexo%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0%E3%80%81%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo上传文章、分类及标签等操作"><a href="#Hexo上传文章、分类及标签等操作" class="headerlink" title="Hexo上传文章、分类及标签等操作"></a>Hexo上传文章、分类及标签等操作</h2><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul><li>本地写好.md文档，复制到\source\_posts文件夹下；</li><li>在.md文档开头加上一下信息：</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">title: 文章标题<br>date: 文章建立日期<br>categories：文章分类（可以有多级分类）<br>tags: 文章标签（可以有多个）<br></code></pre></td></tr></table></figure><p>参数列表及描述</p><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td>文章的文件名</td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr><tr><td>keywords</td><td>仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）</td><td></td></tr></tbody></table><ul><li>在git bash中输入 <strong>hexo g</strong> (完整命令为hexo generate)，用于生成静态文件；</li><li>输入<strong>hexo d</strong>(hexo deploy)发布到git仓库上；</li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建站纪念！</title>
    <link href="/2022/11/24/%E5%BB%BA%E7%AB%99%E7%BA%AA%E5%BF%B5%EF%BC%81/"/>
    <url>/2022/11/24/%E5%BB%BA%E7%AB%99%E7%BA%AA%E5%BF%B5%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h2 id="建站纪念！"><a href="#建站纪念！" class="headerlink" title="建站纪念！"></a>建站纪念！</h2><h3 id="纪念日"><a href="#纪念日" class="headerlink" title="纪念日"></a>纪念日</h3><p><strong>本站出生于公元2022年11月24日，坐标北京市海淀区</strong></p><h3 id="为什么创建这个网站？"><a href="#为什么创建这个网站？" class="headerlink" title="为什么创建这个网站？"></a>为什么创建这个网站？</h3><p>本人是一名计算机专业在读硕士研究生，如本站大标题，趁年轻，多折腾。</p><p>如需进一步交流学习，可通过”关于”页面中的联系方式找到我。</p><p>欢迎大家来玩。</p><h3 id="本站内容的大致方向"><a href="#本站内容的大致方向" class="headerlink" title="本站内容的大致方向"></a>本站内容的大致方向</h3><ul><li>硕士期间，就目前来说，主要是做OpenHarmony相关的方向，因此，本站可能会写一些有关学习OpenHarmony的笔记。（暂定）</li><li>LeetCode刷题记录。</li><li>Java学习笔记。</li><li>记录生活，学习路上的感悟。</li><li>后面再想想其他话题。</li></ul>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
